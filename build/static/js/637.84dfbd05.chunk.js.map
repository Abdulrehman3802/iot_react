{"version":3,"file":"static/js/637.84dfbd05.chunk.js","mappings":"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","sources":["components/global-loader/GlobalLoader.js","constants/CustomRoute.js","routes.js","components/time-periods/UpcomingPeriods.js","components/time-periods/NewPeriod.js","views/pages/alerts/alarmSuppression/AlramSuppression.js","views/pages/alerts/escalations/EscalationModalTable.js","views/pages/alerts/escalations/IncludedExcluded.js","views/pages/alerts/escalations/Escalations.js","views/pages/alerts/alarms-management/AlarmTableModal.js","views/pages/alerts/alarms-management/AlarmsTable.js","components/AppContent.js","components/header/AppHeaderDropdown.js","views/forms/settings-form/Settings.js","components/AppHeader.js","components/AppSidebarNav.js","_nav.js","components/AppSidebar.js","components/DocsExample.js","components/modal/GenericModal.js","constants/constants.js","constants/permissionContant.js","hooks/auth.js","hooks/axios.js","hooks/useAlarms.js","hooks/useAuth.js","hooks/useDepartments.js","hooks/useDevices.js","hooks/useDevicesSensors.js","hooks/useFacilities.js","hooks/useOrganizationDevices.js","hooks/useUsers.js","store/state.js","views/dashboard/Components/BlueGraph/BlueGraph.jsx","views/dashboard/Components/GraphPage.js","assets/images/battery.svg","views/dashboard/Components/Guage.js","hooks/useSensors.js","views/dashboard/Components/Donut.js","views/dashboard/Components/ReportTable/ReportTable.jsx","views/dashboard/Components/TableCard.js","views/dashboard/Counter_Comp.js","views/dashboard/ConditionSummary/ConditionSummary.js","views/dashboard/Dashboard.js","views/forms/add-device-sensors/add-device-sensor.js","views/forms/add-sensor-configration/add-sensor-configration.js","hooks/useDepartmentstaff.js","views/forms/add-department-staff-form/add-department-staff.js","views/pages/Staff/Department/DepartmentStaff.js","views/forms/add-device-staff-form/add-device-staff.js","hooks/useDeviceStaff.js","views/pages/Staff/Devices/DevicesStaff.js","hooks/useFacilitiesStaff.js","views/forms/add-facility-staff-form/add-facility-staff.js","views/pages/Staff/Facility/FacilitySatff.js","views/forms/add-staff-form/add-staff-form.js","views/forms/assign-staff-form/assign-staff-form.js","views/pages/Staff/Users/user.js","views/forms/add-department-form/add-department-form.js","views/pages/admin/department/Department.js","views/forms/add-device-form/add-device-form.js","views/pages/admin/devices/Devices.js","views/forms/add-facility-from/add-facility-from.js","views/pages/admin/facilities/Facilities.js","views/forms/gateway/GatewayForm.js","hooks/usegateway.js","views/pages/admin/gateway/Gateway.js","views/forms/add-organization-form/AddOrganizationForm.js","views/pages/admin/organization/Organization.js","hooks/useNotifications.js","views/forms/Notification-alarm/NotificationAlarm.js","views/forms/smsnumber/SmsNumber.js","views/pages/alerts/notification-setup/Notification-Setup.js","views/pages/page404/Page404.js","views/pages/sensors/devices-sensors/DevicesSensors.js","views/forms/add-organization-sensor/add-organization-sensor.js","views/pages/sensors/organization-sensors/OrganizationSensor.js","components/modal/DeleteModal.js","views/table/GenericTable.js"],"sourcesContent":["import React from 'react'\nimport { ClipLoader } from 'react-spinners'\nimport { useState } from 'react'\nimport { SpinnerInfinity } from 'spinners-react'\n\nconst GlobalLoader = () => {\n  return (\n    <div\n      className=\"d-flex w-100 justify-content-center align-items-center\"\n      style={{ height: '100vh' }}\n    >\n      <SpinnerInfinity\n        size={100}\n        thickness={120}\n        speed={100}\n        color=\"#0000FF\"\n        secondaryColor=\"rgba(0, 0, 0, 0.44)\"\n      />\n    </div>\n  )\n}\n\nexport default GlobalLoader\n","import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { AppHeader } from 'src/components'\nimport { hasPermissionToActionAccess } from './permissionContant'\n\nconst CustomRoute = (props) => {\n  const permissions = localStorage.getItem('permissions')\n  // eslint-disable-next-line react/prop-types\n  const status = hasPermissionToActionAccess(permissions, props.pageAccess, props.pageAction)\n\n  if (status) {\n    return <props.component />\n  } else {\n    return <Navigate to=\"/error\" replace />\n  }\n}\n\nexport default CustomRoute\n","import React from \"react\";\nimport AddSensorConfigration from \"./views/forms/add-sensor-configration/add-sensor-configration\";\nimport CustomRoute from \"./constants/CustomRoute\";\nimport Page404 from \"./views/pages/page404/Page404\";\n\nconst Dashboard = React.lazy(() => import(\"./views/dashboard/Dashboard\"));\nconst Accordion = React.lazy(() => import(\"./views/base/accordion/Accordion\"));\nconst Breadcrumbs = React.lazy(() =>\n  import(\"./views/base/breadcrumbs/Breadcrumbs\")\n);\nconst Organization = React.lazy(() =>\n  import(\"./views/pages/admin/organization/Organization\")\n);\nconst Department = React.lazy(() =>\n  import(\"./views/pages/admin/department/Department\")\n);\nconst Devices = React.lazy(() => import(\"./views/pages/admin/devices/Devices\"));\nconst Facilities = React.lazy(() =>\n  import(\"./views/pages/admin/facilities/Facilities\")\n);\nconst UserManagement = React.lazy(() =>\n  import(\"./views/pages/management/UserManagement\")\n);\nconst DevicesSensors = React.lazy(() =>\n  import(\"./views/pages/sensors/devices-sensors/DevicesSensors\")\n);\nconst OrganizationSensors = React.lazy(() =>\n  import(\"./views/pages/sensors/organization-sensors/OrganizationSensor\")\n);\nconst FacilityStaff = React.lazy(() =>\n  import(\"./views/pages/Staff/Facility/FacilitySatff\")\n);\nconst DepartmnentStaff = React.lazy(() =>\n  import(\"./views/pages/Staff/Department/DepartmentStaff\")\n);\nconst DeviceStaff = React.lazy(() =>\n  import(\"./views/pages/Staff/Devices/DevicesStaff\")\n);\nconst Users = React.lazy(() => import(\"./views/pages/Staff/Users/user\"));\nconst SensorGraph = React.lazy(() =>\n  import(\"./views/dashboard/Components/GraphPage\")\n);\nconst GateWay = React.lazy(() => import(\"./views/pages/admin/gateway/Gateway\"));\nconst NotificationAlerts = React.lazy(() =>\n  import(\"./views/pages/alerts/notification-setup/Notification-Setup\")\n);\nconst AlramThreshold = React.lazy(() =>\n  import(\"./views/pages/alerts/alarm-threshold/Alram-threshold\")\n);\nconst routes = [\n  { path: \"/\", exact: true, name: \"Home\" },\n  // {\n  //   path: '/dashboard',\n  //   name: 'Dashboard',\n  //   element: Dashboard,\n  // },\n  // {\n  //   path: '/organizations',\n  //   name: 'Organization',\n  //   element: Organization,\n  // },\n  // {\n  //   path: '/facilities',\n  //   name: 'Facilities',\n  //   element: Facilities,\n  // },\n  // {\n  //   path: '/department',\n  //   name: 'Department',\n  //   element: Department,\n  // },\n  // {\n  //   path: '/devices',\n  //   name: 'Devices',\n  //   element: Devices,\n  // },\n  {\n    path: \"/error\",\n    name: \"Error\",\n    element: Page404,\n  },\n  {\n    path: \"/user-management\",\n    name: \"UserManagement\",\n    element: UserManagement,\n  },\n  // {\n  //   path: '/organization-sensors',\n  //   name: 'OrganizationSensors',\n  //   element: OrganizationSensors,\n  // },\n  // {\n  //   path: '/devices-sensors',\n  //   name: 'DevicesSensors',\n  //   element: DevicesSensors,\n  // },\n  {\n    path: \"/devices-sensors/sensor-configration\",\n    name: \"SensorConfigration\",\n    element: AddSensorConfigration,\n  },\n  // {\n  //   path: '/Facilities-staff',\n  //   name: 'Facility Staff',\n  //   element: FacilityStaff,\n  // },\n  // {\n  //   path: '/Department-staff',\n  //   name: 'Department Staff',\n  //   element: DepartmnentStaff,\n  // },\n  // {\n  //   path: '/Devices-staff',\n  //   name: 'Device Staff',\n  //   element: DeviceStaff,\n  // },\n  // {\n  //   path: '/users',\n  //   name: 'Users',\n  //   element: Users,\n  // },\n  // {\n  //   path: 'sensor/graph',\n  //   name: 'SensorGraph',\n  //   element: SensorGraph,\n  // },\n  // {\n  //   path: '/gateway',\n  //   name: 'Gateway',\n  //   element: GateWay,\n  // },\n  // {\n  //   path: '/notification-alerts',\n  //   name: 'NotificationAlerts',\n  //   element: NotificationAlerts,\n  // },\n  {\n    path: \"/alarm-thresholds\",\n    name: \"AlramThreshold\",\n    element: AlramThreshold,\n  },\n];\n\nexport default routes;\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types';\n\nimport {\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n} from '@coreui/react'\nimport { addSuppression, getAllActiveSuppression, getAllExpiredSuppression, getAllUpcomingSuppression } from 'src/hooks/useAlarms';\nimport { useMutation } from \"react-query\";\n\n// const tableData = [\n//   {\n//     start: '0513 15-02-2024',\n//     end: '0513 15-02-2024',\n//     duration: '1 day',\n//     scope: 'Central Glpsland health',\n//     informUser: 'Medication Checked 056754277383',\n//     // action: 'No',\n//   },\n//   {\n//     start: '0513 15-02-2024',\n//     end: '0513 15-02-2024',\n//     duration: '1 day',\n//     scope: 'Central Glpsland health',\n//     informUser: 'Medication Checked 056754277383',\n//     // action: 'No',\n//   },\n\n// ];\n\nconst UpcomingPeriods = ({ type }) => {\n  const [tabledata, setTableData] = useState([])\n  const { mutate: ActiveSuppression } = useMutation(getAllActiveSuppression);\n  const { mutate: ExpiredSuppression } = useMutation(getAllExpiredSuppression);\n  const { mutate: UpcomingSuppression } = useMutation(getAllUpcomingSuppression);\n  function getActiveSuppression() {\n    ActiveSuppression(\"\", {\n      onSuccess: (data) => {\n        setTableData(data.data);\n      },\n      onError: (error) => { },\n    });\n  } function getUpcomingSuppression() {\n    UpcomingSuppression(\"\", {\n      onSuccess: (data) => {\n        setTableData(data.data);\n      },\n      onError: (error) => { },\n    });\n  } function getExpiredSuppression() {\n    ExpiredSuppression(\"\", {\n      onSuccess: (data) => {\n        setTableData(data.data);\n      },\n      onError: (error) => { },\n    });\n  }\n  useEffect(() => {\n    // debugger\n    if (type == \"Active Periods Suppression\") {\n      getActiveSuppression()\n    } else if (type == \"Upcoming Periods Suppression\") {\n      getUpcomingSuppression()\n    } else {\n      getExpiredSuppression();\n    }\n\n  }, [])\n  return (\n    <>\n      <h5 style={{ color: 'black', marginTop: '30px' }}>{type}</h5>\n      <div>\n        <CTable bordered responsive>\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell>Sensor</CTableHeaderCell>\n              <CTableHeaderCell>Start</CTableHeaderCell>\n              <CTableHeaderCell>End</CTableHeaderCell>\n              <CTableHeaderCell>Duration</CTableHeaderCell>\n              <CTableHeaderCell>Inform User</CTableHeaderCell>\n\n              {/* {Object.keys(tableData[0]).map((header, index) => (\n                <CTableHeaderCell key={index} scope=\"col\" style={{ fontFamily: 'sans-serif' }}>\n                  {header.charAt(0).toUpperCase() + header.slice(1)}\n                </CTableHeaderCell>\n              ))} */}\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {tabledata.map((suppression, rowIndex) => {\n              debugger\n              return (\n\n                <CTableRow key={rowIndex}>\n                  <CTableDataCell>{suppression.sensors.sensorname}-{suppression.sensors.aws_sensorid}</CTableDataCell>\n                  <CTableDataCell>{suppression.start_time}</CTableDataCell>\n                  <CTableDataCell>{suppression.end_time}</CTableDataCell>\n                  <CTableDataCell>{suppression.duration}</CTableDataCell>\n                  <CTableDataCell>{suppression.informuser ? \"True\" : \"False\"}</CTableDataCell>\n\n                  {/* {Object.values(row).map((cell, cellIndex) => (\n                  <CTableDataCell key={cellIndex} style={{ fontFamily: 'sans-serif' }}>\n                    {cell}\n                  </CTableDataCell>\n                ))} */}\n                </CTableRow>\n              )\n            }\n            )}\n          </CTableBody>\n        </CTable>\n      </div>\n\n    </>\n  )\n}\n\n\nexport default UpcomingPeriods\n\nUpcomingPeriods.propTypes = {\n  type: PropTypes.any.isRequired,\n  // closeModal: PropTypes.any.isRequired,\n\n};\n","import React, { useEffect, useState } from \"react\";\nimport { CFormInput, CFormCheck, CButton } from \"@coreui/react\";\nimport { getAllAssignedSensorsofOrg } from \"src/hooks/useOrganizationDevices\";\nimport { useMutation } from \"react-query\";\nimport { addSuppression } from 'src/hooks/useAlarms';\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { CCol , CFormLabel , CFormSelect } from \"@coreui/react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst NewPeriod = () => {\n  const [data, setData] = useState({\n    startTime: \"\",\n    startDate: \"\",\n    endTime: \"\",\n    endDate: \"\",\n    notification: false,\n  });\n  const { dispatch } = useLoader();\n  const [sensorData , setSensor] = useState([])\n  const { mutate: getSensors } = useMutation(getAllAssignedSensorsofOrg);\n  const { setShowToast } = useGlobalInfo();\n  const { mutate: SuppressionAdd } = useMutation(addSuppression);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  function getAllSensors(id) {\n    getSensors(id, {\n      onSuccess: (data) => {\n        // debugger\n        setSensor(data.data);\n\n      },\n      onError: (error) => {},\n    });\n  }\n  function AddSuppression(data) {\n    SuppressionAdd(data, {\n      onSuccess: (data) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"New Suppression Added Successfully\",\n        }));\n        // setSensor(data.data);\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: \"Suppression Added Failed\",\n        }));\n      },\n    });\n  }\n\n  const handleChange = (e) => {\n    if (e.target.id === \"informUser\") {\n      setData({ ...data, [e.target.id]: e.target.checked });\n      return;\n    }\n    setData({ ...data, [e.target.id]: e.target.value });\n  };\n\n  const handleCreate = () => {\n    // Format start_time and end_time\n    const formattedData = {\n      // ...data,\n\n      start_time: `${data.startDate}T${data.startTime}:00.000Z`,\n      end_time: `${data.endDate}T${data.endTime}:00.000Z`,\n      informUser: true,\n      sensorids: [Number(data.sensorid)],\n    };\n\n    // Remove unnecessary properties\n    delete formattedData.startDate;\n    delete formattedData.startTime;\n    delete formattedData.endDate;\n    delete formattedData.endTime;\n    delete formattedData.sensorid;\n\n    // Call AddSuppression with the formatted data\n    AddSuppression(formattedData);\n\n    console.log(formattedData);\n  };\n  useEffect(()=>{\n    getAllSensors(localStorage.getItem(\"OrganizationId\"))\n  },[])\n\n  return (\n    <>\n      <div\n        style={{ display: \"flex\", flexDirection: \"column\", overflowX: \"auto\" ,padding:\"20px\"}}\n      >\n        <div\n          style={{\n            display: \"flex\",\n\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            gap: \"30px\",\n\n          }}\n        >\n          <div style={\n            {\n              width:\"50%\",\n            }\n          }>\n            <h4 style={{ color: \"black\" }}>Start Time</h4>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                gap: \"5px\",\n              }}\n            >\n              <CFormInput\n                style={{ width: \"200px\" }}\n                type=\"time\"\n                id=\"startTime\"\n                value={data.startTime}\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n              />\n              <CFormInput\n                style={{ width: \"200px\" }}\n                type=\"date\"\n                id=\"startDate\"\n                value={data.startDate}\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n              />\n            </div>\n            <br/>\n            <h4 style={{ color: \"black\" }}>End Time</h4>\n            <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                gap: \"5px\",\n              }}\n            >\n              <CFormInput\n                style={{ width: \"200px\" }}\n                type=\"time\"\n                id=\"endTime\"\n                value={data.endTime}\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n              />\n              <CFormInput\n                style={{ width: \"200px\" }}\n                type=\"date\"\n                id=\"endDate\"\n                value={data.endDate}\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n              />\n            </div>\n          </div>\n\n          <div\n            style={{\n              display: \"flex\",\n              flexDirection: \"column\",\n              width: \"50%\",\n              gap: \"5px\",\n              padding: \"10px\",\n            }}\n          >\n            <h4 style={{ color: \"black\" }}>Notification</h4>\n            <div>\n              <CFormCheck\n                id=\"notification\"\n                checked={data.notification}\n                onChange={(e) => {\n                  handleChange(e);\n                }}\n              />\n              <span style={{ color: \"black\" }}>\n                {\" \"}\n                inform user user with the always notify settings, who have\n                access to these sensors or system will always be notified\n                regardless of this setting\n              </span>{\" \"}\n            </div>\n          </div>\n        </div>\n                <br/>\n                <CCol md={6}>\n        <CFormLabel\n          // id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationSensorId\"\n        >\n         <h4>Sensors</h4>\n        </CFormLabel>\n        <CFormSelect\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid sensor id\"\n          name=\"sensorid\"\n          value={data.sensorid}\n          id=\"sensorid\"\n          onChange={(e)=>{\n            handleChange(e)\n          }}\n\n          // onChange={handleInputChange}\n        >\n          <option>Select Sensors</option>\n          {sensorData?.map((item, index) => {\n            return (\n              <option value={item.sensorid} key={index}>\n                {item.aws_sensorid}-{item.sensorname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      <br/>\n        <div style={{textAlign:\"\",marginTop:\"10px\"}} >\n        <CButton onClick={handleCreate}>Create</CButton>\n          </div>      </div>\n    </>\n  );\n};\n\nexport default NewPeriod;\n","import React, { useState } from 'react';\nimport UpcomingPeriods from 'src/components/time-periods/UpcomingPeriods';\nimport NewPeriod from 'src/components/time-periods/NewPeriod';\nimport { CCol } from '@coreui/react';\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  CButton,\n  CButtonGroup,\n} from '@coreui/react';\nimport { useMutation } from \"react-query\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { addSuppression, getAllActiveSuppression, getAllExpiredSuppression, getAllUpcomingSuppression } from 'src/hooks/useAlarms';\n\nconst AlarmSuppression = () => {\n  const { dispatch } = useLoader();\n  const { mutate: SuppressionAdd } = useMutation(addSuppression);\n\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const [showUpcomingPeriods, setShowUpcomingPeriods] = useState(false);\n  const [showActivePeriods, setShowActivePeriods] = useState(false);\n  const [showExpiredPeriods, setShowExpiredPeriods] = useState(false);\n  const [showNewPeriod, setShowNewPeriod] = useState(false);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  const handleButtonClick = (type) => {\n    setShowActivePeriods(type === 'active');\n    setShowExpiredPeriods(type === 'expired');\n    setShowUpcomingPeriods(type === 'upcoming');\n    setShowNewPeriod(type === 'create');\n  };\n\n  return (\n    <>\n      <div>\n        <CCol>\n          <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n            Alarm Suppression\n          </h3>\n        </CCol>\n        {/* <CButtonGroup role=\"group\" aria-label=\"Basic outlined example\">\n          <CButton color=\"primary\" variant=\"outline\" >\n            Upcoming Suppression Periods\n          </CButton>\n          <CButton color=\"primary\" variant=\"outline\">\n            Active Suppression Periods\n          </CButton>\n          <CButton color=\"primary\" variant=\"outline\" >\n            Expired Suppression Periods\n          </CButton>\n          <CButton color=\"primary\" variant=\"outline\" >\n            Create New Suppression Periods\n          </CButton>\n        </CButtonGroup> */}\n\n        <div className=\"tab-container\">\n          <input type=\"radio\" name=\"tab\" id=\"tab1\" className=\"tab tab--1\" onClick={() => handleButtonClick('upcoming')} />\n          <label className=\"tab_label\" htmlFor=\"tab1\"> Upcoming Suppression Periods</label>\n\n          <input type=\"radio\" name=\"tab\" id=\"tab2\" className=\"tab tab--2\" onClick={() => handleButtonClick('active')} />\n          <label className=\"tab_label\" htmlFor=\"tab2\"> Active Suppression Periods</label>\n\n          <input type=\"radio\" name=\"tab\" id=\"tab3\" className=\"tab tab--3\" onClick={() => handleButtonClick('expired')} />\n          <label className=\"tab_label\" htmlFor=\"tab3\">  Expired Suppression Periods</label>\n\n          <input type=\"radio\" name=\"tab\" id=\"tab4\" className=\"tab tab--4\" onClick={() => handleButtonClick('create')} />\n          <label className=\"tab_label\" htmlFor=\"tab4\">   Create New Suppression Periods</label>\n\n          <div className=\"indicator\"></div>\n        </div>\n\n\n\n\n\n      </div>\n      <div>\n        {showUpcomingPeriods && <UpcomingPeriods type={\"Upcoming Periods Suppression\"}/>}\n        {showActivePeriods && <UpcomingPeriods type={\"Active Periods Suppression\"}/>}\n        {showExpiredPeriods && <UpcomingPeriods type={\"Expired Periods Suppression\"}/>}\n        {showNewPeriod && <NewPeriod type={\"New Suppression\"}/>}\n        {/* Add other content or components below the buttons */}\n      </div>\n    </>\n  );\n};\n\nexport default AlarmSuppression;\n","import React, { useState } from \"react\";\nimport { cilClipboard, cilNoteAdd, cilReportSlash } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  CButton,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport PropTypes from \"prop-types\";\n\nconst daysOfWeek = [\"Mon\", \"Tue\", \"Wed\", \"Thur\", \"Fri\", \"Sat\", \"Sun\"];\n\nconst EscalationModalTable = ({ dataToModal }) => {\n  const [step, setSteps] = useState(dataToModal.step);\n  const [IsAddToSchedule, setIsAddToSchedule] = useState(false);\n  const [addedSchedule, setAddedSchedule] = useState(\"\");\n  const [selectedSchedule, setSelectedSchedule] = useState({\n    scheduleName: step[0],\n    methodType: \"Email\",\n  });\n\n  // Use an object to store schedule data dynamically\n  const [schedules, setSchedules] = useState({\n    [selectedSchedule.scheduleName]: {\n      scheduleName: selectedSchedule.scheduleName,\n      methodType: selectedSchedule.methodType,\n      days: {\n        Mon: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Tue: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Wed: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Thur: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Fri: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Sat: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        Sun: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n      },\n    },\n  });\n\n  const handleStartTimeChange = (start, day) => {\n    setSchedules((prevSchedules) => ({\n      ...prevSchedules,\n      [selectedSchedule.scheduleName]: {\n        ...prevSchedules[selectedSchedule.scheduleName],\n        days: {\n          ...prevSchedules[selectedSchedule.scheduleName].days,\n          [day]: {\n            ...prevSchedules[selectedSchedule.scheduleName].days[day],\n            start: start,\n          },\n        },\n      },\n    }));\n  };\n\n  const handleEndTimeChange = (end, day) => {\n    setSchedules((prevSchedules) => ({\n      ...prevSchedules,\n      [selectedSchedule.scheduleName]: {\n        ...prevSchedules[selectedSchedule.scheduleName],\n        days: {\n          ...prevSchedules[selectedSchedule.scheduleName].days,\n          [day]: {\n            ...prevSchedules[selectedSchedule.scheduleName].days[day],\n            end: end,\n          },\n        },\n      },\n    }));\n  };\n\n  const handleAllDayChange = (e, day) => {\n    setSchedules((prevSchedules) => ({\n      ...prevSchedules,\n      [selectedSchedule.scheduleName]: {\n        ...prevSchedules[selectedSchedule.scheduleName],\n        days: {\n          ...prevSchedules[selectedSchedule.scheduleName].days,\n          [day]: {\n            ...prevSchedules[selectedSchedule.scheduleName].days[day],\n            allDay: e.target.checked,\n          },\n        },\n      },\n    }));\n  };\n\n  const handleNoneChange = (e, day) => {\n    setSchedules((prevSchedules) => ({\n      ...prevSchedules,\n      [selectedSchedule.scheduleName]: {\n        ...prevSchedules[selectedSchedule.scheduleName],\n        days: {\n          ...prevSchedules[selectedSchedule.scheduleName].days,\n          [day]: {\n            ...prevSchedules[selectedSchedule.scheduleName].days[day],\n            none: e.target.checked,\n          },\n        },\n      },\n    }));\n  };\n\n  const handleSave = () => {\n    console.log(schedules);\n  };\n\n  const renderTableRows = () => {\n    const currentSchedule = schedules[selectedSchedule.scheduleName];\n\n    if (!currentSchedule || !currentSchedule.days) {\n      return null;\n    }\n\n    return daysOfWeek.map((day) => (\n      <CTableRow key={day}>\n        <CTableDataCell>{day}</CTableDataCell>\n        <CTableDataCell>\n          <CFormInput\n            type=\"time\"\n            value={currentSchedule.days[day].start}\n            onChange={(e) => handleStartTimeChange(e.target.value, day)}\n          />\n        </CTableDataCell>\n        <CTableDataCell>\n          <CFormInput\n            type=\"time\"\n            value={currentSchedule.days[day].end}\n            onChange={(e) => handleEndTimeChange(e.target.value, day)}\n          />\n        </CTableDataCell>\n        <CTableDataCell>\n          <input\n            type=\"checkbox\"\n            checked={currentSchedule.days[day].allDay}\n            onChange={(e) => handleAllDayChange(e, day)}\n          />\n          <CFormLabel style={{ fontSize: \"12px\" }}>All Day</CFormLabel>\n        </CTableDataCell>\n        <CTableDataCell>\n          <input\n            type=\"checkbox\"\n            checked={currentSchedule.days[day].none}\n            onChange={(e) => handleNoneChange(e, day)}\n          />\n          <CFormLabel style={{ fontSize: \"12px\" }}>None</CFormLabel>\n        </CTableDataCell>\n        <CTableDataCell style={{display:\"flex\" ,justifyContent:\"space-around\"}}>\n          <CIcon style={{color:\"green\"}} icon={cilNoteAdd} />\n          <CIcon style={{color:\"red\"}} icon={cilReportSlash} />\n        </CTableDataCell>\n      </CTableRow>\n    ));\n  };\n\n  // const handleAddSchedule = (scheduleName) => {\n  //   setSteps([...step, scheduleName]);\n  //   setSelectedSchedule({\n  //     scheduleName: scheduleName,\n  //     methodType: \"Email\",\n  //   });\n  //   setSchedules((prevSchedules) => ({\n  //     ...prevSchedules,\n  //     [scheduleName]: {\n  //       scheduleName: scheduleName,\n  //       methodType: \"Email\",\n  //       days: {\n  //         Mon: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Tue: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Wed: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Thur: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Fri: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Sat: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //         Sun: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n  //       },\n  //     },\n  //   }));\n  //   setIsAddToSchedule(false);\n  // };\n  const handleAddSchedule = (scheduleName) => {\n    setSteps([...step, scheduleName]);\n    setSelectedSchedule({\n      scheduleName: scheduleName,\n      methodType: \"Email\",\n    });\n    setSchedules((prevSchedules) => ({\n      ...prevSchedules,\n      [scheduleName]: {\n        scheduleName: scheduleName,\n        methodType: \"Email\",\n        days: {\n          Mon: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Tue: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Wed: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Thur: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Fri: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Sat: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n          Sun: { start: \"00:00\", end: \"00:00\", allDay: false, none: false },\n        },\n      },\n    }));\n    setIsAddToSchedule(false);\n  };\n  const DeleteStepByName = (item) => {\n    setSteps((prevSteps) => prevSteps.filter((step) => step !== item));\n    const { [item]: deletedSchedule, ...restSchedules } = schedules;\n\n    setSchedules(restSchedules);\n  };\n\n  return (\n    <div style={{ padding: \"15px\" }}>\n      <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\n        {step.map((item, index) => (\n          <div\n            key={index}\n            onClick={() => {\n              setSelectedSchedule({\n                scheduleName: item,\n                methodType: \"Select Method\",\n              });\n\n              setSchedules((prevSchedules) => ({\n                ...prevSchedules,\n                [item]: {\n                  scheduleName: item,\n                  methodType: \"Email\",\n                  days: {\n                    Mon: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Tue: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Wed: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Thur: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Fri: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Sat: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                    Sun: {\n                      start: \"00:00\",\n                      end: \"00:00\",\n                      allDay: false,\n                      none: false,\n                    },\n                  },\n                },\n              }));\n\n              setIsAddToSchedule(false);\n            }}\n            style={{\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\",\n              gap: \"10px\",\n              padding: \"10px\",\n              borderRadius: \"5px\",\n              backgroundColor:\n                item === selectedSchedule.scheduleName ? \"lightgray\" : \"white\",\n            }}\n          >\n            <h4 style={{ fontSize: \"small\", padding: \"10px\" }}>{`${item}`}</h4>\n            <CIcon\n              icon={cilReportSlash}\n              onClick={() => {\n                DeleteStepByName(item);\n              }}\n              style={{\n                color: \"red\",\n              }}\n            />\n          </div>\n        ))}\n        <div style={{ textAlign: \"right\" }}>\n          <CButton\n            onClick={() => {\n              setIsAddToSchedule(true);\n            }}\n          >\n            Add Schedule\n          </CButton>\n        </div>\n      </div>\n      {!IsAddToSchedule && (\n        <>\n          <div>\n            <CFormLabel style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>\n              Schedule Name\n            </CFormLabel>\n            <CFormInput\n              id=\"scheduleName\"\n              type=\"text\"\n              placeholder={selectedSchedule.scheduleName}\n              readOnly\n            />\n          </div>\n          <div>\n            <CFormLabel style={{ fontSize: \"12px\", fontWeight: \"bold\" }}>\n              Method Type\n            </CFormLabel>\n            <CFormSelect\n              id=\"methodType\"\n              style={{ fontSize: \"12px\" }}\n              value={selectedSchedule.methodType}\n              onChange={(e) =>\n                setSelectedSchedule({\n                  ...selectedSchedule,\n                  methodType: e.target.value,\n                })\n              }\n            >\n              <option>Select Method</option>\n              <option>Email</option>\n              <option>Text to Speech</option>\n            </CFormSelect>\n          </div>\n        </>\n      )}\n      {!IsAddToSchedule && (\n        <div style={{marginTop:\"20px\"}}>\n          <CTable bordered responsive>\n            <CTableHead>\n              <CTableRow>\n                <CTableHeaderCell>Days</CTableHeaderCell>\n                <CTableHeaderCell>Start</CTableHeaderCell>\n                <CTableHeaderCell>End</CTableHeaderCell>\n                <CTableHeaderCell>All Day</CTableHeaderCell>\n                <CTableHeaderCell>None</CTableHeaderCell>\n                <CTableHeaderCell>Actions</CTableHeaderCell>\n              </CTableRow>\n            </CTableHead>\n            <CTableBody>{renderTableRows()}</CTableBody>\n          </CTable>\n          <CButton onClick={handleSave}>Save</CButton>\n        </div>\n      )}\n      {IsAddToSchedule && (\n        <div>\n          <CFormLabel htmlFor=\"name\">ADD SCHEDULE</CFormLabel>\n          <CFormInput\n            type=\"text\"\n            id=\"name\"\n            name=\"name\"\n            value={addedSchedule}\n            onChange={(e) => setAddedSchedule(e.target.value)}\n            placeholder=\"Enter Schedule Name\"\n          />\n          <CButton\n            color=\"primary\"\n            onClick={() => {\n              handleAddSchedule(addedSchedule);\n              setAddedSchedule(\"\");\n            }}\n            className=\"mt-3\"\n          >\n            Add\n          </CButton>\n        </div>\n      )}\n    </div>\n  );\n};\n\nEscalationModalTable.propTypes = {\n  dataToModal: PropTypes.array.isRequired,\n};\n\nexport default EscalationModalTable;\n","import {\n  CButton,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport React, { useState } from \"react\";\n\nconst IncludedExcluded = () => {\n  const FakeExcluded = [\n    \"sensor one\",\n    \"sensor two\",\n    \"sensor three\",\n    \"sensor four\",\n    \"sensor five\",\n    \"sensor six\",\n    \"sensor seven\",\n    \"sensor eight\",\n    \"sensor nine\",\n  ];\n  const fakeIncluded = [];\n  const [included, setIncluded] = useState(fakeIncluded);\n  const [excluded, setExcluded] = useState(FakeExcluded);\n\n  const onAdd = (exclude) => {\n    setIncluded([...included, exclude]);\n    setExcluded(excluded.filter((item) => item !== exclude));\n  };\n\n  const onRemove = (include) => {\n    setExcluded([...excluded, include]);\n    setIncluded(included.filter((item) => item !== include));\n  };\n\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <CTable style={{ height: \"fit-content\" }}>\n          <CTableHead>\n            <CTableHeaderCell scope=\"col\">Excluded</CTableHeaderCell>\n          </CTableHead>\n          <CTableBody>\n            {excluded.map((item) => (\n              <CTableRow key={item}>\n                <CTableDataCell>\n                    {item}\n                </CTableDataCell>\n                <CTableDataCell>\n                  <CButton color=\"primary\" onClick={() => onAdd(item)}>Add</CButton>\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n        <CTable style={{ height: \"fit-content\" }}>\n          <CTableHead>\n            <CTableHeaderCell scope=\"col\">Included</CTableHeaderCell>\n          </CTableHead>\n          <CTableBody>\n            {included.map((item) => (\n              <CTableRow key={item}>\n                <CTableDataCell>{item}</CTableDataCell>\n                <CTableDataCell>\n                  <CButton color=\"danger\" onClick={() => onRemove(item)}>\n                    Remove\n                  </CButton>\n                </CTableDataCell>\n              </CTableRow>\n            ))}\n          </CTableBody>\n        </CTable>\n      </div>\n      <div>\n        <CButton\n          onClick={() => {\n            console.log(included);\n          }}\n        >\n          Save\n        </CButton>\n      </div>\n    </>\n  );\n};\n\nexport default IncludedExcluded;\n","import React, { useState } from \"react\";\nimport {\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableBody,\n  CTableDataCell,\n  CButton,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport EscalationModalTable from \"./EscalationModalTable\";\nimport { cilClipboard, cilPlus, cilReportSlash } from \"@coreui/icons\";\nimport IncludedExcluded from \"./IncludedExcluded\";\n\nconst Escalations = () => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const [isIncludedExcludedOpen, setIsIncludedExcludedOpen] = useState(false);\n\n  const [dataToModal, setDataToModal] = useState(null);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const tableStyle = {\n    width: \"90%\",\n    backgroundColor: \"gray\",\n    borderCollapse: \"collapse\",\n  };\n\n  const thStyle = {\n    textAlign: \"center\",\n  };\n\n  const sensorCellStyle = {\n    textAlign: \"left\",\n  };\n\n  const stepCellStyle = {\n    textAlign: \"center\",\n  };\n\n  const FakeData = [\n    {\n      sensorGroup: \"Sensor Group 1\",\n      steps: [\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n        // [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n      ],\n      details: {\n        time: \"0 mins Ago\",\n        actions: [\"Clipboard\", \"Report\"],\n      },\n    },\n    {\n      sensorGroup: \"Sensor Group 1\",\n      steps: [\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n      ],\n      details: {\n        time: \"0 mins Ago\",\n        actions: [\"Clipboard\", \"Report\"],\n      },\n    },\n    {\n      sensorGroup: \"Sensor Group 1\",\n      steps: [\n        // [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n        // [\"AH 1N Alarm 1-Email\", \"AH 1N Alarm 1-Phone\"],\n        // [\"AH 1N Alarm 2-Email\", \"AH 1N Alarm 2-Phone\"],\n        // [\"AH 1N Alarm 3-Email\", \"AH 1N Alarm 3-Phone\"],\n      ],\n      details: {\n        time: \"0 mins Ago\",\n        actions: [\"Clipboard\", \"Report\"],\n      },\n    },\n  ];\n\n  return (\n    <>\n      {isIncludedExcludedOpen && (\n        <GenericModal\n          title={\"Included/Excluded\"}\n          content={\n            <IncludedExcluded\n              closeModal={() => {\n                setIsIncludedExcludedOpen(false);\n              }}\n            />\n          }\n          isOpen={isIncludedExcludedOpen}\n          onClose={() => {\n            setIsIncludedExcludedOpen(false);\n          }}\n        />\n      )}\n      {isModalOpen && (\n        <GenericModal\n          title={\"Escalation\"}\n          content={\n            <EscalationModalTable\n              closeModal={closeModal}\n              dataToModal={dataToModal}\n            />\n          }\n          isOpen={isModalOpen}\n          onClose={closeModal}\n        />\n      )}\n      <h3>Escalations</h3>\n      <div\n      // style={{\n      //   height: \"fit-content\",\n      //   // display: \"flex\",\n      //   // justifyContent: \"center\",\n      // }}\n      >\n        {/* <CTable responsive bordered  style={tableStyle}>\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell style={{ ...thStyle, width: \"20%\" }}>\n                Sensor Groups\n              </CTableHeaderCell>\n              <CTableHeaderCell style={thStyle}>\n                Steps\n              </CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {FakeData.map((data, index) => {\n              return (\n                <CTableRow key={index}>\n                  <CTableDataCell\n                    onClick={() => {\n                      setIsIncludedExcludedOpen(true);\n                    }}\n                    style={sensorCellStyle}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"flex-start\",\n                        gap: \"10px\",\n                        alignItems: \"flex-start\",\n                        paddingTop: \"5px\",\n                      }}\n                    >\n                      <p style={{ fontSize: \"12px\" }}>{data.sensorGroup}</p>\n                      <CIcon icon={cilReportSlash} style={{ color: \"red\" }} />\n                    </div>\n                  </CTableDataCell>\n                  {data.steps.map((step, index) => {\n                    return (\n                      <CTableDataCell key={index} style={stepCellStyle}>\n                        <div\n                          onClick={() => {\n                            setIsModalOpen(true);\n                            setDataToModal({\n                              step: [...step],\n                              details: { ...data.details },\n                            });\n                          }}\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            gap: \"5px\",\n                          }}\n                        >\n                          <div>\n                            {step.map((single_step, index) => {\n                              return (\n                                <p\n                                  key={index}\n                                  style={{\n                                    backgroundColor: \"#7195f0\",\n                                    fontSize: \"10px\",\n                                    padding: \"2px\",\n                                  }}\n                                >\n                                  {single_step}\n                                </p>\n                              );\n                            })}\n                          </div>\n                          <div>\n                            <div>\n                              <p\n                                style={{\n                                  color: \"blue\",\n                                  fontSize: \"8px\",\n                                }}\n                              >\n                                {data.details.time}\n                              </p>\n                            </div>\n                            <div\n                              style={{\n                                display: \"flex\",\n                                gap: \"5px\",\n                              }}\n                            >\n                              <CIcon\n                                icon={cilClipboard}\n                                style={{ color: \"blue\" }}\n                              />\n                              <CIcon\n                                icon={cilReportSlash}\n                                style={{ color: \"red\" }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </CTableDataCell>\n                    );\n                  })}\n                </CTableRow>\n              );\n            })}\n          </CTableBody>\n\n        </CTable> */}\n        <CTable responsive bordered>\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell style={{ ...thStyle }}>\n                Sensor Groups\n              </CTableHeaderCell>\n              <CTableHeaderCell colSpan={7} style={thStyle} >Steps</CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {FakeData.map((data, index) => {\n              return (\n                <CTableRow key={index}>\n                  <CTableDataCell\n                    onClick={() => {\n                      setIsIncludedExcludedOpen(true);\n                    }}\n                    style={sensorCellStyle}\n                  >\n                    <div\n                      style={{\n                        display: \"flex\",\n                        justifyContent: \"space-around\",\n                        alignItems: \"flex-start\",\n                        paddingTop: \"5px\",\n                        width: \"200px\",\n                      }}\n                    >\n                      <p>{data.sensorGroup}</p>\n                      <CIcon icon={cilReportSlash} style={{ color: \"red\" }} />\n                    </div>\n                  </CTableDataCell>\n                  {data.steps.map((step, index) => {\n                    return (\n                      <CTableDataCell key={index} style={{ ...stepCellStyle, minWidth: \"250px\" }}>\n                        <div\n                          onClick={() => {\n                            setIsModalOpen(true);\n                            setDataToModal({\n                              step: [...step],\n                              details: { ...data.details },\n                            });\n                          }}\n                          style={{\n                            display: \"flex\",\n                            justifyContent: \"center\",\n                            gap: \"5px\",\n                          }}\n                        >\n                          <div>\n                            {step.map((single_step, index) => {\n                              return (\n                                <p\n                                  key={index}\n                                  style={{\n                                    backgroundColor: \"#7195f0\",\n                                    fontSize: \"15px\",\n                                    // padding: \"2px\",\n                                  }}\n                                >\n                                  {single_step}\n                                </p>\n                              );\n                            })}\n                          </div>\n                          <div>\n                            <div>\n                              <p\n                                style={{\n                                  color: \"blue\",\n                                  fontSize: \"12px\",\n                                }}\n                              >\n                                {data.details.time}\n                              </p>\n                            </div>\n                            <div\n                              style={{\n                                display: \"flex\",\n                                gap: \"5px\",\n                              }}\n                            >\n                              <CIcon\n                                icon={cilClipboard}\n                                style={{ color: \"blue\" }}\n                              />\n                              <CIcon\n                                icon={cilReportSlash}\n\n                                style={{ color: \"red\" }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </CTableDataCell>\n                    );\n                  }\n                  )}\n                </CTableRow>\n              );\n            }\n            )}\n          </CTableBody>\n\n        </CTable>\n      </div>\n    </>\n  );\n};\n\nexport default Escalations;\n","import { CButton, CCol, CFormInput, CFormLabel, CFormSelect, CFormTextarea, CRow } from \"@coreui/react\";\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { acknowledgeAlert } from \"src/hooks/useAlarms\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nconst AlarmTableModal = ({ data, closeModal , getalarms }) => {\n  // debugger\n  const [dataOfAlarm, setDataOfAlarm] = useState(data);\n  const { mutate: acknowledge } = useMutation(acknowledgeAlert);\n  const { setShowToast } = useGlobalInfo();\n  function AcknowledeAlert(id , comment , alertid) {\n    const payload ={\n      id : id,\n      comment : comment,\n      alertid : alertid,\n    }\n    acknowledge(payload, {\n      onSuccess: (response) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Acknowledged Successfully\",\n        }));\n        closeModal()\n        // setData(response.data);\n        // console.log(response.data)// Set response.data directly to the state\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n          color: \"#FF0000\",\n        }));\n        getalarms();\n        closeModal()\n        // Handle error if needed\n      },\n    });\n\n  }\n\n  //  debugger\n  const [comment, setComment] = useState(\"\");\n\n  const handleChangeAssignee = (e) => {\n    setDataOfAlarm({ ...dataOfAlarm, Assignee: e.target.value });\n  };\n\n  const handleSave = (e) => {\n    e.preventDefault();\n    AcknowledeAlert(dataOfAlarm.alertstatus.alertstatusid , comment , data.alertid)\n    // console.log(\"Data\" ,dataOfAlarm);\n\n  }\n  return (\n    <>\n      <div style={{ display: \"flex\", flexDirection: \"column\", justifyContent: \"space-evenly\", gap: \"30px\", marginTop: \"20px\" }}>\n\n        <CRow>\n          <CCol md={6}>\n            <CFormLabel htmlFor=\"deviceNumber\">Device Number</CFormLabel>\n            <CFormInput id=\"deviceNumber\" value={dataOfAlarm.sensors.devices.devicename} disabled />\n          </CCol>\n          {/* <CCol md={2}></CCol> */}\n          <CCol md={6}>\n            <CFormLabel htmlFor=\"type\">Type</CFormLabel>\n            <CFormInput id=\"type\" style={{ textOverflow: \"ellipsis\" }} value={dataOfAlarm.property} disabled />\n          </CCol>\n\n        </CRow>\n\n\n\n\n        <CRow>\n          <CCol md={6}>\n            <CFormLabel htmlFor=\"severity\">Severity</CFormLabel>\n            <CFormInput id=\"severity\" value={dataOfAlarm.alerttype} disabled />\n          </CCol>\n          <CCol md={6}>\n            <CFormLabel htmlFor=\"status\">Status</CFormLabel>\n            <CFormInput id=\"status\" value={dataOfAlarm.alertstatus.status} disabled />\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol md={12}>\n            <CCol md={12}>\n              <CFormLabel htmlFor=\"status\">Email</CFormLabel>\n              <CFormInput id=\"assignee\" value={dataOfAlarm.sensors.devices.email} disabled>\n              </CFormInput>\n            </CCol>\n          </CCol>\n        </CRow>\n        <CRow>\n          <CCol md={12}>\n            <CFormLabel htmlFor=\"time\">Time</CFormLabel>\n            <CFormInput id=\"time\" value={dataOfAlarm.timestamp} disabled />\n          </CCol>\n        </CRow>\n\n\n      </div>\n      {/* </div> */}\n      <div style={{ marginTop: \"20px\" }}>\n        <CFormLabel style={{ fontWeight: \"bold\" }} htmlFor=\"comment\">Comment</CFormLabel>\n        <CFormTextarea\n\n          style={{\n            border: \"1px solid #000\",\n            width: \"100%\",\n            outline: \"none\"\n          }}\n\n          id=\"comment\"\n          placeholder=\"Write Comment...\"\n          value={comment}\n          onChange={(e) => {\n            setComment(e.target.value);\n            setDataOfAlarm({ ...dataOfAlarm, comment: e.target.value });\n          }\n          }\n          rows={3}\n        />\n      </div>\n      <div\n        style={{\n          marginTop: \"20px\",\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          gap: \"30px\"\n        }}\n      >\n        <CButton\n          onClick={(e) => {\n            handleSave(e);\n          }}\n\n        >\n          Acknowledged\n        </CButton>\n        <CButton onClick={() => {\n          setDataOfAlarm(data);\n          setComment(\"\");\n        }}>\n          Clear\n        </CButton>\n      </div>\n    </>\n  );\n};\n\nAlarmTableModal.propTypes = {\n  data: PropTypes.any.isRequired,\n  closeModal: PropTypes.any.isRequired,\n  getalarms: PropTypes.any.isRequired,\n\n\n};\n\nexport default AlarmTableModal;\n","import React, { useState  , useEffect} from \"react\";\nimport { cilCut, cilMenu, cilReportSlash, cilWarning } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  CCard,\n  CFormInput,\n  CFormSelect,\n  CTable,\n  CTableBody,\n  CTableDataCell,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport AlarmTableModal from \"./AlarmTableModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { getAllAlarmManagement } from \"src/hooks/useAlarms\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nconst AlarmsTable = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast } = useGlobalInfo();\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  const { mutate: getAlarms } = useMutation(getAllAlarmManagement);\n\n\n  const [data, setData] = useState([]);\n  const [dataPass, setDataPass] = useState({});\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  function getAllAlarms(id) {\n    getAlarms(id, {\n      onSuccess: (response) => {\n        setData(response.data);\n        // console.log(response.data)// Set response.data directly to the state\n      },\n      onError: (error) => {\n        // Handle error if needed\n      },\n    });\n  }\n\n  const onAssigneeChange = (index,e) => {\n    let newData = [...data];\n    newData[index].Assignee = e.target.value;\n    setData(newData);\n  }\n  useEffect(()=>{\n    getAllAlarms(localStorage.getItem(\"OrganizationId\"));\n  },[])\n\n  return (\n    <>\n      {isModalOpen && (\n        <GenericModal\n          title=\"Alarm Details\"\n          content={<AlarmTableModal closeModal={() => setIsModalOpen(false)} data={dataPass} getalarms={getAllAlarms}/>}\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n\n        />\n      )}\n        <h3>Alarm Management</h3>\n\n      <CCard>\n      <CTable responsive  hover class=\"table-light custom-table\">\n        <CTableHead>\n        <CTableRow>\n          <CTableHeaderCell>Time</CTableHeaderCell>\n          <CTableHeaderCell>Device Number</CTableHeaderCell>\n          <CTableHeaderCell>Type</CTableHeaderCell>\n          <CTableHeaderCell>Severity</CTableHeaderCell>\n          <CTableHeaderCell>Email</CTableHeaderCell>\n          <CTableHeaderCell>Status</CTableHeaderCell>\n          <CTableHeaderCell>Details</CTableHeaderCell>\n        </CTableRow></CTableHead>\n        <CTableBody>\n          {data?.map((data, index) => {\n            // debugger\n            // console.log(\"Index\" , data)\n            return (\n              <CTableRow key={index}>\n                <CTableDataCell>{data?.timestamp}</CTableDataCell>\n                <CTableDataCell\n                  // style={{ fontWeight: \"bold\", fontSize: \"18px\" }}\n                >\n                  {data?.sensors?.devices?.devicename}-{data?.aws_id}\n                </CTableDataCell>\n                <CTableDataCell>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      gap: \"5px\",\n                    }}\n                  >\n                  {data.property}\n                  </div>\n                </CTableDataCell>\n                <CTableDataCell\n\n                >\n                 <div style={{display:\"flex\" ,justifyContent:\"space-between\" }}>\n                 <p\n                 style={{\n                  color:\n                    data?.alerttype === \"Critical\" ? \"red\" : \"darkgoldenrod\",\n                  // fontWeight: \"bolder\",\n                }}\n                 >\n                 {data?.alerttype}\n                 </p>\n                  {/* <CIcon\n                  style={{\n                    color:\n                      data?.alerttype === \"Critical\" ? \"red\" : \"darkgoldenrod\",\n                    fontWeight: \"bolder\",\n                  }}\n                    // icon={\n                    //   data?.alerttype === \"Critical\" ? cilWarning : cilReportSlash\n                    // }\n                  /> */}\n                 </div>\n                </CTableDataCell>\n                <CTableDataCell>\n                  {/* <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      gap: \"5px\",\n                    }}\n                  > */}\n                    {\" \"}\n                    <CFormInput\n                    className=\"w-20\"\n                    value={data?.sensors?.devices?.email}\n                     onChange={(e)=>{\n                     onAssigneeChange(index,e);\n                    }}\n                    disabled\n                    >\n                      {/* <option>{data?.sensors?.devices?.email}</option> */}\n                      {/* <option>{data?.sensors?.devices?.email==='Assigned'?'UnAssigned':'Assigned'}</option> */}\n                    </CFormInput>\n                  {/* </div> */}\n                </CTableDataCell>\n                <CTableDataCell>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      gap: \"5px\",\n                    }}\n                  >\n                    {/* {data?.Status.map((status, index) => ( */}\n                      <div\n                        // key={index}\n                        style={{\n                          // color: data.alertstatus_alerts_alertstatusidToalertstatus.status === \"Active\" ? \"green\" : \"orange\",\n                          // fontStyle: \"italic\",\n                          fontWeight: \"bold\",\n                        }}\n                      >\n                        {data.alertstatus.status} .\n                      </div>\n                    {/* ))} */}\n                  </div>\n                </CTableDataCell>\n                <CTableDataCell>\n                  <CIcon\n                    onClick={() => {\n                      setDataPass(data);\n                      setIsModalOpen(true);\n                    }}\n                    icon={cilMenu}\n                    style={{ color: \"blue\" }}\n                  />\n                </CTableDataCell>\n              </CTableRow>\n            );\n          })}\n        </CTableBody>\n      </CTable>\n      </CCard>\n\n    </>\n  );\n};\n\nexport default AlarmsTable;\n","import React, { Suspense } from \"react\";\nimport { Navigate, Route, Routes } from \"react-router-dom\";\nimport * as constant from \"../constants/permissionContant\";\nimport { CContainer, CSpinner } from \"@coreui/react\";\n\n// routes config\nimport routes from \"../routes\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport GlobalLoader from \"./global-loader/GlobalLoader\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport CustomRoute from \"src/constants/CustomRoute\";\nimport Dashboard from \"src/views/dashboard/Dashboard\";\nimport Organization from \"src/views/pages/admin/organization/Organization\";\nimport Facilities from \"src/views/pages/admin/facilities/Facilities\";\nimport Department from \"src/views/pages/admin/department/Department\";\nimport Devices from \"src/views/pages/admin/devices/Devices\";\nimport FacilitiesStaff from \"src/views/pages/Staff/Facility/FacilitySatff\";\nimport DepartmentStaff from \"src/views/pages/Staff/Department/DepartmentStaff\";\nimport DevicesStaff from \"src/views/pages/Staff/Devices/DevicesStaff\";\nimport Gateway from \"src/views/pages/admin/gateway/Gateway\";\nimport NotificationSetup from \"src/views/pages/alerts/notification-setup/Notification-Setup\";\nimport OrganizationSensor from \"src/views/pages/sensors/organization-sensors/OrganizationSensor\";\nimport DevicesSensors from \"src/views/pages/sensors/devices-sensors/DevicesSensors\";\nimport GraphPage from \"src/views/dashboard/Components/GraphPage\";\nimport Users from \"src/views/pages/Staff/Users/user\";\nimport AlarmSuppression from \"src/views/pages/alerts/alarmSuppression/AlramSuppression\";\nimport Escalations from \"src/views/pages/alerts/escalations/Escalations\";\nimport AlarmsTable from \"src/views/pages/alerts/alarms-management/AlarmsTable\";\nconst AppContent = () => {\n  const { isLoading } = useLoader();\n  // const { loading, setLoading } = useGlobalInfo()\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      {isLoading ? (\n        <GlobalLoader />\n      ) : (\n        <CContainer\n          id=\"table_container\"\n          className={`table_container_light ${\n            darkMode ? \"table_container_dark\" : \"\"\n          }`}\n          style={{ maxWidth: \"unset\" }}\n          lg\n        >\n          <Suspense fallback={<CSpinner color=\"primary\" />}>\n            <Routes>\n              {routes.map((route, idx) => {\n                return (\n                  route.element && (\n                    <Route\n                      key={idx}\n                      path={route.path}\n                      exact={route.exact}\n                      name={route.name}\n                      element={<route.element />}\n                    />\n                  )\n                );\n              })}\n              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\n              <Route\n                path=\"/dashboard\"\n                element={\n                  <CustomRoute\n                    component={Dashboard}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/organizations\"\n                element={\n                  <CustomRoute\n                    component={Organization}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/department\"\n                element={\n                  <CustomRoute\n                    component={Department}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/facilities\"\n                element={\n                  <CustomRoute\n                    component={Facilities}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/devices\"\n                element={\n                  <CustomRoute\n                    component={Devices}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/Facilities-staff\"\n                element={\n                  <CustomRoute\n                    component={FacilitiesStaff}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/Devices-staff\"\n                element={\n                  <CustomRoute\n                    component={DevicesStaff}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/Department-staff\"\n                element={\n                  <CustomRoute\n                    component={DepartmentStaff}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/organization-sensors\"\n                element={\n                  <CustomRoute\n                    component={OrganizationSensor}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/devices-sensors\"\n                element={\n                  <CustomRoute\n                    component={DevicesSensors}\n                    pageAccess={constant._sensor}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/gateway\"\n                element={\n                  <CustomRoute\n                    component={Gateway}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/notification-alerts\"\n                element={\n                  <CustomRoute\n                    component={NotificationSetup}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/users\"\n                element={\n                  <CustomRoute\n                    component={Users}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/sensor/graph\"\n                element={\n                  <CustomRoute\n                    component={GraphPage}\n                    pageAccess={constant._sensor}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/alarm-suppression\"\n                element={\n                  <CustomRoute\n                    component={AlarmSuppression}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n\n                }\n              />\n               <Route\n                path=\"/escalations\"\n                element={\n                  <CustomRoute\n                    component={Escalations}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n\n                }\n              />\n               <Route\n                path=\"/alarm-management\"\n                element={\n                  <CustomRoute\n                    component={AlarmsTable}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n\n                }\n              />\n            </Routes>\n          </Suspense>\n        </CContainer>\n      )}\n    </>\n  );\n};\n\nexport default React.memo(AppContent);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CAvatar,\n  CBadge,\n  CDropdown,\n  CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n} from \"@coreui/react\";\nimport {\n  cilBell,\n  cilCreditCard,\n  cilCommentSquare,\n  cilEnvelopeOpen,\n  cilFile,\n  cilLockLocked,\n  cilSettings,\n  cilTask,\n  cilUser,\n} from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  _device,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport avatar8 from \"./../../assets/images/avatars/8.jpg\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst AppHeaderDropdown = ({ ModalOpen, uploadedImageUrl }) => {\n  function logoutHandler() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"OrganizationId\");\n    localStorage.removeItem(\"facilityId\");\n    localStorage.removeItem(\"departmentId\");\n    localStorage.removeItem(\"permissions\");\n    localStorage.removeItem(\"organizationLogo\");\n    localStorage.removeItem(\"organizationName\");\n    localStorage.removeItem(\"organizationid\");\n    // localStorage.removeItem(\"organizationLogo\");\n\n    navigate(\"/login\");\n  }\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const organizationLogoUrl = localStorage.getItem(\"organizationLogo\");\n  const navigate = useNavigate();\n  const OpenModal = () => {\n    ModalOpen();\n  };\n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n        {(uploadedImageUrl && <CAvatar src={uploadedImageUrl} size=\"md\" />) ||\n          (organizationLogoUrl && organizationLogoUrl !== \"undefined\" && (\n            <CAvatar src={organizationLogoUrl} size=\"md\" />\n          )) || <CAvatar src={avatar8} size=\"md\" />}\n      </CDropdownToggle>\n      <CDropdownMenu\n        className={` pt-0 ${darkMode ? \"dropdown-dark\" : \"\"}`}\n        placement=\"bottom-end\"\n      >\n        {/* <CDropdownHeader className=\"bg-light fw-semibold py-2\">Account</CDropdownHeader> */}\n        {/* <CDropdownItem href=\"#\">\n          <CIcon icon={cilBell} className=\"me-2\" />\n          Updates\n          <CBadge color=\"info\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilEnvelopeOpen} className=\"me-2\" />\n          Messages\n          <CBadge color=\"success\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilTask} className=\"me-2\" />\n          Tasks\n          <CBadge color=\"danger\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCommentSquare} className=\"me-2\" />\n          Comments\n          <CBadge color=\"warning\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Settings</CDropdownHeader>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilUser} className=\"me-2\" />\n          Profile\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCreditCard} className=\"me-2\" />\n          Payments\n          <CBadge color=\"secondary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilFile} className=\"me-2\" />\n          Projects\n          <CBadge color=\"primary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem> */}\n        {/* <CDropdownDivider /> */}\n        {/* <CDropdownItem href=\"/login\" onClick={logoutHandler}>\n        <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n          <br></br>\n          <CIcon icon={cilLockLocked} className=\"me-2\" />\n          Sign Out\n        </CDropdownItem> */}\n        <CDropdownItem>\n        {facilityPermission && !organizationPermission && (\n    <div onClick={OpenModal}>\n      <CIcon\n        icon={cilSettings}\n        className=\"me-2\"\n        style={{ fontSize: \"30px\", color: \"black\" }}\n      />\n      <span style={{ fontSize: \"20px\", color: \"black\" }}>Settings</span>\n    </div>\n  )}\n          {/* <br /> */}\n          <div onClick={logoutHandler}>\n            <CIcon\n              icon={cilLockLocked}\n              className=\"me-2\"\n              style={{ fontSize: \"30px\", color: \"black\" }}\n            />\n            <span style={{ fontSize: \"20px\", color: \"black\" }}>Sign Out</span>\n          </div>\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  );\n};\n\nexport default AppHeaderDropdown;\nAppHeaderDropdown.propTypes = {\n  ModalOpen: PropTypes.func.isRequired,\n  uploadedImageUrl: PropTypes.string,\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllRolesData } from \"src/hooks/useUsers\";\nimport { useMutation } from \"react-query\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst Settings = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const { mutate: Roles } = useMutation(getAllRolesData);\n  const [UserData, setUserdata] = useState([]);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    organizationName: localStorage.getItem('organizationName'),\n    file: null,\n  });\n  useEffect(() => {\n    //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        address: data.address,\n        phonenumber: data.phonenumber,\n        roleid: data.roleid,\n      }));\n    }\n  }, [data]);\n  const handleFileChange = (e) => {\n    const file = e.target.files[0] || null;\n    setFormData({\n      ...formData,\n      file: file,\n    });\n  };\n//   const handleInputChange = (e) => {\n//     const { name, type, checked, files } = e.target;\n//     const parsedValue = name === 'roleid' ? parseInt(value, 10) : value;\n  \n//     // If the input is a file input, update the file property in formData\n//     if (type === 'file') {\n//       setFormData({\n//         ...formData,\n//         file: files[0] || null, // Use null if no file is selected\n//       });\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [name]: type === 'checkbox' ? checked : parsedValue,\n//       });\n//     }\n//   };\n  \n  \n\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    // if (form.checkValidity() === false) {\n    //   event.stopPropagation();\n    // }\n\n    // setValidated(true);\n\n    // Handle form submission here\n    // if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n    //   console.log(formData);\n      closeModal();\n    // }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  \n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n    \n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n         Upload Logo\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"file\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"file\"\n            // value={formData.file}\n            onChange={handleFileChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n     \n      {/*  Email */}\n    \n      {/* Address */}\n    \n      {/* Phone Number */}\n     \n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n         Upload\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nSettings.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      roleid: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default Settings;\n","// /* eslint-disable prettier/prettier */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavItem,\n  CFormSelect,\n  CButton,\n  CFormInput,\n  CForm,\n  CFormLabel,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useLocation } from \"react-router-dom\";\nimport { cilMenu } from \"@coreui/icons\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { AppHeaderDropdown } from \"./header/index\";\nimport { logo } from \"src/assets/brand/logo\";\nimport { useMutation } from \"react-query\";\nimport {\n  getDepartmentsData,\n  getFacilitiesData,\n  getOrganizationData,\n  getAllDepByOrgId,\n  LogoUpload,\n  LogoUploadPatch,\n} from \"src/hooks/useAuth\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport useStore from \"src/store/state\";\nimport useDataStore from \"src/store/state\";\nimport {\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  _device,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport Sitelogo from \"./../assets/images/avatars/Logo-removebg-preview.png\";\nimport Settings from \"src/views/forms/settings-form/Settings\";\n\nconst AppHeader = () => {\n  const location = useLocation();\n  const addData = useDataStore((state) => state.addData);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const { setDepartmentId } = useGlobalInfo();\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const dispatched = useDispatch();\n  const [organizationData, setOrganizationData] = useState([]);\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const mail = localStorage.getItem(\"email\");\n  let role = \"\";\n  if (organizationPermission) {\n    role = \"SuperAdmin\";\n  } else if (facilityPermission) {\n    role = \"Organization Admin\";\n  } else if (departmentPermission) {\n    role = \"Facility Admin\";\n  } else if (devicePermission) {\n    role = \"Department Admin\";\n  }\n  const {\n    facilityData,\n    setFacilityData,\n    departmentsData,\n    setDepartmentsData,\n    devicesData,\n\n    setDevicesData,\n  } = useGlobalInfo();\n  const handleOrganizationChange = (event) => {\n    setDepartmentId(\"\");\n    localStorage.removeItem(\"facilityId\");\n    localStorage.removeItem(\"departmentId\");\n\n    const selectedId = event.target.value;\n    setFacilityData([]);\n    setDepartmentsData([]);\n    localStorage.setItem(\"OrganizationId\", selectedId);\n    // Check if the selected value is \"Select Organization\"\n    if (selectedId !== \"Select Organization\") {\n      facilitiesDataFetch(selectedId);\n      departmentsDataByOrg(selectedId);\n      devicesDataFetchOrg(selectedId);\n    } else {\n      // If selected value is \"Select Organization\", you may want to handle this case\n      // For example, clear the organization-specific data or perform other actions\n    }\n  };\n\n  const handleFacilityChange = (event) => {\n    const selectedId = event.target.value;\n    localStorage.setItem(\"facilityId\", selectedId);\n    localStorage.removeItem(\"departmentId\");\n    setDepartmentsData([]);\n\n    // Check if the selected value is \"Select Facility\"\n    if (selectedId !== \"Select Facility\") {\n      departmentsDataFetch(selectedId);\n      devicesDataFetchFac(selectedId);\n    } else {\n      // If selected value is \"Select Facility\", you may want to handle this case\n      // For example, clear the facility-specific data or perform other actions\n    }\n  };\n\n  const handleDepartmentChange = (event) => {\n    const selectedId = event.target.value;\n\n    if (selectedId !== \"Select Department\") {\n      devicesDataFetch(selectedId);\n    }\n\n    localStorage.setItem(\"departmentId\", selectedId);\n    setDepartmentId(selectedId);\n  };\n\n  const sidebarShow = useSelector((state) => state.sidebarShow);\n  const { mutate: getOrganization } = useMutation(getOrganizationData);\n  function organizationDataFetch() {\n    getOrganization(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setOrganizationData(data);\n        addData(data.data);\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        hideLoader();\n      },\n    });\n  }\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    showLoader();\n    getFacilities(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevices } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    showLoader();\n    getDevices(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrg } = useMutation(getAllDevicesByOrgId);\n  function devicesDataFetchOrg(selectedId) {\n    showLoader();\n    getDevicesByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFac } = useMutation(getAllDevicesByFacId);\n  function devicesDataFetchFac(selectedId) {\n    showLoader();\n    getDevicesByFac(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function getAllDepartments() {\n    // //debugger\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        // //debugger\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    showLoader();\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDepartmentsByOrg } = useMutation(getAllDepByOrgId);\n  function departmentsDataByOrg(selectedId) {\n    showLoader();\n    getDepartmentsByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(null);\n  const logoUrl = localStorage.getItem(\"organizationLogo\");\n  const { mutate: uploadLogo } = useMutation(LogoUpload);\n  function LogoPost(selectedId) {\n    // debugger\n    showLoader();\n    uploadLogo(selectedId, {\n      onSuccess: (data) => {\n        // debugger\n        hideLoader();\n        setUploadedImageUrl(data);\n        if (logoUrl && logoUrl !== \"undefined\") {\n          LogoPostUpdate(data); // Replace 'someData' with the actual data you want to pass\n        }\n        // console.log(data)\n      },\n      onError: (error) => {\n        // debugger\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: uploadLogoPost } = useMutation(LogoUploadPatch);\n  function LogoPostUpdate(selectedId) {\n    // debugger\n    showLoader();\n    uploadLogoPost(selectedId, {\n      onSuccess: (data) => {\n        // debugger\n        hideLoader();\n        setUploadedImageUrl(data.data.logo);\n        console.log(data);\n      },\n      onError: (error) => {\n        // debugger\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    // debugger\n    // console.log(userPermissions)\n    showLoader();\n    if (organizationPermission) {\n      organizationDataFetch();\n      if (\n        localStorage.getItem(\"OrganizationId\") !== undefined ||\n        localStorage.getItem(\"OrganizationId\") !== null\n      ) {\n        facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n      }\n      if (\n        localStorage.getItem(\"facilityId\") !== undefined ||\n        localStorage.getItem(\"facilityId\") !== null\n      ) {\n        departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n      }\n    } else if (facilityPermission) {\n      getAllFacilities();\n      if (\n        localStorage.getItem(\"facilityId\") !== undefined ||\n        localStorage.getItem(\"facilityId\") !== null\n      ) {\n        departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n      }\n    } else if (departmentPermission) {\n      // // //debugger\n      getAllDepartments();\n    } else {\n      hideLoader();\n    }\n  }, []);\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const shouldShowOrganizationDropdown = () => {\n    const pathsToHideOrganizationDropdown = [\"/organizations\"];\n    return !pathsToHideOrganizationDropdown.includes(location.pathname);\n  };\n  const shouldShowFacilityDropdown = () => {\n    const pathsToHideFacilityDropdown = [\n      \"/gateway\",\n      \"/organization-sensors\",\n      \"/Facilities\",\n      \"/organizations\",\n      \"/notification-alerts\",\n      \"/dashboard\",\n      \"/sensor/graph\",\n      \"/users\",\n    ];\n    return !pathsToHideFacilityDropdown.includes(location.pathname);\n  };\n\n  const shouldShowDepartmentDropdown = () => {\n    const pathsToHideDepartmentDropdown = [\n      \"/gateway\",\n      \"/organization-sensors\",\n      \"/Facilities-staff\",\n      \"/Facilities\",\n      \"/department\",\n      \"/organizations\",\n      \"/notification-alerts\",\n      \"/dashboard\",\n      \"/sensor/graph\",\n      \"/users\",\n    ];\n    return !pathsToHideDepartmentDropdown.includes(location.pathname);\n  };\n  function saveHandler(handler) {\n    debugger;\n    LogoPost(handler);\n  }\n  // function saveHandler(handler) {\n  //   const logoUrl = localStorage.getItem('organizationLogo');\n\n  //   if (logoUrl && logoUrl !== 'undefined') {\n  //     // If logoUrl is defined and not 'undefined', call LogoPostUpdate\n  //     LogoPostUpdate(handler);\n  //   } else {\n  //     // Otherwise, call LogoPost\n  //     LogoPost(handler);\n  //   }\n  // }\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const ModalOpen = () => {\n    setIsModalOpen(true);\n  };\n  return (\n    <CHeader\n      className={`mb-4 ${darkMode ? \"header-dark\" : \"\"}`}\n      position=\"sticky\"\n    >\n      <GenericModal\n        title={\"Settings\"}\n        content={\n          <Settings\n            closeModal={closeModal}\n            saveHandler={saveHandler}\n            openModal={setIsModalOpen}\n          />\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatched({ type: \"set\", sidebarShow: !sidebarShow })}\n        >\n          <CIcon\n            className={`  ${darkMode ? \"icon-dark\" : \"\"}`}\n            icon={cilMenu}\n            size=\"lg\"\n          />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"ml-3 mr-4\" to=\"/\">\n          <a href=\"#\">\n            <img\n              src={Sitelogo}\n              alt=\"Logo\"\n              style={{\n                width: \"105px\",\n                height: \"62px\",\n                backgroundColor: \"transparent\",\n              }}\n            />\n          </a>\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto gap-4\">\n          {organizationPermission && shouldShowOrganizationDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Organization\"\n                onChange={handleOrganizationChange}\n                value={localStorage.getItem(\"OrganizationId\")}\n              >\n                <option>Select Organization</option>\n                {organizationData?.data?.map((item) => {\n                  return (\n                    <option key={item.customerid} value={item.customerid}>\n                      {item.customername}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          {facilityPermission && shouldShowFacilityDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Facility\"\n                onChange={handleFacilityChange}\n                value={localStorage.getItem(\"facilityId\")}\n              >\n                <option>Select Facility</option>\n                {facilityData?.map((item) => {\n                  return (\n                    <option key={item.facilityid} value={item.facilityid}>\n                      {item.name}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          {departmentPermission && shouldShowDepartmentDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Department\"\n                onChange={handleDepartmentChange}\n                value={localStorage.getItem(\"departmentId\")}\n              >\n                <option>Select Department</option>\n                {departmentsData?.map((item) => {\n                  return (\n                    <option key={item.departmentid} value={item.departmentid}>\n                      {item.departmentname}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          <CNavItem>\n            <CButton\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              onClick={toggleDarkMode}\n            >\n              Change Mode\n            </CButton>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav style={{ display: \"block\" }}>\n          <h5\n            className={`m-0 ${darkMode ? \"heading-dark01\" : \"heading-light01\"}`}\n          >\n            {role}\n          </h5>\n          <p\n            className={`m-0 ${darkMode ? \"heading-dark01\" : \"heading-light01\"}`}\n          >\n            {mail}\n          </p>\n          {/* <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\n            </CNavLink>\n          </CNavItem> */}\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown\n            closeModal={closeModal}\n            ModalOpen={ModalOpen}\n            uploadedImageUrl={uploadedImageUrl}\n          />\n        </CHeaderNav>\n      </CContainer>\n    </CHeader>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, to, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        idx={String(index)}\n        key={index}\n        toggler={navLink(name, icon)}\n        visible={location.pathname.startsWith(to)}\n        {...rest}\n      >\n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index),\n        )}\n      </Component>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CNavGroup, CNavItem } from \"@coreui/react\";\nimport {\n  cilAudio,\n  cilAudioSpectrum,\n  cilBarChart,\n  cilBuilding,\n  cilCast,\n  cilDevices,\n  cilLibraryBuilding,\n  cilListFilter,\n  cilPeople,\n  cilBell,\n  cibMinutemailer,\n  cilGraph,\n  cilBellExclamation,\n  cilChartLine,\n  cilUserFollow\n} from \"@coreui/icons\";\n\n// Import your permissions and constants here\nimport {\n  hasPermissionToAction,\n  _view,\n  _user,\n  _organization,\n  _facility,\n  _department,\n  _device,\n  _sensor,\n  // _logo,\n} from \"./constants/permissionContant\";\nimport { useGlobalInfo } from \"./global-context/GlobalContext\";\n\nconst userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n\nconst _nav = [\n  {\n    component: CNavItem,\n    name: \"Dashboard\",\n    to: \"/dashboard\",\n    icon: <CIcon icon={cilBarChart} customClassName=\"nav-icon\" />,\n    permissions: [`${_device}_${_view}`], // Example permission for viewing the dashboard\n  },\n  {\n    component: CNavGroup,\n    name: \"Admin\",\n    icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: \"Organizations\",\n        to: \"/organizations\",\n        icon: (\n          <CIcon icon={cilLibraryBuilding} customClassName=\"nav-icon ps-4\" />\n        ),\n        permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Facilities\",\n        to: \"/Facilities\",\n        icon: <CIcon icon={cilPeople} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_facility}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Department\",\n        to: \"/department\",\n        icon: <CIcon icon={cilBuilding} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_department}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Equipments\",\n        to: \"/devices\",\n        icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_device}_${_view}`],\n      },\n    ],\n  },\n  // {\n  //   component: CNavGroup,\n  //   name: 'Staff',\n  //   icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n  //   items: [\n  //     {\n  //       component: CNavItem,\n  //       name: 'Facility Staff',\n  //       to: '/Facilities-staff',\n  //       icon: <CIcon icon={cilPeople} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_facility}_${_view}`],\n  //     },\n  //     {\n  //       component: CNavItem,\n  //       name: 'Department Staff',\n  //       to: '/Department-staff',\n  //       icon: <CIcon icon={cilBuilding} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_department}_${_view}`],\n  //     },\n  //     {\n  //       component: CNavItem,\n  //       name: 'Equipment Staff',\n  //       to: '/Devices-staff',\n  //       icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_device}_${_view}`],\n  //     },\n  //     // {\n  //     //   component: CNavItem,\n  //     //   name: 'Users',\n  //     //   to: '/users',\n  //     //   icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n  //     //   permissions: [`${_organization}_${_view}`],\n  //     // },\n  //   ],\n  // },\n  {\n    component: CNavItem,\n    name: \"Users\",\n    to: \"/users\",\n    icon: <CIcon icon={cilUserFollow} customClassName=\"nav-icon\" />,\n    permissions: [`${_facility}_${_view}`],\n  },\n  {\n    component: CNavGroup,\n    name: \"Sensor Setup\",\n    icon: <CIcon icon={cilAudio} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: \"Organization Sensors\",\n        to: \"/organization-sensors\",\n        icon: <CIcon icon={cilAudioSpectrum} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Equipment Sensors\",\n        to: \"/devices-sensors\",\n        icon: <CIcon icon={cilCast} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_sensor}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"GateWays\",\n        to: \"/gateway\",\n        icon: <CIcon icon={cilCast} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_organization}_${_view}`],\n      },\n    ],\n  },\n  {\n    component: CNavGroup,\n    name: \"Alerts\",\n    icon: <CIcon icon={cilListFilter} customClassName=\"nav-icon\" />,\n    permissions: [`${_organization}_${_view}`],\n    items: [\n      {\n        component: CNavItem,\n        name: \"Alarm Recipients\",\n        to: \"/notification-alerts\",\n        icon: <CIcon icon={cilAudioSpectrum} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Alarm Thresholds\",\n        to: \"/alarm-thresholds\",\n        icon: <CIcon icon={cilBell} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Alarm Management\",\n        to: \"/alarm-management\",\n        icon: <CIcon icon={cibMinutemailer} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n\n      {\n        component: CNavItem,\n        name: \"Escalations\",\n        to: \"/escalations\",\n        icon: <CIcon icon={cilChartLine} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Alarm Suppression\",\n        to: \"/alarm-suppression\",\n        icon: <CIcon icon={cilBellExclamation} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n    ],\n  },\n];\n\n// Filter the items based on the user's permissions\n// const filteredNav = _nav\n//   .map((item) => {\n//     if (!item.permissions || hasPermissionToAction(userPermissions, ...item.permissions)) {\n//       if (item.items) {\n//         item.items = item.items.filter(\n//           (subItem) =>\n//             !subItem.permissions || hasPermissionToAction(userPermissions, ...subItem.permissions),\n//         )\n//       }\n//       return item\n//     }\n//     return null\n//   })\n//   .filter(Boolean) // Remove null items\n\n// export default filteredNav\nconst FilteredNav = () => {\n  const [userPermissions, setUserPermissions] = useState([]);\n  const [filteredNav, setFilteredNav] = useState([]);\n\n  useEffect(() => {\n    // Parse permissions once when the component mounts\n    const storedPermissions =\n      JSON.parse(localStorage.getItem(\"permissions\")) || [];\n    setUserPermissions(storedPermissions);\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  // Memoize the filtered navigation array\n  const memoizedFilteredNav = useMemo(() => {\n    return _nav\n      .map((item) => {\n        if (\n          !item.permissions ||\n          hasPermissionToAction(userPermissions, ...item.permissions)\n        ) {\n          if (item.items) {\n            const newItems = item.items.filter(\n              (subItem) =>\n                !subItem.permissions ||\n                hasPermissionToAction(userPermissions, ...subItem.permissions)\n            );\n            return { ...item, items: newItems };\n          }\n          return item;\n        }\n        return null;\n      })\n      .filter(Boolean);\n  }, [userPermissions, _nav]);\n\n  // Update state only when the filtered navigation changes\n  useEffect(() => {\n    setFilteredNav(memoizedFilteredNav);\n  }, [memoizedFilteredNav]);\n\n  return filteredNav;\n};\n\nexport default FilteredNav;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { CSidebar, CSidebarBrand, CSidebarNav } from \"@coreui/react\";\n\nimport { AppSidebarNav } from \"./AppSidebarNav\";\n\nimport SimpleBar from \"simplebar-react\";\nimport \"simplebar/dist/simplebar.min.css\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\n// sidebar nav config\n// import filteredNav from \"../_nav\";\nimport FilteredNav from \"src/_nav\";\nimport { useMutation } from \"react-query\";\nimport { generalPermissions } from \"src/hooks/useAuth\";\nimport logo from \"./../assets/images/avatars/Logo-removebg-preview.png\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\n// const AppSidebar = () => {\n//   const dispatch = useDispatch();\n//   const unfoldable = useSelector((state) => state.sidebarUnfoldable);\n//   const sidebarShow = useSelector((state) => state.sidebarShow);\n//   const { darkMode, setDarkMode } = useGlobalInfo();\n//   const { mutate: permissions } = useMutation(generalPermissions);\n//   useEffect(() => {\n//     permissions(\"\", {\n//       onSuccess: (data) => {\n//         debugger\n//         localStorage.setItem(\"permissions\", JSON.stringify(data.permissions));\n//       },\n//       onError: (error) => {\n//         console.log(error);\n//       },\n//     });\n//   }, []);\n//   const filteredNav = FilteredNav();\n//   return (\n//     <CSidebar\n//       position=\"fixed\"\n//       unfoldable={unfoldable}\n//       visible={sidebarShow}\n//       onVisibleChange={(visible) => {\n//         dispatch({ type: \"set\", sidebarShow: visible });\n//       }}\n//       className={`sidebar-light ${darkMode ? \"sidebar-dark\" : \"\"}`}\n//     >\n//       <CSidebarBrand\n//         className={`d-none d-md-flex sidebar-light ${\n//           darkMode ? \"sidebar-dark\" : \"\"\n//         }`}\n//         to=\"/\"\n//       >\n//         {/* <CIcon className=\"sidebar-brand-full\" icon={logoNegative} height={35} />\n//         <CIcon className=\"sidebar-brand-narrow\" icon={sygnet} height={35} /> */}\n//         {/* <a\n//           href=\"#\"\n//           style={{\n//             color: \"#ffffff\",\n//             margin: \"0\",\n//             padding: \"15px 0\",\n//             textDecoration: \"none\",\n//             fontSize: \"30px\",\n//           }}\n//         >\n//           <img\n//             src={logo}\n//             alt=\"Logo\"\n//             style={{\n//               width: \"105px\",\n//               height: \"62px\",\n//               backgroundColor: \"transparent\",\n//             }}\n//           />\n//         </a> */}\n//       </CSidebarBrand>\n//       <CSidebarNav>\n//         <SimpleBar>\n//           <AppSidebarNav items={filteredNav} />\n//         </SimpleBar>\n//       </CSidebarNav>\n//       {/* <CSidebarToggler\n//         className=\"d-none d-lg-flex\"\n//         onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n//       /> */}\n//     </CSidebar>\n//   );\n// };\nconst AppSidebar = () => {\n  const dispatch = useDispatch();\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable);\n  const sidebarShow = useSelector((state) => state.sidebarShow);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: permissions } = useMutation(generalPermissions);\n  const filteredNav = FilteredNav();\n\n  useEffect(() => {\n    permissions(\"\", {\n      onSuccess: (data) => {\n        localStorage.setItem(\"permissions\", JSON.stringify(data.permissions));\n      },\n      onError: (error) => {\n        console.log(error);\n      },\n    });\n  }, []);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  \n\n  // Use the FilteredNav component to get the filtered navigation items\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: \"set\", sidebarShow: visible });\n      }}\n      className={`sidebar-light ${darkMode ? \"sidebar-dark\" : \"\"}`}\n    >\n      <CSidebarBrand\n        className={`d-none d-md-flex sidebar-light ${\n          darkMode ? \"sidebar-dark\" : \"\"\n        }`}\n        to=\"/\"\n      >\n    <div style={{ fontSize: \"25px\" }}>\n    {facilityPermission && !organizationPermission && (\n  <span>\n    {localStorage.getItem(\"organizationName\")}\n  </span>\n)}\n\n</div>\n        {/* Your existing CSidebarBrand content... */}\n      </CSidebarBrand>\n      <CSidebarNav>\n        <SimpleBar>\n          {/* Use the filteredNav instead of importing it directly */}\n          <AppSidebarNav items={filteredNav} />\n        </SimpleBar>\n      </CSidebarNav>\n      {/* Your existing CSidebarToggler... */}\n    </CSidebar>\n  );\n};\n\n// export default React.memo(AppSidebar);\n\nexport default React.memo(AppSidebar);\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CNav, CNavItem, CNavLink, CTabContent, CTabPane } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilCode, cilMediaPlay } from '@coreui/icons'\n\nconst DocsExample = (props) => {\n  const { children, href } = props\n\n  const _href = `https://coreui.io/react/docs/${href}`\n\n  return (\n    <div className=\"example\">\n      <CNav variant=\"tabs\">\n        <CNavItem>\n          <CNavLink href=\"#\" active>\n            <CIcon icon={cilMediaPlay} className=\"me-2\" />\n            Preview\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink href={_href} target=\"_blank\">\n            <CIcon icon={cilCode} className=\"me-2\" />\n            Code\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      <CTabContent className=\"rounded-bottom\">\n        <CTabPane className=\"p-3 preview\" visible>\n          {children}\n        </CTabPane>\n      </CTabContent>\n    </div>\n  )\n}\n\nDocsExample.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string,\n}\n\nexport default React.memo(DocsExample)\n","/* eslint-disable react/prop-types */\nimport { CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React from 'react'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nexport const GenericModal = ({ title, content, onClose, isOpen }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo()\n\n  return (\n    <CModal visible={isOpen} onClose={onClose}>\n      <CModalHeader closeButton className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n        <CModalTitle id={`${darkMode ? 'heading-dark' : ''}`}>{title}</CModalTitle>\n      </CModalHeader>\n      <CModalBody className={`modal-light pt-0 ${darkMode ? 'modal-dark' : ''}`}>\n        {content}\n      </CModalBody>\n      {/* <CModalFooter>\n        <CButton\n          color=\"primary\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Add Organization\n        </CButton>\n        <CButton\n          color=\"secondary\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Close\n        </CButton>\n      </CModalFooter> */}\n    </CModal>\n  )\n}\n","// export const BASE_URL = \"https://fluttering-company-production.up.railway.app/\";\n// export const BASE_URL = \"http://192.168.18.53:3001/\";\n// export const BASE_URL = \"http://192.168.100.14:3001/\";\n\nexport const BASE_URL =\n  \"http://ec2-13-233-60-110.ap-south-1.compute.amazonaws.com:8000/\";\n// export const BASE_URL = \"http://3.27.159.97:5000/\";\n// export const BASE_URL = \"http://192.168.18.53:3000/\";\n","export const _create = 'create'\nexport const _view = 'view'\nexport const _delete = 'delete'\nexport const _update = 'update'\n\n// Constants\n\nexport const _user = 'user'\nexport const _roles = 'roles'\nexport const _organization = 'organization'\nexport const _facility = 'facility'\nexport const _department = 'department'\nexport const _device = 'device'\nexport const _sensor = 'sensor'\nexport const _logo = 'logo'\n\n\nexport const hasPermissionToActionAccess = (permissionList, pageAccess, pageAction) => {\n  let hasAccess = false\n  hasAccess = permissionList?.includes(`${pageAccess}_${pageAction}`)\n  return hasAccess\n}\n\nexport const hasPermissionToAction = (permissionList, pageData) => {\n  let hasAccess = false\n  hasAccess = permissionList?.includes(`${pageData}`)\n  return hasAccess\n}\n","import { setAuthToken } from './axios'\n// Function to set the authentication token\nconst setAuthenticationToken = (token) => {\n  setAuthToken(token)\n}\n\nexport { setAuthenticationToken }\n","import axios from 'axios'\nimport { BASE_URL } from 'src/constants/constants'\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL, // Replace with your API's base URL\n  timeout: 50000, // Set a timeout (in milliseconds) for requests\n  headers: {\n    'Content-Type': 'application/json',\n    // You can add other default headers here\n  },\n})\n\nconst setAuthToken = (token) => {\n  if (token) {\n    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`\n  } else {\n    delete axiosInstance.defaults.headers.common['Authorization']\n  }\n}\n\nexport { axiosInstance, setAuthToken }\n","import { useQuery } from 'react-query'\nimport { setAuthenticationToken } from './auth'\nimport { axiosInstance } from './axios'\n\nexport const getAllSensorsThreshHolds = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-alert-threshold/${id}`);\n  return data;\n};\n\nexport const updateSensorsThreshHolds = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/update-alert-threshold`,\n    payload\n  );\n  return data;\n};\n\nexport const getAllAlarmManagement = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-alert-notification/${id}`);\n  return data;\n};\n\nexport const acknowledgeAlert = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `alert/update-alert/${payload.id}/${payload.alertid}`,\n    {\n      status:\"Acknowledged\",\n      comment : payload.comment,\n    }\n  );\n  return data;\n};\n\nexport const addSuppression = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`alertsuppression`, payload);\n  return data;\n};\n\nexport const getAllUpcomingSuppression = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`alertsuppression/find-by-type?type=Upcoming`);\n  return data;\n};\nexport const getAllActiveSuppression = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`alertsuppression/find-by-type?type=Active`);\n  return data;\n};\nexport const getAllExpiredSuppression = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`alertsuppression/find-by-type?type=Expired`);\n  return data;\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n// import { useQuery } from 'react-query'\nexport const loginPost = async (payload) => {\n  const { data } = await axiosInstance.post(`auth/login`, {\n    email: payload.email,\n    password: payload.password,\n  });\n  return data.data;\n};\nexport const generalPermissions = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`general`);\n  return data;\n};\nexport const addOrganization = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`organization`, payload);\n  return data;\n};\nexport const getOrganizationData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`organization`);\n  return data;\n};\n\nexport const getFacilitiesData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`facility/by-orgId/${id}`);\n  return data;\n};\nexport const EditOrganization = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `organization/${payload.editData.customerid}`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const getDepartmentsData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department/by-facId/${id}`);\n  return data;\n};\nexport const getAllDepByOrgId = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department/by-orgId/${id}`);\n  return data;\n};\n/**\n * This function is used to delete an organization by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Organization' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteOrganization = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`organization/${id}`);\n  return data;\n};\nexport const resetpassword = async (payload) => {\n  //debugger\n  const { data } = await axiosInstance.post(`auth/get-reset-token`, payload);\n  return data;\n};\n\nexport const SetNewPassword = async (payload) => {\n  const { data } = await axiosInstance.post(`/auth/reset-password`, payload);\n  return data;\n};\n\n// export const LogoUpload = async (payload) => {\n//   debugger\n//   setAuthenticationToken(localStorage.getItem(\"token\"));\n//   const { data } = await axiosInstance.post(`organization/upload`, payload);\n//   return data;\n// };\n\nexport const LogoUpload = async (payload) => {\n  const formData = new FormData();\n  formData.append(\"file\", payload.file);\n  formData.append(\"organizationName\", payload.organizationName);\n\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n\n  try {\n    const { data } = await axiosInstance.post(`organization/upload`, formData, {\n      headers: {\n        \"Content-Type\": \"multipart/form-data\", // Ensure proper content type for FormData\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n};\n\nexport const LogoUploadPatch = async (payload) => {\n  debugger;\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `organization/${localStorage.getItem(\"organizationid\")}`,\n    {\n      logo: payload,\n    }\n  );\n  return data;\n};\n\nexport const AcknowledgeMail = async (payload) => {\n  debugger;\n  setAuthenticationToken(payload.token);\n  const { data } = await axiosInstance.patch(\n    `alert/update-alert/${payload.id}`,\n    {\n      status: payload.status,\n    }\n  );\n  return data;\n};\n","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n// export const getAllDepartmentsData = async () => {\n//   setAuthenticationToken(localStorage.getItem('token'))\n//   const { data } = await axiosInstance.get(`Department/GetAllDepartments`)\n//   return data\n// }\n\nexport const getAllDepartmentsData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department`);\n  return data;\n};\n\n// export function useAllDepartmentsData() {\n//   return useQuery(['repos'], getAllDepartmentsData)\n// }\n\n/**\n * This function is used to delete a Department by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Department/DeleteDepartment?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDepartment = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`department/${id}`);\n  return data;\n};\n\nexport const addDepartment = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`department`, payload);\n  return data;\n};\nexport const EditDepartment = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `department/${payload.editData.departmentid}`,\n    payload.handler\n  );\n  return data;\n};\n","import { useQuery } from 'react-query'\nimport { setAuthenticationToken } from './auth'\nimport { axiosInstance } from './axios'\n\nexport const getAllDevicesData = async () => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device`)\n  return data\n}\nexport function useAllDevicesData() {\n  return useQuery(['repos'], getAllDevicesData)\n}\n\nexport const getAllDevicesById = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-depId/${id}`)\n  return data\n}\nexport const getAllDevicesByFacId = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-facId/${id}`)\n  return data\n}\nexport const getAllDevicesByOrgId = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-orgId/${id}`)\n  return data\n}\n/**\n * This function is used to delete a Device by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Device/DeleteDevice?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDevice = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.delete(`device/${id}`)\n  return data\n}\nexport const addDevice = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.post(`device`, payload)\n  return data\n}\nexport const EditDevice = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.patch(`device/${payload.editData.deviceid}`, payload.handler)\n  return data\n}\n","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDevicesSensorsData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `/sensor/get-sensors-by-deviceId/${id}`\n  );\n  return data;\n};\nexport const getAssignedOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-sensors-by-orgId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-orgId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofFac = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-facId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofDep = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-depId/${id}`);\n  return data;\n};\n/**\n * This function is used to delete a device sensor by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'SensorSetup/DeleteSensor?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDeviceSensor = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/unAssigned-from-device/${id}`\n  );\n  return data;\n};\n\n// export function useAllDevicesSensorsData(id) {\n//   return useQuery(['repos', id], getAllDevicesSensorsData)\n// }\nexport const addDeviceSensor = async (payload) => {\n  const { data } = await axiosInstance.post(`sensor/assign-sensor`, payload);\n  return data;\n};\nexport const EditDeviceSensor = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/update-sensor/${payload.editData.sensorid}`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const addSensorConfiguration = async (payload) => {\n  const { data } = await axiosInstance.post(\n    `SensorDeviceConfiguration/CreateSensorDeviceConfiguration`,\n    payload\n  );\n  return data;\n};\n\nexport const getSensorConfigurationData = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `sensor/get-sensors-configuration/${id}`\n  );\n  return data;\n};\n\nexport const EditSensorConfigurationData = async ({ handler, id }) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/update-sensors-configuration`,\n    handler\n  );\n  return data;\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllFacilitiesData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`facility`);\n  return data;\n};\n\n/**\n * This function is used to delete a facility by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'System' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteFacility = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`facility/${id}`);\n  return data;\n};\nexport const addFacility = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`facility`, {\n    facility_type: payload.facility_type,\n    name: payload.name,\n    userid: payload.userid,\n    customerid: Number(payload.customerid),\n    email: payload.email,\n    contactphonenumber: payload.contactphonenumber,\n    contactname: payload.contactname,\n    timezone: payload.timezone,\n    currency: payload.currency,\n    address: payload.address,\n    street: payload.street,\n    city: payload.city,\n    postcode: +payload.postcode,\n    latitude: +payload.latitude,\n    longitude: +payload.longitude,\n    isfacilityadmin: true,\n  });\n  return data;\n};\nexport const EditFacility = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `facility/${payload.editData.facilityid}`,\n    payload.handler\n    // {\n    //   facilityType: payload.handler.facilityType,\n    //   name: payload.name,\n    //   customerid: Number(payload.customerid),\n    //   email: payload.email,\n    //   contactphonenumber: payload.contactphonenumber,\n    //   contactname: payload.handler.contactname,\n    //   timezone: payload.handler.timezone,\n    //   currency: payload.handler.currency,\n    //   address: payload.handler.address,\n    //   street: payload.handler.street,\n    //   city: payload.handler.city,\n    //   postcode: +payload.handler.postCode,\n    //   latitude: +payload.handler.latitude,\n    //   longitude: +payload.handler.longitude,\n    //   isfacilityadmin: true,\n    // }\n  );\n  return data;\n};\n","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllOrgDevicesData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-assign-sensors`);\n  return data.data;\n};\nexport const getAllSensors = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-unassigned-sensors`);\n  return data;\n};\nexport const getAllAssignedSensorsofOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `sensor/get-all-sensors-by-orgId/${id}`\n  );\n  return data;\n};\n\nexport function useAllOrgDevicesData() {\n  return useQuery([\"repos\"], getAllOrgDevicesData);\n}\n\n/**\n * This function is used to delete an organization sensor by its 'id'.\n * Set the authentication token from local storage.Send a PATCH\n * request to the 'OrganizationSensor/UnassignSensor?id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteOrganizationSensor = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(`sensor/unAssigned/${id}`);\n  return data;\n};\nexport const addOrganizationSensor = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`sensor/assign-sensor`, payload);\n  return data;\n};\nexport const EditOrganizationSensor = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `/sensor/update-sensor/${payload.handler.id}`,\n    payload.handler\n  );\n  return data;\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllUnassignedUsersData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/unassigned-users`);\n  return data;\n};\nexport const getAllassignedUsersData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/assigned-users`);\n  return data;\n};\nexport const getAllUnassignedUsersDataByOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/unassigned-users/${id}`);\n  return data;\n};\nexport const getAllassignedUsersDataByOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/assigned-users/${id}`);\n  return data;\n};\n\nexport const getAllRolesData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`roles`);\n  return data;\n};\nexport const addUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`user/create`, payload);\n  return data;\n};\n\nexport const EditUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/${payload.editData.userid}`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteUsers = async (userid) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`user/${userid}`);\n  return data;\n};\nexport const assignFacilityUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`facility/assignStaff`, payload);\n  return data;\n};\nexport const assignDepartmentUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`department/assignStaff`, payload);\n  return data;\n};\nexport const assignDeviceUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`device/assignStaff`, payload);\n  return data;\n};\nexport const UnassignFacilityUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteFacilityStaff?userid=${params.userid}&facilityid=${params.facilityid}`\n  );\n  return data;\n};\nexport const UnassignDepartmentUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDepartmentStaff?userid=${params.userid}&departmentid=${params.departmentid}`\n  );\n  return data;\n};\nexport const UnassignDeviceUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDeviceStaff?userid=${params.userid}&deviceid=${params.deviceid}`\n  );\n  return data;\n};\n","import create from 'zustand'\n\nconst useDataStore = create((set) => ({\n  data: [], // Initialize an empty array to store your data\n  addData: (newItem) => set((state) => ({ data: [newItem] })),\n}))\n\nexport default useDataStore\n","import React from 'react';\nimport './BlueGraph.css';\nimport ReactApexChart from 'react-apexcharts';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction BlueGraph({ sensorId, sensorsData, loading }) {\n  debugger\n  const populateChart = () => {\n    if (!sensorsData) {\n      return {\n        updatedOptions: {\n          chart: {\n            type: 'area',\n            height: 350,\n          },\n          xaxis: {\n            categories: [],\n          },\n        },\n        updatedSeries: [],\n      };\n    }\n\n    const { sensorName , maxvalue, minvalue } = sensorsData;\n\n    // Get the current date in the same format as your data\n    const currentDate = new Date().toISOString().split('T')[0];\n\n    // Extract timestamps and measures from the data\n    const dataForCurrentDate = sensorsData[currentDate] || [];\n\n    const timestamps = dataForCurrentDate.map((reading) => {\n      const date = new Date(reading.reading_timestamp);\n      return `${date.getHours()}:${(date.getMinutes() < 10 ? '0' : '') + date.getMinutes()}`;\n    });\n    const measures = dataForCurrentDate.map((reading) => parseFloat(reading.measure));\n\n    // Update options with the extracted timestamps\n    const updatedOptions = {\n      chart: {\n        type: 'area',\n        height: 350,\n      },\n      xaxis: {\n        categories: timestamps,\n\n      },\n    };\n\n    // Update series with the extracted measures\n    const updatedSeries = [\n      {\n        name: sensorName,\n        data: measures,\n      },\n      {\n        name: 'Max Value',\n        data: [parseFloat(maxvalue)],\n        // data: Array(timestamps.length).fill(parseFloat(maxvalue)),\n        color: '#FF0000',\n        type: 'line',// Red color for Max Value line\n      },\n      {\n        name: 'Min Value',\n        data: [parseFloat(minvalue)],\n        color: '#00FF00',\n        type: 'line',// Green color for Min Value line\n      },\n\n    ];\n\n    return { updatedOptions, updatedSeries };\n  };\n\n\n  const { updatedOptions, updatedSeries } = populateChart();\n\n  return (\n    <div className=\"blue-top\">\n      <div className=\"main-container\">\n        {loading ? (\n          <Skeleton active paragraph={{ rows: 3 }} />\n        ) : (\n          <>\n            <div className=\"container\">\n              <p style={{color:'black'}}>{sensorsData?.sensorName}</p>\n            </div>\n            <div id=\"chart\">\n              <ReactApexChart\n                options={updatedOptions}\n                series={updatedSeries}\n                type=\"area\"\n                height={350}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nBlueGraph.propTypes = {\n  sensorId: PropTypes.string.isRequired,\n  sensorsData: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default BlueGraph;\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n// import { useLocation } from \"react-router-dom\";\nimport { CButton, CRow } from '@coreui/react' // Import CoreUI components\n// import { useNavigate } from \"react-router-dom\";\nimport DatePicker from 'react-datepicker'\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import \"./index.css\";\n// import { FaCalendar } from \"react-icons/fa\";\n// import { getSensorDataById } from \"services/sensor\";\nimport BlueGraph from './BlueGraph/BlueGraph'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport { useNavigate , useLocation } from 'react-router-dom'\nexport default function GraphPage({}) {\n  const location = useLocation();\n  const sensorGraphData = location.state?.sensorGraphData || {};\n  const [startDate, setStartDate] = useState(new Date())\n  const [endDate, setEndDate] = useState(new Date())\n  const navi = useNavigate()\n  const CustomInput = ({ value, onClick }) => (\n    <div className=\"custom-input\">\n      <input type=\"text\" value={value} onClick={onClick} placeholder=\"Select a date\" />\n      {/* <FaCalendar onClick={onClick} className=\"calendar-icon\" /> */}\n    </div>\n  )\n  const onFormSubmit = (e) => {\n    e.preventDefault()\n  }\n  //   const location = useLocation();\n  //   const navi = useNavigate();\n  const [sensorData, setSensorsData] = useState()\n  const [loading, setLoading] = useState(true)\n  const [isSensorId, setIsSensorId] = useState()\n  useEffect(() => {\n    // let sensorId = location?.search?.split('&')[0].split('=')[1]\n    // let sensorName = location?.search?.split('&')[1]?.split('=')[1]\n    // sensorName = decodeURIComponent(sensorName)\n    // if (sensorName == 'undefined') {\n    //   sensorName = sensorId\n    // }\n    // setIsSensorId(sensorName)\n    // setLoading(true)\n    const utcstartDate = startDate.toISOString()\n    const utcEndDate = endDate.toISOString()\n    // Replace the following line with your CoreUI equivalent for fetching data\n    // getSensorDataById(sensorId, sensorName, utcstartDate, utcEndDate)\n    //   .then((res) => {\n    //     setLoading(false);\n    //     setSensorsData(res?.data);\n    //   })\n    //   .catch((err) => {\n    //     setLoading(false);\n    //     console.error(err);\n    //   });\n\n    // Dummy data for demonstration\n    const dummyData = {\n      // Your dummy data here\n    }\n    setLoading(false)\n    setSensorsData(dummyData)\n  }, [startDate, endDate])\n\n  const handleButtonClick = () => {\n    navi('/dashboard')\n    // const storedSystemId = localStorage.getItem('systemId')\n    // const storedThemeColor = localStorage.getItem('themeColor')\n    // const params = new URLSearchParams()\n    // params.set('systemId', storedSystemId)\n    // params.set('themeColor', storedThemeColor)\n    // navi(`/?${params.toString()}`)\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo()\n  return (\n    <div>\n      <div style={{ flexDirection: 'column', padding: { base: '10px', md: '20px' } }}>\n        <CButton w=\"20\" onClick={handleButtonClick}>\n          Back\n        </CButton>\n        <form onSubmit={onFormSubmit}>\n          <CRow\n            className=\"d-inline-flex p-2 docs-highlight\"\n            style={{ display: 'flex ', gap: '10px' }}\n          >\n            <div className=\"DatePicker\">\n              <div>\n                <div>\n                  <p style={{ fontWeight: 'bold' }} id={`${darkMode ? 'heading-dark' : ''}`}>\n                    Select a Start Date\n                  </p>\n                </div>\n                <DatePicker\n                  className={` form-select ${darkMode ? 'select-dark' : ''}`}\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  name=\"startDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select start date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n              <div>\n                <div>\n                  <p style={{ fontWeight: 'bold' }} id={`${darkMode ? 'heading-dark' : ''}`}>\n                    Select an End Date\n                  </p>\n                </div>\n                <DatePicker\n                  className={` form-select ${darkMode ? 'select-dark' : ''}`}\n                  selected={endDate}\n                  onChange={(date) => setEndDate(date)}\n                  name=\"endDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select end date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n            </div>\n          </CRow>\n        </form>\n        <div>\n          <BlueGraph sensorId={isSensorId} sensorsData={sensorGraphData} loading={loading} />\n        </div>\n      </div>\n    </div>\n  )\n}\nGraphPage.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBattery(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 13,\n    height: 22,\n    viewBox: \"0 0 13 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.2401 4.37L10.4401 4.37L10.4401 19.5367L3.2401 19.5367L3.2401 4.37ZM8.6401 3.20333L8.6401 2.03667L5.04009 2.03667L5.04009 3.20333L2.34009 3.20333C2.25259 3.20333 2.18072 3.23067 2.12447 3.28536C2.06822 3.34005 2.04009 3.40992 2.04009 3.495L2.04009 20.4117C2.04009 20.4967 2.06822 20.5666 2.12447 20.6213C2.18072 20.676 2.25259 20.7033 2.34009 20.7033L11.3401 20.7033C11.4276 20.7033 11.4995 20.676 11.5557 20.6213C11.612 20.5666 11.6401 20.4967 11.6401 20.4117L11.6401 3.49499C11.6401 3.40992 11.612 3.34005 11.5557 3.28536C11.4995 3.23067 11.4276 3.20333 11.3401 3.20333L8.6401 3.20333ZM5.04009 0.869995L8.6401 0.869995C8.97134 0.869995 9.25415 0.983928 9.48852 1.2118C9.7229 1.43965 9.84009 1.71461 9.84009 2.03667L11.3401 2.03667C11.7526 2.03667 12.1057 2.17946 12.3995 2.46505C12.6932 2.75064 12.8401 3.09396 12.8401 3.49499L12.8401 20.4117C12.8401 20.8127 12.6932 21.156 12.3995 21.4416C12.1057 21.7272 11.7526 21.87 11.3401 21.87L2.34009 21.87C1.9276 21.87 1.57447 21.7272 1.28072 21.4416C0.986965 21.156 0.840088 20.8127 0.840088 20.4117L0.840087 3.495C0.840087 3.09396 0.986964 2.75064 1.28072 2.46505C1.57447 2.17946 1.9276 2.03667 2.34009 2.03667L3.84009 2.03667C3.84009 1.71461 3.95728 1.43965 4.19165 1.21178C4.42603 0.983925 4.70884 0.869995 5.04009 0.869995Z\",\n    fill: \"#64748b\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBattery);\nexport default __webpack_public_path__ + \"static/media/battery.1affb5b487e65028f8caf95b8e5df642.svg\";\nexport { ForwardRef as ReactComponent };","import React, { memo, useMemo, useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GaugeChart from \"react-gauge-chart\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport \"./Guage.css\";\n\nconst Gauge = memo(\n  ({ minValue, maxValue, currentValue, readingTime, awsId, devicename }) => {\n    const safeCurrentValue = Math.min(\n      Math.max(currentValue, minValue),\n      maxValue\n    );\n    const percentage =\n      currentValue === null\n        ? 0\n        : (currentValue - minValue) / (maxValue - minValue);\n    const { darkMode } = useGlobalInfo();\n\n    const [initialTimeDifference, setInitialTimeDifference] = useState(true);\n    const [timeDifference, setTimeDifference] = useState(0);\n\n    useEffect(() => {\n      const intervalId = setInterval(() => {\n        if (initialTimeDifference) {\n          setInitialTimeDifference(false);\n          setTimeDifference(getTimeDifference(new Date(), readingTime));\n        } else {\n          setTimeDifference((prevDifference) => prevDifference + 1);\n        }\n      }, 1000);\n\n      return () => clearInterval(intervalId);\n    }, [initialTimeDifference, readingTime]);\n\n    function getTimeDifference(currentTime, prevTime) {\n      const standardizedReadingDateString =\n        prevTime.slice(0, 23).replace(\" \", \"T\") + \"Z\";\n      prevTime = new Date(standardizedReadingDateString);\n      currentTime = new Date(currentTime);\n\n      const prevTimeValid = !isNaN(prevTime.getTime());\n      const currentTimeValid = !isNaN(currentTime.getTime());\n\n      if (!prevTimeValid || !currentTimeValid) {\n        return <span style={{ color: \"red\" }}>Offline</span>;\n      }\n\n      const timeDifferenceSeconds = Math.floor((currentTime - prevTime) / 1000);\n      const seconds = timeDifferenceSeconds % 60;\n      const minutes = Math.floor(timeDifferenceSeconds / 60) % 60;\n      const hours = Math.floor(timeDifferenceSeconds / 3600);\n\n      if (hours >= 24) {\n        const days = Math.floor(hours / 24);\n        return (\n          <span style={{ color: \"red\" }}>\n            {`${days} ${days !== 1 ? \"days\" : \"day\"} ago`}\n          </span>\n        );\n      } else if (hours > 0) {\n        return (\n          <span style={{ color: \"red\" }}>\n            {`${hours} ${hours !== 1 ? \"hours\" : \"hour\"} ago`}\n          </span>\n        );\n      } else if (minutes > 0) {\n        return (\n          <span style={{ color: \"red\" }}>\n            {`${minutes} ${minutes !== 1 ? \"minutes\" : \"minute\"} ago`}\n          </span>\n        );\n      } else {\n        return (\n          <span style={{ color: \"red\" }}>\n            {`${seconds} ${seconds !== 1 ? \"seconds\" : \"second\"} ago`}\n          </span>\n        );\n      }\n    }\n\n\n    const memoizedGaugeChart = useMemo(\n      () => (\n        <GaugeChart\n          id=\"gauge-chart2\"\n          nrOfLevels={20}\n          colors={[\"#2ECC71\", \"#ca0035\"]}\n          arcWidth={0.3}\n          percent={percentage}\n          needleColor=\"#BFC9CA\"\n          animate={true}\n          animDelay={1000}\n          animateDuration={2000}\n          style={{ height: \"auto\", width: \"auto\" }}\n        />\n      ),\n      [percentage]\n    );\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ marginRight: \"00px\", color: darkMode ? \"black\" : \"black\" }}>\n          {devicename}-{awsId}{\" \"}\n        </div>\n        <div></div>\n        <div>{memoizedGaugeChart}</div>\n        <div className=\"text\">\n          <div\n            className=\"Min-Max  d-flex\"\n            style={{ gap: \"28px\" , color: darkMode ? \"black\" : \"black\" }}\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          >\n            <span>\n              {minValue} <span>&#8451;</span>\n            </span>\n            <span>\n              {currentValue} <span>&#8451;</span>\n            </span>\n            <span>\n              {maxValue} <span>&#8451;</span>\n            </span>\n          </div>\n          <div\n            style={{\n              marginTop: \"3px\",\n              color: isNaN(currentValue) ? \"red\" : \"black\",\n            }}\n          >\n            {getTimeDifference(new Date(), readingTime)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nGauge.displayName = \"Gauge\";\n\nexport default Gauge;\n\nGauge.propTypes = {\n  minValue: PropTypes.number.isRequired,\n  maxValue: PropTypes.number.isRequired,\n  currentValue: PropTypes.number.isRequired,\n  readingTime: PropTypes.number.isRequired,\n  awsId: PropTypes.number.isRequired,\n  devicename: PropTypes.number.isRequired,\n};\n","import { BASE_URL } from \"src/constants/constants\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\nconst userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\nconst organizationPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _organization,\n  _view\n);\nconst facilityPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _facility,\n  _view\n);\nconst departmentPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _department,\n  _view\n);\nconst devicepermission = hasPermissionToActionAccess(\n  userPermissions,\n  _device,\n  _view\n);\nexport const getAllSensorData = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  let { data } = await axiosInstance.get(\n    `sensor/get-assign-sensors-widget/${id}`\n  );\n\n  // const sse = new EventSource(`${BASE_URL}sse/${id}`);\n  // sse.onopen = function () {\n  //   console.log(\"Connection to server opened.\");\n  // };\n  // sse.onerror = function () {\n  //   console.log(\"EventSource failed.\");\n  // };\n\n  // sse.onmessage = function (event) {\n  //   const updatedData = JSON.parse(event.data);\n\n  //   let returnUpdatedData = {\n  //     data: \"\",\n  //   };\n  //   console.log(\"updatedData\", updatedData);\n\n  //   returnUpdatedData.data = data.data.map((item) => {\n  //     debugger;\n  //     if (\n  //       item.awsSensorId === updatedData.aws_sensorid &&\n  //       item.property === updatedData.property\n  //     ) {\n  //       console.log(\"updatedData\", updatedData);\n  //       console.log(\"item\", item);\n  //       item.value = updatedData.value;\n  //       return item;\n  //     }\n  //     return item;\n  //   });\n  //   data = returnUpdatedData.data;\n  //   console.log(\"new data\", data);\n  // };\n  return data;\n};\n\nexport const FindDashboard = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `dashboard/find`,\n    payload\n    //  {\n    //   customerid: Number(payload),\n    // }\n  );\n  return data;\n};\n\nexport const ReportData = async (payload) => {\n  // debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`aws/save-sensor-data`, payload);\n  return data;\n};\nexport const CheckPointReportData = async (payload, id) => {\n  if (payload.id !== undefined) {\n    setAuthenticationToken(localStorage.getItem(\"token\"));\n    const { data } = await axiosInstance.post(\n      `sensor/checkpoint-report/${payload.id}`,\n      payload.payload\n    );\n    return data;\n  }\n};\nexport const SensorGraphData = async ({ awsSensorId, ...payload }) => {\n  debugger;\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `sensor/graph-report/${awsSensorId}`,\n    payload\n  );\n  return data;\n};\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { BASE_URL } from \"src/constants/constants\";\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n} from \"@coreui/react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport Battery from \"../../../assets/images/battery.svg\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n// import { getSensorsData } from \"services/sensor\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nimport Gauge from \"./Guage\";\nimport { getAllSensorData, SensorGraphData } from \"src/hooks/useSensors\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Guage.css\";\nconst Donut = ({\n  setAlarms,\n  setoffline,\n  setOk,\n  setwarnings,\n  showAlarms,\n  showoffline,\n  showok,\n  showwarnings,\n}) => {\n  const [sortedSensors , SetSortedsensors] = useState([])\n  const { mutate: SensorsData } = useMutation(getAllSensorData);\n  const { mutate: SensorGraph } = useMutation(SensorGraphData);\n  const [widgetsData, setWidgetsData] = useState();\n  const [sensorData, setSensorData] = useState([]);\n  const [loadingDonut, setLoadingDonut] = useState(false);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  function getAllSensorsData(id) {\n    debugger;\n    SensorsData(id, {\n      onSuccess: (data) => {\n        debugger;\n        setWidgetsData(data.data);\n        setSensorData(data.data); // Set sensorData here\n      },\n      onError: (error) => {\n        // Handle error if needed\n      },\n    });\n  }\n  function getSensorGraphData(payload, item) {\n    debugger;\n    SensorGraph(payload, {\n      onSuccess: (data) => {\n        const stateData = {\n          sensorGraphData: data.data,\n          item: item,\n        };\n        navi(`/sensor/graph`, { state: stateData });\n        // Set sensorData here\n      },\n      onError: (error) => {\n        // Handle error if needed\n      },\n    });\n  }\n  const handleCardClick = (item) => {\n    debugger;\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n\n    const payload = {\n      sensorTypeId: item.sensorTypeId,\n      awsSensorId: item.awsSensorId,\n      startDate: formattedDate,\n      endDate: formattedDate,\n    };\n\n    getSensorGraphData(payload, item);\n    // navi(`/sensor/graph`);\n  };\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  useEffect(() => {\n    const fetchData = () => {\n      if (organizationPermission) {\n        debugger;\n        const orgId = localStorage.getItem(\"OrganizationId\");\n        if (\n          orgId !== null &&\n          orgId !== undefined &&\n          orgId !== \"Select Organization\"\n        ) {\n          setLoadingDonut(true);\n          getAllSensorsData(orgId);\n          setLoadingDonut(false);\n        }\n      } else {\n        const orgId = localStorage.getItem(\"organizationid\");\n        if (orgId !== null) {\n          setLoadingDonut(true);\n          getAllSensorsData(orgId);\n          setLoadingDonut(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 300000);\n\n    return () => clearInterval(intervalId);\n  }, [organizationPermission]);\n  useEffect(() => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n    // const token = localStorage.getItem(\"token\");\n    // debugger;\n\n    if (\n      orgId !== null &&\n      orgId !== undefined &&\n      orgId !== \"Select Organization\"\n    ) {\n      const sse = new EventSource(`${BASE_URL}sse/${orgId}`);\n\n      sse.onmessage = (event) => {\n        const updatedSensorData = JSON.parse(event.data);\n\n        setWidgetsData((prevWidgetsData) => {\n          const updatedWidgetsData = prevWidgetsData.map((widget) => {\n            if (\n              widget.awsSensorId === updatedSensorData.aws_sensorid &&\n              widget.property === updatedSensorData.property\n            ) {\n              return {\n                ...widget,\n                value: updatedSensorData.value,\n                readingDateTime: updatedSensorData.readingDateTime,\n                batteryValue: updatedSensorData.batteryValue,\n              };\n            }\n\n            return widget;\n          });\n          console.log(updatedWidgetsData);\n          setSensorData(updatedWidgetsData);\n          return updatedWidgetsData;\n        });\n      };\n\n      return () => {\n        sse.close();\n      };\n    }\n  }, []);\n  useEffect(()=>{\n\n  },[])\n\n  let newWarnings = 0;\n  let newOffline = 0;\n  let newOk = 0;\n  let warningSensors = [];\n  let offlineSensors = [];\n  let okSensors = [];\n  sensorData?.forEach((item) => {\n    if (\n      item?.value !== null &&\n      (item?.value < item?.minValue || item?.value > item?.maxValue)\n    ) {\n      newWarnings++;\n      warningSensors.push(item);\n    } else if (item?.value === null) {\n      newOffline++;\n      offlineSensors.push(item);\n    } else {\n      newOk++;\n      okSensors.push(item);\n    }\n  });\n\n  setwarnings(newWarnings);\n  setoffline(newOffline);\n  setOk(newOk);\n\n  // const combinedSensors = [...offlineSensors, ...warningSensors, ...okSensors];\n  // SetSortedsensors(combinedSensors);\n\n  let sensorsToMap = sensorData;\n  if (showwarnings) {\n    sensorsToMap = warningSensors;\n  } else if (showoffline) {\n    sensorsToMap = offlineSensors;\n  } else if (showok) {\n    sensorsToMap = okSensors;\n  } else {\n    sensorsToMap = sensorData;\n  }\n\n  const navi = useNavigate();\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <div className=\"card-top\" style={{ width: \"100vw\" }}>\n      <CRow className=\"sensor_Container my-5 justify-content-start\">\n        {loadingDonut ? (\n          <>\n            {[...Array(2)].map((_, index) => (\n              <CCol\n                key={index}\n                sm=\"12\"\n                md=\"6\"\n                lg=\"3\"\n                className={` ${\n                  darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n              >\n                <CCard>\n                  <CCardBody>\n                    <Skeleton active paragraph={{ rows: 3 }} />\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            ))}\n            <div></div>\n          </>\n        ) : (\n          sensorsToMap?.map((item, index) => (\n            <CCol\n              key={index}\n              sm=\"12\"\n              className={` ${\n                darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n              style={{\n                border: \"1px solid rgba(163, 163, 163, 0.32)\",\n                borderRadius: \"5px\",\n                padding: \"0\",\n                width: \"auto\",\n                height: \"100%\",\n              }}\n            >\n              <CCard\n                style={{ cursor: \"pointer\" }}\n                className={` ${\n                  darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n                onClick={() => handleCardClick(item)}\n              >\n                <CCardHeader\n                  className=\"d-flex justify-content-between p-2 align-items-center\"\n                  id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                  style={{ height: \"45px\" }}\n                >\n                  <p className=\"m-0\">\n                    {item?.sensorName ? item.sensorName : item.sensorId}\n                  </p>\n                  <CCol className=\"battery\">\n                    <img\n                      src={Battery}\n                      alt=\"Battery\"\n                      style={{\n                        width: \"20px\",\n                        height: \"20px\",\n                        marginLeft: \"5px\",\n                      }}\n                    />\n                    <div\n                      style={{\n                        color: item.batteryValue < 3.5 ? \"red\" : \"green\",\n                      }}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      {item.batteryValue}\n                    </div>\n                  </CCol>\n                </CCardHeader>\n                <CCardBody\n                  style={{\n                    backgroundColor:\n                      item?.value === null\n                        ? \"rgb(157, 223, 228)\"\n                        : item?.value < item?.minValue ||\n                          item?.value > item?.maxValue\n                        ? \"rgb(238, 141, 141)\"\n                        : \"rgb(144, 238, 144 )\",\n                  }}\n                >\n                  <Gauge\n                    devicename={item?.deviceName}\n                    awsId={item?.awsSensorId}\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    minValue={item?.minValue}\n                    maxValue={item?.maxValue}\n                    currentValue={isNaN(item?.value) ? 0 : item?.value}\n                    readingTime={\n                      item?.value !== null ? item?.readingDateTime : \"\"\n                    }\n                  />\n                </CCardBody>\n\n                {/* <CCardFooter>\n                  <CRow>\n                    <CCol className=\"min\">\n                      <div style={{ display: \"flex\", gap: \"3px\" }}>\n                        <div\n                          className=\"min-heading\"\n                          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                        >\n                          Min\n                        </div>\n                        <div id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                          {item.minValue}\n                        </div>\n                      </div>\n                    </CCol>\n                    <CCol className=\"max\">\n                      <div\n                        style={{\n                          display: \"flex\",\n                          gap: \"3px\",\n                          justifyContent: \"flex-end\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        <div\n                          className=\"max-heading\"\n                          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                        >\n                          Max\n                        </div>\n                        <div id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                          {item.maxValue}\n                        </div>\n                      </div>\n                    </CCol>\n                  </CRow>\n                  <Divider />\n                  <CRow>\n                    <CCol className=\"hours\">\n                      {getTimeDifference(new Date(), item?.readingDateTime)}\n                    </CCol>\n                  </CRow>\n                </CCardFooter> */}\n              </CCard>\n            </CCol>\n          ))\n        )}\n      </CRow>\n    </div>\n  );\n};\n\nexport default Donut;\n\nDonut.propTypes = {\n  setAlarms: PropTypes.func.isRequired,\n  setoffline: PropTypes.func.isRequired,\n  setOk: PropTypes.func.isRequired,\n  setwarnings: PropTypes.func.isRequired,\n  showAlarms: PropTypes.bool.isRequired,\n  showoffline: PropTypes.bool.isRequired,\n  showok: PropTypes.bool.isRequired,\n  showwarnings: PropTypes.bool.isRequired,\n};\n","/* eslint-disable react/prop-types */\n// import React, { useState, useEffect } from \"react\";\n// import { Table } from \"antd\";\n// import { getSensorsDataHCCAP } from \"services/sensor\";\n// import \"./ReportTable.css\";\n\n// const ReportTable = ({ date, day }) => {\n//   const handleDateChange = (event) => {\n//     setSelectedDate(event.target.value);\n//   };\n//   const [loading, setLoading] = useState(false);\n//   const [hccpColumns, setHccpColumns] = useState([]);\n//   const [hccpData, setHccpData] = useState([]);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     console.log(date, day);\n//     getSensorsDataHCCAP({ date, day })\n//       .then((res) => {\n//         console.log(\"res\", res);\n//         setLoading(false);\n//         setHccpData(res.data);\n//       })\n//       .catch((err) => {\n//         setLoading(false);\n//       });\n//   }, [date, day]);\n\n//   const uniqueDates = [\n//     ...new Set(\n//       hccpData.flatMap((sensor) => sensor.dates.map((date) => date.date))\n//     ),\n//   ];\n//   const uniqueIntervals = [\n//     ...new Set(\n//       hccpData.flatMap((sensor) =>\n//         sensor.dates.flatMap((date) =>\n//           date.intervals.map((interval) => interval.interval)\n//         )\n//       )\n//     ),\n//   ];\n//   return (\n//     <>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Sensor Name</th>\n//             {uniqueDates.map((date) => (\n//               <th key={date} colSpan={uniqueIntervals.length}>\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//           <tr>\n//             <th></th>\n//             {uniqueDates.map((date) =>\n//               uniqueIntervals.map((interval) => (\n//                 <th key={`${date}-${interval}`}>{interval}</th>\n//               ))\n//             )}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {hccpData.map((sensor) => (\n//             <tr key={sensor.name}>\n//               <td>{sensor.name}</td>\n//               {uniqueDates.map((date) =>\n//                 uniqueIntervals.map((interval) => (\n//                   <td key={`${date}-${interval}`}>\n//                     {sensor.dates\n//                       .find((item) => item.date === date)\n//                       ?.intervals.find((item) => item.interval === interval)\n//                       ?.value || 0}\n//                   </td>\n//                 ))\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//     </>\n//   );\n// };\n\n// export default ReportTable;\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./ReportTable.css\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst ReportTable = ({ date, day, data }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const [sensorData, setSensorData] = useState(data || []);\n  // const [intervals,setIntervals]=useState(data.intervals)\n\n  useEffect(() => {\n    // If data changes externally, update the state\n    if (data) {\n      setSensorData(data);\n    }\n  }, [data]);\n  // Dummy data for sensors\n  const dummyData = [\n    {\n      name: \"Heater\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 25 },\n            { interval: \"2:00\", value: 30 },\n            { interval: \"3:00\", value: 25 },\n            { interval: \"4:00\", value: 30 },\n            { interval: \"5:00\", value: 25 },\n            { interval: \"6:00\", value: 30 },\n            // Add more intervals as needed\n          ],\n        },\n        // Add more dates as needed\n      ],\n    },\n    {\n      name: \"Freezer\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 20 },\n            { interval: \"2:00\", value: 22 },\n            { interval: \"3:00\", value: 20 },\n            { interval: \"4:00\", value: 22 },\n            { interval: \"5:00\", value: 20 },\n            { interval: \"6:00\", value: 22 },\n          ],\n        },\n      ],\n    },\n    {\n      name: \"temp\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 20 },\n            { interval: \"2:00\", value: 35 },\n            { interval: \"3:00\", value: 20 },\n            { interval: \"4:00\", value: 35 },\n            { interval: \"5:00\", value: 20 },\n            { interval: \"6:00\", value: 35 },\n          ],\n        },\n      ],\n    },\n  ];\n  const uniqueDates = [...new Set(sensorData.map((sensor) => sensor.date))];\n  const uniqueIntervals = [\n    ...new Set(\n      sensorData.flatMap((sensor) =>\n        sensor.readings.map((reading) => reading.interval)\n      )\n    ),\n  ];\n\n  const measuresMap = new Map();\n\n  sensorData.forEach((sensor) => {\n    const awsId = sensor.aws_id;\n    const sensorName = sensor.sensorValue;\n    const key = `${awsId}-${sensorName}`;\n\n    const measures = measuresMap.get(key) || {\n      awsId,\n      sensorName,\n      measures: [],\n    };\n\n    uniqueIntervals.forEach((interval) => {\n      const intervalMeasures = sensor.readings\n        .filter((reading) => reading.interval === interval)\n        .map((reading) => ({\n          measure: reading.measure,\n          interval: reading.interval,\n          min: sensor.min, // Include min from the sensor object\n          max: sensor.max, // Include max from the sensor object\n        }));\n      measures.measures.push(intervalMeasures);\n    });\n\n    measuresMap.set(key, measures);\n  });\n\n  return (\n    <>\n      <table className=\"w-100 hccp_report_table\">\n        <thead>\n          <tr>\n            <th id={`${darkMode ? \"heading-dark\" : \"\"}`}>Sensor Name</th>\n            {uniqueDates.map((uniqueDate) => (\n              <th\n                id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                key={uniqueDate}\n                colSpan={uniqueIntervals.length}\n              >\n                {uniqueDate}\n              </th>\n            ))}\n          </tr>\n          <tr>\n            <th></th>\n            {uniqueDates.map(() =>\n              uniqueIntervals.map((interval) => (\n                <th key={interval}>{`${interval}:00`}</th>\n              ))\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {[...measuresMap.values()].map(({ awsId, sensorName, measures }) => (\n            <tr key={`${awsId}-${sensorName}`}>\n              <td id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                {sensorName}-{awsId}\n              </td>\n              {measures.flat().map((reading, index) => {\n                // Extract the relevant data from the reading\n                const { measure, interval, min, max } = reading;\n                // console.log(\"Measures:\", measures);\n\n                // Handle the case where measure is 0\n                if (parseFloat(measure) === 0) {\n                  return (\n                    <td\n                      key={`${awsId}-${sensorName}-${index}`}\n                      style={{\n                        backgroundColor: \"lightgrey\", // Gray for 0 value\n                        border: \"3px solid #bababa\",\n                        padding: \"5px\",\n                      }}\n                    >\n                      n/a\n                    </td>\n                  );\n                }\n\n                return (\n                  <td\n                    key={`${awsId}-${sensorName}-${index}`}\n                    style={{\n                      backgroundColor:\n                        parseFloat(measure) > parseFloat(max) ||\n                        parseFloat(measure) < parseFloat(min)\n                          ? \"#FF0000\" // Red for values outside the min-max range\n                          : \"#90EE90\", // Green for normal values\n                      border: \"3px solid #bababa\",\n                      padding: \"5px\",\n                    }}\n                  >\n                    {measure}\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n        ;\n      </table>\n    </>\n  );\n};\n\nexport default ReportTable;\n","import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport ReportTable from \"./ReportTable/ReportTable\";\nimport { useMutation } from \"react-query\";\nimport Select from \"react-select\";\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButton,\n} from \"@coreui/react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { ReportData, CheckPointReportData } from \"src/hooks/useSensors\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\nfunction TableCard() {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [startDate, setStartDate] = useState(new Date());\n  const [day, setDay] = useState(1);\n  const [data, setData] = useState([]);\n  const [sensors, setSensors] = useState([]);\n  const [intervals, setIntervals] = useState([]);\n  const payload = {\n    days: day,\n    startDate: startDate.toISOString(), // Convert the date to ISO format\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: reportData } = useMutation(ReportData);\n  const { mutate: checkpointReport } = useMutation(CheckPointReportData);\n  function reportDataFetch(selectedId) {\n    reportData(selectedId, {\n      onSuccess: (data) => {\n        // console.log(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function checkpointReportDataFetch(payload, id) {\n    debugger;\n    const combinedData = {\n      payload,\n      id,\n    };\n\n    checkpointReport(combinedData, {\n      onSuccess: (data) => {\n        debugger;\n        setData(data.data?.checkPoints);\n        setIntervals(data.data?.intervals);\n        setSensors(data.data?.sensors);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  useEffect(() => {\n    const fetchData = () => {\n      reportDataFetch();\n    };\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 300000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n  useEffect(() => {\n    const payload = {\n      days: day,\n      startDate: startDate.toISOString(),\n      sensorIds: [],\n    };\n    if (organizationPermission) {\n      debugger;\n      const orgId = localStorage.getItem(\"OrganizationId\");\n      if (\n        orgId !== null &&\n        orgId !== undefined &&\n        orgId !== \"Select Organization\"\n      ) {\n        debugger;\n        checkpointReportDataFetch(payload, orgId);\n      }\n    } else {\n      debugger;\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"organizationid\")\n      );\n    }\n  }, [startDate, day, organizationPermission]);\n  const handleDatePickerChange = (date) => {\n    setStartDate(date);\n    const payload = {\n      days: day,\n      startDate: date.toISOString(),\n    };\n\n    checkpointReportDataFetch(payload);\n  };\n  const handleSelectChange = (e) => {\n    const selectedDay = Number(e.target.value);\n    setDay(selectedDay);\n    const payload = {\n      days: selectedDay,\n      startDate: startDate.toISOString(),\n    };\n\n    checkpointReportDataFetch(payload);\n  };\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const handleMultiSelectChange = (selectedOptions) => {\n    // Store an array of sensor type IDs in the selectedSensors state\n    const selectedSensorTypeIds = selectedOptions.map((sensor) => sensor.value);\n    setSelectedSensors(selectedSensorTypeIds);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const payload = {\n      days: day,\n      startDate: startDate.toISOString(),\n      sensorIds: selectedSensors,\n    };\n\n    if (organizationPermission) {\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"OrganizationId\")\n      );\n    } else {\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"organizationid\")\n      );\n    }\n  };\n  return (\n    <CCard\n      className={`table_container_light ${\n        darkMode ? \"table_container_dark\" : \"\"\n      }`}\n      style={{\n        marginTop: \"2rem\",\n        borderRadius: \"5px\",\n        padding: \"25px\",\n        border: \"1px solid rgba(163, 163, 163, 0.32)\",\n      }}\n    >\n      <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>CheckPoint Report</h3>\n      <form className=\"d-flex\">\n        <div className=\"d-flex gap-5 mt-2 \">\n          <div className=\"Custom-Date items-center d-flex gap-2 w-50\">\n            <label\n              htmlFor=\"datePicker\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            >\n              Select a Date\n            </label>\n            <DatePicker\n              className={`date form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              selected={startDate}\n              name=\"startDate\"\n              dateFormat=\"MM/dd/yyyy\"\n              placeholderText=\"Select a date\"\n              onChange={handleDatePickerChange}\n              // style={{ width: \"300px\" }}\n            />\n          </div>\n          <div className=\"d-flex\">\n            <label\n              htmlFor=\"datePicker\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              style={{ marginRight: \"20px\", marginLeft: \"30px\" }}\n            >\n              Select Sensors\n            </label>\n            <Select\n              isMulti\n              className={`form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              value={selectedSensors.map((sensorTypeId) => ({\n                label: sensors.find(\n                  (sensor) => sensor.sensorTypeId === sensorTypeId\n                )?.sensorValue,\n                value: sensorTypeId,\n              }))}\n              options={sensors.map((sensor) => ({\n                label: sensor.sensorValue,\n                value: sensor.sensorTypeId,\n              }))}\n              onChange={handleMultiSelectChange}\n              styles={{\n                container: (provided) => ({\n                  ...provided,\n                  width: 300,\n                }),\n              }}\n            />\n\n            <button\n              onClick={handleSubmit}\n              style={{\n                width: \"100px\",\n                height: \"45px\",\n                borderColor: \"lightgray\",\n                borderBottomColor: \"lightgray\",\n                borderRadius: \"5px\",\n                boxShadow: \"3px 3px  0 rgba(212, 211, 209, 0.9) \",\n                marginLeft: \"10px\",\n                marginTop: \"0px\",\n              }}\n            >\n              Submit\n            </button>\n\n            <div className=\"d-flex\" style={{ marginRight: \"0px\" }}>\n              <label\n                htmlFor=\"datePicker\"\n                id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                style={{ marginRight: \"20px\", marginLeft: \"30px\" }}\n              >\n                Days\n              </label>\n              <select\n                className={`form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                value={day}\n                style={{ width: \"80px\" }}\n                onChange={handleSelectChange}\n              >\n                {[1, 2, 3, 4, 5, 6, 7].map((value) => (\n                  <option key={value} value={value}>\n                    {value}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"d-flex gap-2\" style={{ marginLeft: \"5px\" }}>\n              {Object?.entries(intervals).map(\n                ([intervalName, intervalValue]) => (\n                  <button\n                    key={intervalValue}\n                    color=\"primary\"\n                    className=\"float-end mr-3\"\n                    style={{\n                      width: \"50px\",\n                      height: \"45px\",\n                      borderColor: \"lightgray\",\n                      borderBottomColor: \"lightgray\",\n                      borderRadius: \"5px\",\n                      boxShadow: \"3px 3px  0 rgba(212, 211, 209, 0.9) \",\n                    }}\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {intervalValue}\n                  </button>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"overflow-x-scroll w-100\">\n        <ReportTable date={startDate} day={day} data={data} />\n      </div>\n    </CCard>\n  );\n}\n\nexport default TableCard;\n","/* eslint-disable react/prop-types */\n// /* eslint-disable prettier/prettier */\nimport React from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport \"../dashboard/Dashboard.css\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst CounterComp = ({ name, count, icon }) => {\n  const orgId = localStorage.getItem(\"OrganizationId\")\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const customStyle = {\n    ...(orgId && orgId !== \"Select Organization\" && { width: \"20%\" }), // If orgId is selected and not \"Select Organization\", add width: \"20%\"\n    visibility: \"visible\",\n    // Add other styles as needed\n  };\n  return (\n    <>\n      {/* <div className=\"counter_cards mb-3\">\n        <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>{name}</h3>\n        <div\n          className=\"count\"\n          id={`${darkMode ? \"count-dark\" : \"count-light\"}`}\n        >\n          <p id={`${darkMode ? \"heading-dark\" : \"\"}`}>{count}</p>\n        </div>\n      </div> */}\n      {/* new */}\n      <div\n        className=\"item wow fadeInUpBig animated animated\"\n        style={customStyle}\n        id={`${darkMode ? \"count-dark\" : \"count-light\"}`}\n      >\n        <CIcon icon={icon} alt=\"Count\" />\n        <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>{count}</h3>\n        <span></span>\n        <p id={`${darkMode ? \"heading-dark\" : \"\"}`}>{name}</p>\n      </div>\n    </>\n  );\n};\n\nexport default CounterComp;\n","import React, { useEffect, useState } from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n// import Charts from \"../charts/Charts\";\nimport { useMutation } from \"react-query\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilTriangle,\n  cilAirplay,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport Donut from \"../Components/Donut\";\nimport TableCard from \"../Components/TableCard\";\n// import GraphPage from \"./Components/GraphPage\";\n// import CounterComp from \"./Counter_Comp\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CCardTitle,\n  CCardText,\n  CRow,\n  CCardHeader,\n  CCardFooter,\n  CHeader,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from \"@coreui/react\";\nimport { FindDashboard } from \"src/hooks/useSensors\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\n\nfunction ConditionSummary() {\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <div>\n        <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Conditions summary</h1>\n        <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n          Keep track of your Sensor status\n        </h6>\n      </div>\n\n      <div style={{ marginTop: \"30px\", marginBottom: \"30px\", color: \"black\" }}>\n        <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n      </div>\n\n      <div>\n        <CRow\n          className=\"justify-content-between\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            flexDirection: \"column\",\n            flexWrap: \"wrap\",\n            marginTop: \"40px\",\n            gap: \"1rem\",\n          }}\n        >\n          {/* card red */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"rgb(255 179 179)\",\n            }}\n          >\n            <CCardText style={{ color: \"#FF0505\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>00</h1>\n              <p>\n                <CIcon\n                  icon={cilTriangle}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Warning\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card yellow */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#fff374\",\n            }}\n          >\n            <CCardText style={{ color: \"#da582c\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#da582c\" }}>01</h1>\n              <p>\n                <CIcon\n                  icon={cilAirplay}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Alarm\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card green */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#6EF768\",\n            }}\n          >\n            <CCardText style={{ color: \"#32712F\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>02</h1>\n              <p>\n                <CIcon\n                  icon={cilCheckAlt}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Okay\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card blue */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#9DDFE4\",\n            }}\n          >\n            <CCardText style={{ color: \"#349FC4\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>01</h1>\n              <p>\n                <CIcon icon={cilSortAscending} alt=\"Name\" size=\"xl\" />\n                Offline\n              </p>\n            </CCardText>\n          </CCol>\n        </CRow>\n        <>\n          <CRow>\n            <Donut />\n          </CRow>\n          <TableCard />\n        </>\n      </div>\n    </>\n  );\n}\n\nexport default ConditionSummary;\n","import React, { useEffect, useState } from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport Charts from \"../charts/Charts\";\nimport { useMutation } from \"react-query\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilWarning,\n  cilAirplay,\n  cilAlarm,\n  cilToggleOff,\n  cilLibraryBuilding,\n  cilPeople,\n  cilBuilding,\n  cilDevices,\n  cilAudio,\n  cilAudioSpectrum,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport Donut from \"./Components/Donut\";\nimport TableCard from \"./Components/TableCard\";\nimport GraphPage from \"./Components/GraphPage\";\nimport CounterComp from \"./Counter_Comp\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CCardTitle,\n  CCardText,\n  CRow,\n  CCardHeader,\n  CCardFooter,\n  CHeader,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from \"@coreui/react\";\nimport { FindDashboard } from \"src/hooks/useSensors\";\nimport Counter from \"./Components/condition_cards/ConditionCards\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport ConditionSummary from \"./ConditionSummary/ConditionSummary\";\n\nimport \"./Dashboard.css\";\nconst Dashboard = () => {\n  const { dispatch } = useLoader();\n  const { departmentId } = useGlobalInfo();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: dashboardFind } = useMutation(FindDashboard);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [organizationCount, setOrganiztionCount] = useState(0);\n  const [facilityCount, setFacilityCount] = useState(0);\n  const [departmentCount, setDepartmentCount] = useState(0);\n  const [deviceCount, setDeviceCount] = useState(0);\n  const [unAssignedSensorCount, setUnAssignedSensorCount] = useState(0);\n  const [assignedSensorCount, setAssignedSensorCount] = useState(0);\n  const orgID = localStorage.getItem(\"OrganizationId\");\n  const facID = localStorage.getItem(\"facilityId\");\n  const depID = localStorage.getItem(\"departmentId\");\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  function DashboardData(id, idType) {\n    const payload = {\n      [idType]: Number(id),\n    };\n\n    setTimeout(() => {\n      dashboardFind(payload, {\n        onSuccess: (res) => {\n          setOrganiztionCount(res.data.counts?.OrganizationCount);\n          setFacilityCount(res.data.counts?.FacilityCount);\n          setDepartmentCount(res.data.counts?.DepartmentCount);\n          setDeviceCount(res.data.counts?.DeviceCount);\n          setUnAssignedSensorCount(res.data.counts?.UnAssignedSensorCount);\n          setAssignedSensorCount(res.data.counts?.AssignedSensorCount);\n          hideLoader();\n        },\n        onError: (error) => {\n          setFacilityCount(0);\n          setDepartmentCount(0);\n          setDeviceCount(0);\n          setUnAssignedSensorCount(0);\n          setAssignedSensorCount(0);\n          hideLoader();\n        },\n      });\n    }, 0);\n  }\n  const [warnings, setwarnings] = useState(0);\n  const [offline, setoffline] = useState(0);\n  const [ok, setOk] = useState(0);\n  const [Alarms, setAlarms] = useState(0);\n  const [showwarnings, setShowwarnings] = useState(false);\n  const [showoffline, setShowoffline] = useState(false);\n  const [showok, setShowOk] = useState(false);\n  const [showAlarms, setShowAlarms] = useState(false);\n  const handleOkClick = () => {\n    setShowOk(true);\n    setShowoffline(false);\n    setShowwarnings(false);\n  };\n  const handleOfflineClick = () => {\n    setShowoffline(true);\n    setShowwarnings(false);\n    setShowOk(false);\n  };\n  const handleWarningsClick = () => {\n    setShowwarnings(true);\n    setShowoffline(false);\n    setShowOk(false);\n  };\n  const handleClearClick = () => {\n    setShowOk(false);\n    setShowoffline(false);\n    setShowwarnings(false);\n  };\n  // useEffect(() => {\n  //   if (\n  //     orgID !== null &&\n  //     orgID !== undefined &&\n  //     orgID !== \"Select Organization\"\n  //   ) {\n  //     DashboardData(orgID, \"customerid\");\n  //   } else {\n  //     DashboardData();\n  //   }\n  // }, [orgID, facID]);\n  useEffect(() => {\n    let filterValue, filterType;\n    if (\n      depID !== null &&\n      depID !== undefined &&\n      depID !== \"Select Department\"\n    ) {\n      filterValue = depID;\n      filterType = \"departmentid\";\n    } else if (\n      facID !== null &&\n      facID !== undefined &&\n      facID !== \"Select Facility\"\n    ) {\n      filterValue = facID;\n      filterType = \"facilityid\";\n    } else if (orgID !== null && orgID !== undefined) {\n      if (orgID !== \"Select Organization\") {\n        filterValue = orgID;\n        filterType = \"customerid\";\n      } else {\n        // orgID is \"Select Organization,\" call DashboardData() without filters\n        DashboardData();\n        return;\n      }\n    }\n\n    if (filterValue !== undefined && filterType !== undefined) {\n      DashboardData(filterValue, filterType);\n    } else {\n      DashboardData();\n    }\n  }, [depID, facID, orgID]);\n  return (\n    <>\n      {/* <Charts/> */}\n      {organizationPermission ? (\n        (localStorage.getItem(\"OrganizationId\") &&\n          localStorage.getItem(\"OrganizationId\") !== \"Select Organization\" &&\n          localStorage.getItem(\"OrganizationId\") !== undefined) ||\n        (localStorage.getItem(\"facilityId\") &&\n          localStorage.getItem(\"facilityId\") !== \"Select Facility\") ||\n        (localStorage.getItem(\"departmentId\") &&\n          localStorage.getItem(\"departmentId\") !== \"Select Department\") ? (\n          <>\n            <div>\n              <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                Conditions Summary\n              </h1>\n              <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                Keep track of your Sensor status\n              </h6>\n            </div>\n\n            <div\n              style={{\n                marginTop: \"30px\",\n                marginBottom: \"30px\",\n                color: \"black\",\n              }}\n            >\n              <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n              <button\n                style={{ borderRadius: \"5px\", padding: \"5px\" }}\n                onClick={handleClearClick}\n              >\n                Clear Filter\n              </button>\n            </div>\n\n            <div>\n              <CRow className=\"status_card_container\">\n                {/* card red */}\n                <CCol\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_red\"\n                  onClick={handleWarningsClick}\n                >\n                  <CIcon\n                    icon={cilWarning}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#FF0505\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>\n                      {warnings}\n                    </h1>\n                    <p>Warning</p>\n                  </CCardText>\n                </CCol>\n                {/* card yellow */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_yellow\"\n                  // onClick={setShowAlarms(true)}\n                >\n                  <CIcon\n                    icon={cilAlarm}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#DA582C\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#DA582C\" }}>\n                      {Alarms}\n                    </h1>\n                    <p>Alarm</p>\n                  </CCardText>\n                </CCol>\n                {/* card green */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_green\"\n                  onClick={handleOkClick}\n                >\n                  <CIcon\n                    icon={cilCheckAlt}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#32712F\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>{ok}</h1>\n                    <p>Ok</p>\n                  </CCardText>\n                </CCol>\n                {/* card blue */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_blue\"\n                  onClick={handleOfflineClick}\n                >\n                  <CIcon\n                    icon={cilSortAscending}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#349FC4\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>\n                      {offline}\n                    </h1>\n                    <p>Offine</p>\n                  </CCardText>\n                </CCol>\n                <CRow>\n                  <Donut\n                    setAlarms={setAlarms}\n                    setoffline={setoffline}\n                    setOk={setOk}\n                    setwarnings={setwarnings}\n                    showwarnings={showwarnings}\n                    showoffline={showoffline}\n                    showok={showok}\n                    showAlarms={showAlarms}\n                  />\n                </CRow>\n              </CRow>\n\n              <>\n                {/* <CRow> */}\n                {/* </CRow> */}\n\n                <TableCard />\n              </>\n            </div>\n          </>\n        ) : // </CCard>\n\n        null\n      ) : (\n        // <>\n        //   <ConditionSummary />\n        // </>\n        <>\n          <div>\n            <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Conditions summary</h1>\n            <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Keep track of your Sensor status\n            </h6>\n          </div>\n\n          <div\n            style={{ marginTop: \"30px\", marginBottom: \"30px\", color: \"black\" }}\n          >\n            <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n          </div>\n          <CRow className=\"status_card_container\">\n            {/* card red */}\n            <CCol md={6} lg={3} className=\"status_card\" id=\"status_card_red\">\n              <CIcon\n                icon={cilWarning}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#FF0505\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>\n                  {warnings}\n                </h1>\n                <p>Warning</p>\n              </CCardText>\n            </CCol>\n            {/* card yellow */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_yellow\"\n            >\n              <CIcon\n                icon={cilAlarm}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#DA582C\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#DA582C\" }}>{Alarms}</h1>\n                <p>Alram</p>\n              </CCardText>\n            </CCol>\n            {/* card green */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_green\"\n            >\n              <CIcon\n                icon={cilCheckAlt}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#32712F\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>{ok}</h1>\n                <p>Ok</p>\n              </CCardText>\n            </CCol>\n            {/* card blue */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_blue\"\n            >\n              <CIcon\n                icon={cilSortAscending}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#349FC4\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>\n                  {offline}\n                </h1>\n                <p>Offine</p>\n              </CCardText>\n            </CCol>\n            <CRow>\n              <Donut\n                setAlarms={setAlarms}\n                setoffline={setoffline}\n                setOk={setOk}\n                setwarnings={setwarnings}\n                showwarnings={showwarnings}\n                showoffline={showoffline}\n                showok={showok}\n                showAlarms={showAlarms}\n              />\n            </CRow>\n          </CRow>\n          <div>\n            <>\n              {/* <CRow> */}\n              {/* </CRow> */}\n\n              <TableCard />\n            </>\n          </div>\n        </>\n      )}\n      {/* <CCard> */}\n      <div\n        style={{\n          color: \"black\",\n          marginTop: \"20px\",\n        }}\n      >\n        <CRow\n          className=\"my-3\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            flexDirection: \"column\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          <div className=\"projectFactsWrap\">\n            {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"Organizations\"\n                  icon={cilLibraryBuilding}\n                  count={organizationCount}\n                />\n              )}\n            {facilityPermission && (!facID || facID === \"Select Facility\") && (\n              <CounterComp\n                name=\"Facilities\"\n                icon={cilPeople}\n                count={facilityCount}\n              />\n            )}\n            <CounterComp\n              name=\"Devices \"\n              icon={cilDevices}\n              count={deviceCount}\n            />\n            {departmentPermission &&\n              (!depID || depID === \"Select Department\") && (\n                <CounterComp\n                  name=\"Departments \"\n                  icon={cilBuilding}\n                  count={departmentCount}\n                />\n              )}\n            {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && ( */}\n            <CounterComp\n              name=\"Assigned Sensors \"\n              icon={cilAudio}\n              count={assignedSensorCount}\n            />\n            {/* )} */}\n            {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"UnAssigned Sensors \"\n                  icon={cilAudioSpectrum}\n                  count={unAssignedSensorCount}\n                />\n              )}\n          </div>\n        </CRow>\n        {/* <CRow>\n        <Counter icon=\"fa-rocket\" value=\"29\" title=\"Web Development\" isBlue />\n        </CRow> */}\n      </div>\n      {/* </CCard> */}\n\n      {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && ( */}\n      {/* <CounterComp name=\"Assigned Sensors \" count={assignedSensorCount} /> */}\n      {/* )} */}\n      {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"UnAssigned Sensors \"\n                  count={unAssignedSensorCount}\n                />\n              )}\n          </div>\n        </CRow> */}\n      {/* <CRow>\n        <Counter icon=\"fa-rocket\" value=\"29\" title=\"Web Development\" isBlue />\n        </CRow> */}\n      {/* </div>p */}\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport AddSensorConfigration from \"../add-sensor-configration/add-sensor-configration\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cibMailchimp,\n  cil3d,\n  cil4k,\n  cilActionUndo,\n  cilAirplay,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilTerminal,\n} from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getAllSensors } from \"src/hooks/useOrganizationDevices\";\nimport { getAssignedOrg } from \"src/hooks/useDevicesSensors\";\nimport {\n  getAllDevicesData,\n  useAllDevicesData,\n  addDevice,\n  EditDevice,\n  deleteDevice,\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nconst AddDeviceSensor = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const { data: allDevices } = useAllDevicesData();\n  const navigate = useNavigate();\n  const [deviceData, setDevicesData] = useState([]);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [AddsensorConfiguration, setIsAddsensorConfiguration] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const orgID = localStorage.getItem(\"OrganizationId\");\n  const organizationId = localStorage.getItem(\"organizationid\");\n  // const [orgID , setorgID] = useState()\n  const [deviceId, setDeviceId] = useState();\n  const [formData, setFormData] = useState({\n    aws_sensorid: \"\",\n    sensorname: \"\",\n    deviceid: deviceId,\n    customerid: Number(orgID),\n    // active: true,\n  });\n  useEffect(() => {\n    //debugger\n    if (data) {\n      setFormData({\n        customerid: data.customerid,\n        aws_sensorid: data.aws_sensorid,\n        sensorname: data.sensorname,\n        deviceid: data.deviceid,\n        // active: true,\n      });\n    }\n  }, [data]);\n  const { mutate: getAllSensorsData, data: sensorData } =\n    useMutation(getAssignedOrg);\n  // const { mutate: getAllSensorsOrgData, data: sensorData } = useMutation(getAllSensorsDataofOrg)\n  const { mutate: getDevices } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    getDevices(\"\", {\n      onSuccess: (data) => {\n        setDevicesData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrgID } = useMutation(getAllDevicesByOrgId);\n  function devicesDataByOrg(selectedId) {\n    // showLoader();\n    getDevicesByOrgID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFacID } = useMutation(getAllDevicesByFacId);\n  function devicesDataByFac(selectedId) {\n    // showLoader();\n    getDevicesByFacID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    if (organizationPermission) {\n      // debugger;\n      getAllSensorsData(orgID, {\n        onSuccess: (data) => {\n          //debugger\n        },\n        onError: (error) => {},\n      });\n    } else if (!organizationPermission) {\n      debugger;\n      getAllSensorsData(organizationId, {\n        onSuccess: (data) => {\n          //debugger\n        },\n        onError: (error) => {},\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n    const departmentId = localStorage.getItem(\"departmentId\");\n\n    if (departmentId && departmentId !== \"Select Department\") {\n      // Only departmentId is selected\n      devicesDataFetch(departmentId);\n    } else if (facilityId && facilityId !== \"Select Facility\") {\n      // facilityId is selected, prioritize it over organizationId\n      devicesDataByFac(facilityId);\n    } else if (organizationId && organizationId !== \"Select Organization\") {\n      // Only organizationId is selected and it's not \"Select Organization\"\n      devicesDataByOrg(organizationId);\n    } else {\n      // Fallback: getAllDevices\n      getAllDevices();\n    }\n  }, [\n    localStorage.getItem(\"OrganizationId\"),\n    localStorage.getItem(\"facilityId\"),\n    localStorage.getItem(\"departmentId\"),\n  ]);\n\n  const sensorConfigure = () => {\n    navigate(\"/devices-sensors/sensor-configration\");\n  };\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      // sensorConfigure()\n      closeModal();\n    }\n  };\n  const handledeviceChange = (e) => {\n    const selectedDeviceId = parseInt(e.target.value, 10) || 0; // Parse as an integer or default to 0\n    setDeviceId(selectedDeviceId);\n    setFormData({\n      ...formData,\n      deviceid: selectedDeviceId,\n    });\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Sensor Id */}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationSensorId\">\n          Sensor Id *\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            name=\"sensorId\"\n            value={formData.sensorId}\n            onChange={handleInputChange}\n            feedbackInvalid=\" Sensor Id is required\"\n            id=\"validationSensorId\"\n            disabled={data ? true : false}\n            required\n          />\n        </CInputGroup>\n      </CCol> */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationSensorId\"\n        >\n          Sensor Id*\n        </CFormLabel>\n        <CFormSelect\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid sensor id\"\n          name=\"aws_sensorid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.aws_sensorid}\n          id=\"validationSensorId\"\n          onChange={handleInputChange}\n          disabled={data ? true : false}\n        >\n          <option>Select Sensors</option>\n          {sensorData?.data?.map((item, index) => {\n            return (\n              <option value={item.aws_sensorid} key={index}>\n                {item.aws_sensorid}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/*Sensor name*/}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationSensorname\"\n        >\n          Sensor Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"sensorname\"\n            value={formData.sensorname}\n            onChange={handleInputChange}\n            feedbackInvalid=\" Sensor Name is required\"\n            id=\"validationSensorname\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Device Selection */}\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDeviceSelection\"\n        >\n          Equipment Selection*\n        </CFormLabel>\n        <CFormSelect\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          name=\"deviceSelection\"\n          value={deviceId}\n          feedbackInvalid=\"Please select a valid Device Selection\"\n          id=\"validationDeviceSelection\"\n          onChange={handledeviceChange}\n          required\n        >\n          <option>Select Equipment</option>\n          {deviceData?.data?.map((item) => {\n            return (\n              <option key={item.deviceid} value={item.deviceid}>\n                {item.devicename}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Device Sensor\" : \"Add Device Sensor\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  // TableHide: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    sensorId: PropTypes.string,\n    aws_sensorid: PropTypes.string,\n    sensorname: PropTypes.string,\n    deviceid: PropTypes.number,\n    customerid: PropTypes.number,\n    active: PropTypes.bool,\n  }),\n};\nexport default AddDeviceSensor;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from \"react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CCard,\n} from \"@coreui/react\";\nimport {\n  addSensorConfiguration,\n  EditSensorConfigurationData,\n} from \"src/hooks/useDevicesSensors\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst AddSensorConfigration = ({ data, sensorData }) => {\n  const { mutate: AddSensorConfiguration } = useMutation(\n    addSensorConfiguration\n  );\n  const { mutate: editSensorConfiguration } = useMutation(\n    EditSensorConfigurationData\n  );\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [validated, setValidated] = useState(false);\n  const [tempOneChecked, setTempOneChecked] = useState(false);\n  const [tempTwoChecked, setTempTwoChecked] = useState(false);\n  const [co2Checked, setCo2Checked] = useState(false);\n  const [humidityChecked, setHumidityChecked] = useState(false);\n  const { dispatch } = useLoader();\n  const { setShowToast } = useGlobalInfo();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const sensorId = localStorage.getItem(\"sensorId\");\n  const deviceId = localStorage.getItem(\"deviceid\");\n\n  const [tempOne, settempOne] = useState({\n    property: \"temp\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"description\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [tempTwo, settempTwo] = useState({\n    property: \"temp2\",\n    name: \"\",\n    maxvalue: 0,\n    minvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [co2, setco2] = useState({\n    property: \"co2\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [humidity, sethumidity] = useState({\n    property: \"humidity\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  // useEffect(() => {\n  //   if (data) {\n  //     //debugger\n  //     const propertyMap = {\n  //       temp: 'tempOne',\n  //       temp2: 'tempTwo',\n  //       co2: 'co2',\n  //       humidity: 'humidity',\n  //     }\n  //     const defaultProperties = {\n  //       name: '',\n  //       minvalue: '',\n  //       maxvalue: '',\n  //       unit: '',\n  //       description: '',\n  //       deviceId: '',\n  //       // sensorId: '',\n  //       is_hidden: false,\n  //     }\n\n  //     const mappedData = Object.keys(propertyMap).map((property) => {\n  //       const item = data.find((item) => item.property === property)\n\n  //       if (item) {\n  //         // Exclude 'id' from the item if it exists\n  //         const { id, ...rest } = item\n  //         return {\n  //           property: property,\n  //           ...defaultProperties,\n  //           ...rest,\n  //         }\n  //       } else {\n  //         return {\n  //           property: property,\n  //           ...defaultProperties,\n  //         }\n  //       }\n  //     })\n\n  //     mappedData.forEach((item) => {\n  //       const propertyName = propertyMap[item.property]\n  //       if (propertyName) {\n  //         switch (propertyName) {\n  //           case 'tempOne':\n  //             settempOne(item)\n  //             break\n  //           case 'tempTwo':\n  //             settempTwo(item)\n  //             break\n  //           case 'co2':\n  //             setco2(item)\n  //             break\n  //           case 'humidity':\n  //             sethumidity(item)\n  //             break\n  //           default:\n  //             break\n  //         }\n  //       }\n  //     })\n  //   }\n  // }, [data])\n  useEffect(() => {\n    if (data) {\n      const propertyMap = {\n        temp: \"tempOne\",\n        temp2: \"tempTwo\",\n        co2: \"co2\",\n        humidity: \"humidity\",\n      };\n      const defaultProperties = {\n        name: \"\",\n        minvalue: \"\",\n        maxvalue: \"\",\n        unit: \"\",\n        description: \"\",\n        deviceId: \"\",\n        // sensorId: '',\n        is_hidden: false,\n        is_active: true,\n      };\n\n      const mappedData = Object.keys(propertyMap).map((property) => {\n        const item = data.find((item) => item.property === property);\n\n        if (item) {\n          // Exclude 'date_created' and 'date_updated' from the item if they exist\n          const {\n            date_created,\n            date_updated,\n            is_deleted,\n            updated_by,\n            deviceId,\n            ...rest\n          } = item;\n          return {\n            property: property,\n            ...defaultProperties,\n            ...rest,\n          };\n        } else {\n          return {\n            property: property,\n            ...defaultProperties,\n          };\n        }\n      });\n\n      mappedData.forEach((item) => {\n        const propertyName = propertyMap[item.property];\n        if (propertyName) {\n          switch (propertyName) {\n            case \"tempOne\":\n              settempOne(item);\n              break;\n            case \"tempTwo\":\n              settempTwo(item);\n              break;\n            case \"co2\":\n              setco2(item);\n              break;\n            case \"humidity\":\n              sethumidity(item);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n    }\n  }, [data]);\n  useEffect(() => {\n    if (data) {\n      data.forEach((sensor) => {\n        switch (sensor.property) {\n          case \"temp\":\n            setTempOneChecked(sensor.is_active);\n            break;\n          case \"temp2\":\n            setTempTwoChecked(sensor.is_active);\n            break;\n          case \"co2\":\n            setCo2Checked(sensor.is_active);\n            break;\n          case \"humidity\":\n            setHumidityChecked(sensor.is_active);\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }, [data]);\n\n  const [formData, setFormData] = useState([]);\n  const handleTempOneCheckBoxChange = (checked) => {\n    setTempOneChecked(checked);\n  };\n  const handleTempTwoCheckBoxChange = (checked) => {\n    setTempTwoChecked(checked);\n  };\n  const handleCo2CheckBoxChange = (checked) => {\n    setCo2Checked(checked);\n  };\n  const handleHumidityCheckBoxChange = (checked) => {\n    setHumidityChecked(checked);\n  };\n  const handleTempOneChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    // Check if the value is an empty string\n    if (value === \"\") {\n      settempOne((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return; // Exit the function early if the value is empty\n    }\n\n    // Check if the value can be parsed to a valid number for minvalue and maxvalue\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    // Update the state only if the value is a valid number or it's not minvalue or maxvalue\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      settempOne((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleTempTwoChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      settempTwo((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      settempTwo((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleCo2Change = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      setco2((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      setco2((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleHumidityChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      sethumidity((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      sethumidity((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      //debugger;\n      if (data) {\n        const id = sensorData.sensorid;\n        editSensorConfiguration(\n          { handler, id },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Sensor Configuration Edited Successfully\",\n              }));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data?.title,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      } else {\n        AddSensorConfiguration(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Sensor Configured Successfully\",\n            }));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.title,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      }\n    }, 0);\n  }\n\n  const navigate = useNavigate();\n  const deviceSensor = () => {\n    navigate(\"/devices-sensors\");\n  };\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   const updatedFormData = [];\n  //   if (tempOneChecked) {\n  //     updatedFormData.push(tempOne);\n  //   }\n  //   if (tempTwoChecked) {\n  //     updatedFormData.push(tempTwo);\n  //   }\n  //   if (co2Checked) {\n  //     updatedFormData.push(co2);\n  //   }\n  //   if (humidityChecked) {\n  //     updatedFormData.push(humidity);\n  //   }\n  //   if (data) {\n  //     debugger\n  //     setFormData(updatedFormData);\n  //     saveHandler(updatedFormData);\n  //     deviceSensor();\n  //   } else {\n  //     setFormData(updatedFormData);\n  //     saveHandler(updatedFormData);\n  //     deviceSensor();\n  //   }\n  // };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const updatedFormData = [];\n\n    // Create a helper function to set is_active to true\n    const setTrueIsActive = (item) => ({\n      ...item,\n      is_active: true,\n    });\n\n    if (tempOneChecked) {\n      updatedFormData.push(setTrueIsActive(tempOne));\n    }\n    if (tempTwoChecked) {\n      updatedFormData.push(setTrueIsActive(tempTwo));\n    }\n    if (co2Checked) {\n      updatedFormData.push(setTrueIsActive(co2));\n    }\n    if (humidityChecked) {\n      updatedFormData.push(setTrueIsActive(humidity));\n    }\n\n    if (data) {\n      // Debugging point\n      debugger;\n      setFormData(updatedFormData);\n      saveHandler(updatedFormData);\n      deviceSensor();\n    } else {\n      setFormData(updatedFormData);\n      saveHandler(updatedFormData);\n      deviceSensor();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <CCard\n      className={`table_container_light p-5 ${\n        darkMode ? \"table_container_dark\" : \"\"\n      }`}\n    >\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        {/*Temperature 1*/}\n        <CFormCheck\n          id=\"tempOneCheckbox\"\n          label=\"Temperature 1\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          onChange={(e) => handleTempOneCheckBoxChange(e.target.checked)}\n          checked={tempOneChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"name\"\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={tempOne.name}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"temponeName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={tempOne.minvalue}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"tempMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={tempOne.maxvalue}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"tempMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-label=\"Default select example\"\n            id=\"tempunit\"\n            name=\"unit\"\n            value={tempOne.unit}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n            label=\"Hide on dashboard\"\n          ></CFormLabel>\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"temponedescribe\"\n            rows={3}\n            name=\"description\"\n            value={tempOne.description}\n            onChange={handleTempOneChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/* Temperature 2*/}\n        <CFormCheck\n          id=\"tempTwoCheckbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label=\"Temperature 2\"\n          onChange={(e) => handleTempTwoCheckBoxChange(e.target.checked)}\n          checked={tempTwoChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={tempTwo.name}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"temptwoName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={tempTwo.minvalue}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"validationMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={tempTwo.maxvalue}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"validationMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            id=\"temptwounit\"\n            name=\"unit\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={tempTwo.unit}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            reverse\n            id=\"temptwoCheckbox1\"\n            name=\"hidden\"\n            checked={tempTwo.hidden}\n            onChange={handleTempTwoChange}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            id=\"temptwodescribe\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            rows={3}\n            name=\"description\"\n            value={tempTwo.description}\n            onChange={handleTempTwoChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*CO^2*/}\n        <CFormCheck\n          id=\"co2Checkbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label={\n            <span>\n              CO<sub>2</sub>\n            </span>\n          }\n          onChange={(e) => handleCo2CheckBoxChange(e.target.checked)}\n          checked={co2Checked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={co2.name}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Name is required\"\n            id=\"co2Name\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={co2.minvalue}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"validationMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={co2.maxvalue}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"validationMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            id=\"co2unit\"\n            name=\"unit\"\n            value={co2.unit}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            reverse\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"co2Checkbox1\"\n            name=\"hidden\"\n            checked={co2.hidden}\n            onChange={handleCo2Change}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"co2describe\"\n            rows={3}\n            name=\"description\"\n            value={co2.description}\n            onChange={handleCo2Change}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*Humadity*/}\n        <CFormCheck\n          id=\"humidityCheckbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label=\"Humidity\"\n          onChange={(e) => handleHumidityCheckBoxChange(e.target.checked)}\n          checked={humidityChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={humidity.name}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"humidityName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={humidity.minvalue}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"humidityMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={humidity.maxvalue}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"humidityMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            id=\"humidityunit\"\n            name=\"unit\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={humidity.unit}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            reverse\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"humidityCheckbox1\"\n            name=\"hidden\"\n            checked={humidity.hidden}\n            onChange={handleHumidityChange}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"humiditydescribe\"\n            rows={3}\n            name=\"description\"\n            value={humidity.description}\n            onChange={handleHumidityChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*Button*/}\n        {!data ? (\n          <CCol xs=\"auto\">\n            <CButton variant=\"outline\" onClick={deviceSensor}>\n              Back\n            </CButton>\n          </CCol>\n        ) : null}\n\n        {/* Submit Button */}\n        <CCol xs=\"auto\">\n          <CButton color=\"primary\" type=\"submit\">\n            Configure\n          </CButton>\n        </CCol>\n      </CForm>\n    </CCard>\n  );\n};\n\nexport default AddSensorConfigration;\n\nAddSensorConfigration.propTypes = {\n  data: PropTypes.func.isRequired,\n  sensorData: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    deviceId: PropTypes.number,\n    sensorId: PropTypes.string,\n  }),\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDepartmentStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-admins?name=DepartmentAdmin`\n  );\n  return data;\n};\n\nexport const addDepartmentStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `user/create/departmentAdmin`,\n    payload\n  );\n  return data;\n};\nexport const EditDepartmentStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateDepartmentStaff`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteDepartmentStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDepartmentStaff?userid=${payload.userid}&departmentid=${payload.departmentid}`\n  );\n  return data;\n};\nexport const getAllDepartmentUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-facId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-orgId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-depId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\n\nexport const getAllDepartmentStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\nexport const getAllDepartmentStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\nexport const getAllDepartmentStaffbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-depId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormCheck,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddDepartmentStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [departmentsData, setDepartmentsData] = useState();\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    departmentid: \"\",\n    is_admin: false,\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        departmentid: data.departmentid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const parsedValue = name === \"departmentid\" ? parseInt(value, 10) : value;\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    getAllDepartments();\n  }, []);\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationManufacturerName\"\n        >\n          Department Selection*\n        </CFormLabel>\n        <CFormSelect\n          name=\"departmentid\"\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility.\"\n          id=\"validationDepartment\"\n          value={formData.departmentid}\n          onChange={handleInputChange}\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select Department</option>\n          {departmentsData?.map((item) => {\n            return (\n              <option key={item.departmentid} value={item.departmentid}>\n                {item.departmentname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"ContactNumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Organization DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"organizationDropdown\"\n         value={formData.organizationDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*facility Dropdown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Facility DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"facilityDropdown\"\n         value={formData.facilityDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol>   */}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked });\n          }}\n        />\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Department Staff \" : \"Add Department Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDepartmentStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstname: PropTypes.string,\n      lastname: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      contactNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n      facilityDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddDepartmentStaff;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getDepartmentsData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport {\n  getAllDepartmentStaffData,\n  addDepartmentStaff,\n  EditDepartmentStaff,\n  getAllDepartmentUserData,\n  deleteDepartmentStaff,\n  getAllDepartmentStaffbyOrgID,\n  getAllDepartmentUserbyOrgID,\n  getAllDepartmentStaffbyFacID,\n  getAllDepartmentStaffbyDepID,\n  getAllDepartmentUserbyDepID,\n  getAllDepartmentUserbyFacID,\n} from \"src/hooks/useDepartmentstaff\";\nimport AddDepartmentStaff from \"src/views/forms/add-department-staff-form/add-department-staff\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"departments.departmentname\", label: \"Department\" },\n  { key: \"users.email\", label: \"Contact Email\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"users.phonenumber\", label: \"PhoneNumber\" },\n];\nconst DepartmentStaff = () => {\n  const { dispatch } = useLoader();\n  const { mutate: departmentStaffAdd } = useMutation(addDepartmentStaff);\n  const { mutate: departmentStaffEdit } = useMutation(EditDepartmentStaff);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, departmentsData, setDepartmentsData } = useGlobalInfo();\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [DepartmentStaffData, setdepartmentStaffData] = useState([]);\n  const { mutate: departmentStaff } = useMutation(getAllDepartmentStaffData);\n  const { mutate: departmentUser } = useMutation(getAllDepartmentUserData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const deleteDepartmentStaffById = useMutation(deleteDepartmentStaff);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [deldepstaffId, setDeldepstaffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const navigate = useNavigate();\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartmentStaff() {\n    departmentStaff(\"\", {\n      onSuccess: (data) => {\n        setdepartmentStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartmentUser() {\n    departmentUser(\"\", {\n      onSuccess: (data) => {\n        setdepartmentStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: departmentSatffbyOrgID } = useMutation(\n    getAllDepartmentStaffbyOrgID\n  );\n  function departmentStaffDataFetch(selectedId) {\n    departmentSatffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentSatffbyFacID } = useMutation(\n    getAllDepartmentStaffbyFacID\n  );\n  function departmentStaffDataByOrg(selectedId) {\n    departmentSatffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentSatffbydepID } = useMutation(\n    getAllDepartmentStaffbyDepID\n  );\n  function departmentStaffDataByDep(selectedId) {\n    departmentSatffbydepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyOrgID } = useMutation(\n    getAllDepartmentUserbyOrgID\n  );\n  function departmentUserDataFetch(selectedId) {\n    departmentUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyFacID } = useMutation(\n    getAllDepartmentUserbyOrgID\n  );\n  function departmentUserDataByOrg(selectedId) {\n    departmentUserbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyDepID } = useMutation(\n    getAllDepartmentUserbyDepID\n  );\n  function departmentUserDataByDep(selectedId) {\n    departmentUserbyDepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a department by its ID.\n   * @param {number} departmentId - The ID of the department to be deleted.\n   */\n  const deleteDepartments = (departmentId) => {\n    showLoader();\n    deleteDepartmentStaffById.mutate(departmentId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Department Staff deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"facilityId\") === null ||\n          localStorage.getItem(\"facilityId\") === undefined\n        ) {\n          getAllDepartmentStaff();\n        } else {\n          departmentStaffDataFetch(localStorage.getItem(\"facilityId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        departmentStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Department Staff Created Successfully\",\n            }));\n\n            getAllDepartmentStaff();\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        departmentStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Department Staff Edited Successfully\",\n              }));\n\n              getAllDepartmentStaff();\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const departmentId = localStorage.getItem(\"departmentId\");\n  const handleRoleChange = (e) => {\n    const selectedValue = e.target.value;\n\n    setSelectedRole(selectedValue);\n\n    if (selectedValue === \"Admins\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentStaff();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (organizationId && facilityId && !departmentId) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (selectedValue === \"Users\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentUser();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentUserDataByOrg(organizationId);\n      } else if (organizationId && facilityId && !departmentId) {\n        // Both organizationId and facilityId are selected\n        departmentUserDataFetch(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentUserDataByDep(departmentId);\n      }\n    }\n  };\n  // useEffect(() => {\n  //   if (\n  //     localStorage.getItem('facilityId') === undefined ||\n  //     localStorage.getItem('facilityId') === null\n  //   ) {\n  //     getAllDepartmentStaff()\n  //   } else {\n  //     departmentStaffDataFetch(localStorage.getItem('facilityId'))\n  //   }\n  // }, [localStorage.getItem('facilityId')])\n  // useEffect(() => {\n  //   //debugger;\n\n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === null ||\n  //       organizationId === \"Select Organization\") &&\n  //     (facilityId === undefined ||\n  //       facilityId === null ||\n  //       facilityId === \"Select Facility\") &&\n  //     (departmentId === undefined ||\n  //       departmentId === null ||\n  //       departmentId === \"Select Department\")\n  //   ) {\n  //     // No organizationId, facilityId, or departmentId is selected\n  //     getAllDepartmentStaff();\n  //   } else if (organizationId && !facilityId && !departmentId) {\n  //     // Only organizationId is selected\n  //     departmentStaffDataByOrg(organizationId);\n  //   } else if (organizationId && facilityId !='Select Facility' && !departmentId) {\n  //     // Both organizationId and facilityId are selected\n  //     departmentStaffDataFetch(facilityId);\n  //   } else if (organizationId && facilityId =='Select Facility' && !departmentId) {\n  //     // Both organizationId and facilityId are selected\n  //     departmentStaffDataByOrg(organizationId);\n  //   } else if (organizationId && facilityId && departmentId =='Select Department') {\n  //     // All organizationId, facilityId, and departmentId are selected\n  //     departmentStaffDataFetch(facilityId);\n  //   }else if (organizationId && facilityId && departmentId != 'Select Department') {\n  //     // All organizationId, facilityId, and departmentId are selected\n  //     departmentStaffDataByDep(departmentId);\n  //   }\n  // }, [\n  //   localStorage.getItem(\"OrganizationId\"),\n  //   localStorage.getItem(\"facilityId\"),\n  //   localStorage.getItem(\"departmentId\"),\n  // ]);\n  useEffect(() => {\n    //debugger;\n\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentStaff();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId !== \"Select Facility\" &&\n        !departmentId\n      ) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (\n        organizationId &&\n        facilityId === \"Select Facility\" &&\n        !departmentId\n      ) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        departmentId === \"Select Department\"\n      ) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        departmentId !== \"Select Department\"\n      ) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (!facilityId || facilityId === \"Select Facility\") {\n        // No facilityId or facilityId is 'Select Facility'\n        getAllDepartmentStaff();\n      } else if (!departmentId || departmentId === \"Select Department\") {\n        // Facility is selected but no department is selected\n        departmentStaffDataFetch(facilityId);\n      } else if (departmentId !== \"Select Department\") {\n        // Facility and department are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (departmentPermission) {\n      // Department permission is true, adjust the logic\n      if (!departmentId || departmentId === \"Select Department\") {\n        // No departmentId or departmentId is 'Select Department'\n        getAllDepartmentStaff();\n      } else if (departmentId !== \"Select Department\") {\n        // Department is selected\n        departmentStaffDataByDep(departmentId);\n      }\n    }\n  }, [organizationId, facilityId, departmentId]);\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Department Satff\" : \"Edit Department Staff\"}\n        content={\n          isAddMode ? (\n            <AddDepartmentStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddDepartmentStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Departments Staff\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Department Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {DepartmentStaffData ? (\n          <GenericTable\n            columns={columns}\n            data={DepartmentStaffData}\n            openEditModal={openEditModal}\n            OnDeleteItem={deleteDepartments}\n            deldepstaffId={deldepstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default DepartmentStaff;\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useAllDevicesData } from \"src/hooks/useDevices\";\n// eslint-disable-next-line react/prop-types\nconst AddDeviceStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const { data: allDevices } = useAllDevicesData();\n  const [validated, setValidated] = useState(false);\n  const [deviceId, setDeviceId] = useState();\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    deviceid: 0,\n    is_admin: true,\n  });\n  useEffect(() => {\n    if (data) {\n      // //debugger\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        deviceid: data.users.deviceid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"deviceid\") {\n      // Parse the \"deviceid\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDeviceSelection\"\n        >\n          Equipment Selection*\n        </CFormLabel>\n        <CFormSelect\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          name=\"deviceid\"\n          value={formData.deviceid}\n          feedbackInvalid=\"Please select a valid Device Selection\"\n          id=\"validationDeviceSelection\"\n          onChange={handleInputChange}\n          required\n        >\n          <option>Select Equipment</option>\n          {allDevices?.data?.map((item) => {\n            return (\n              <option key={item.deviceid} value={item.deviceid}>\n                {item.devicename}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"phonenumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Organization DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"organizationDropdown\"\n         value={formData.organizationDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*facility DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Department DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"facilityDropdown\"\n         value={formData.facilityDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*department DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Department DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"departmentDropdown\"\n         value={formData.departmentDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked })\n          }}\n        />\n      </CCol> */}\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Device Staff \" : \"Add Device Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n      facilityDropdown: PropTypes.string,\n      departmentDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddDeviceStaff;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDeviceStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/find-admins?name=DeviceAdmin`);\n  return data;\n};\n\nexport const addDeviceStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`user/create/deviceAdmin`, payload);\n  return data;\n};\nexport const EditDeviceStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateDeviceStaff`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteDeviceStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDeviceStaff?userid=${payload.userid}&deviceid=${payload.deviceid}`\n  );\n  return data;\n};\n\nexport const getAllDeviceUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=DeviceUser`\n  );\n  return data;\n};\nexport const getAllDeviceUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-depId/${id}?name=DeviceUser`\n  );\n  return data;\n};\n\nexport const getAllDeviceStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-depId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\nexport const getAllDeviceStaffbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\nexport const getAllDeviceStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllDevicesData,\n  deleteDevice,\n  getAllDevicesById,\n} from \"src/hooks/useDevices\";\nimport AddDeviceStaff from \"src/views/forms/add-device-staff-form/add-device-staff\";\nimport {\n  getAllDeviceStaffData,\n  getAllDeviceUserData,\n} from \"src/hooks/useDeviceStaff\";\nimport {\n  addDeviceStaff,\n  EditDeviceStaff,\n  deleteDeviceStaff,\n  getAllDeviceStaffbyOrgID,\n  getAllDeviceUserbyOrgID,\n  getAllDeviceStaffbyDepID,\n  getAllDeviceStaffbyFacID,\n} from \"src/hooks/useDeviceStaff\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"users.email\", label: \"Email\" },\n  { key: \"users.phonenumber\", label: \"Contact Number\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"devices.devicename\", label: \"Device\" },\n];\nconst DevicesStaff = () => {\n  const { dispatch } = useLoader();\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const departmentId = localStorage.getItem(\"departmentId\");\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, devicesData, setDevicesData } = useGlobalInfo();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const navigate = useNavigate();\n  const [DeviceStaffData, setdeviceStaffData] = useState([]);\n  const { mutate: deviceStaff } = useMutation(getAllDeviceStaffData);\n  const { mutate: deviceUser } = useMutation(getAllDeviceUserData);\n  const { mutate: deviceStaffAdd } = useMutation(addDeviceStaff);\n  const { mutate: deviceStaffEdit } = useMutation(EditDeviceStaff);\n  const deleteDeviceStaffById = useMutation(deleteDeviceStaff);\n  const [deldevstaffId, setDeldevstaffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a device by its ID.\n   * @param {number} deviceId - The ID of the device to be deleted.\n   */\n  const deleteDevices = (deviceId) => {\n    //debugger;\n    showLoader();\n    deleteDeviceStaffById.mutate(deviceId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device Staff deleted Successfully\",\n        }));\n        // refetchDevices()\n        if (\n          localStorage.getItem(\"departmentId\") === null ||\n          localStorage.getItem(\"departmentId\") === undefined\n        ) {\n          getAllDeviceStaff();\n        } else {\n          getAllDeviceStaff(localStorage.getItem(\"departmentId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n\n  function getAllDeviceStaff() {\n    deviceStaff(\"\", {\n      onSuccess: (data) => {\n        setdeviceStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDeviceUser() {\n    deviceUser(\"\", {\n      onSuccess: (data) => {\n        setdeviceStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: deviceSatffbyOrgID } = useMutation(getAllDeviceStaffbyOrgID);\n  function deviceStaffDataFetch(selectedId) {\n    deviceSatffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceSatffbyDepID } = useMutation(getAllDeviceStaffbyDepID);\n  function deviceStaffDataByOrg(selectedId) {\n    deviceSatffbyDepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceSatffbyFacID } = useMutation(getAllDeviceStaffbyFacID);\n  function deviceStaffDataByFac(selectedId) {\n    deviceSatffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceUserbyOrgID } = useMutation(getAllDeviceUserbyOrgID);\n  function deviceUserDataFetch(selectedId) {\n    deviceUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  // useEffect(() => {\n  //   if (\n  //     localStorage.getItem('departmentId') === undefined ||\n  //     localStorage.getItem('departmentId') === null\n  //   ) {\n  //     getAllDeviceStaff()\n  //   } else {\n  //     deviceStaffDataFetch(localStorage.getItem('departmentId'))\n  //   }\n  // }, [localStorage.getItem('departmentId')])\n  useEffect(() => {\n    //debugger;\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDeviceStaff();\n      } else if (\n        organizationId &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // Only organizationId is selected\n        deviceStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // Both organizationId and facilityId are selected\n        deviceStaffDataByFac(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        deviceStaffDataFetch(departmentId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (\n        (!facilityId || facilityId === \"Select Facility\") &&\n        (!departmentId || departmentId === \"Select Department\")\n      ) {\n        // No facilityId or facilityId is 'Select Facility' and no departmentId or departmentId is 'Select Department'\n        getAllDeviceStaff();\n      } else if (\n        departmentId &&\n        facilityId &&\n        departmentId !== \"Select Department\"\n      ) {\n        // Facility is selected, department is selected\n        deviceStaffDataFetch(departmentId);\n      } else if (\n        departmentId &&\n        facilityId &&\n        departmentId == \"Select Department\"\n      ) {\n        // Facility is selected, department is selected\n        deviceStaffDataByFac(facilityId);\n      } else if (facilityId) {\n        //debugger;\n        // Only facility is selected, department is 'Select Department'\n        deviceStaffDataByFac(facilityId);\n      }\n    } else if (departmentPermission) {\n      //debugger\n      // Department permission is true, adjust the logic\n      if (!departmentId || departmentId === \"Select Department\") {\n        // No departmentId or departmentId is 'Select Department'\n        getAllDeviceStaff();\n      } else {\n        // Department is selected\n        deviceStaffDataFetch(departmentId);\n      }\n    } else if (devicePermission) {\n      // Device permission is true\n      getAllDeviceStaff();\n    }\n  }, [\n    organizationPermission,\n    facilityPermission,\n    departmentPermission,\n    devicePermission,\n    organizationId,\n    facilityId,\n    departmentId,\n  ]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        // //debugger\n        deviceStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Staff Created Successfully\",\n            }));\n\n            if (\n              (organizationId === undefined ||\n                organizationId === null ||\n                organizationId === \"Select Organization\") &&\n              (facilityId === undefined ||\n                facilityId === null ||\n                facilityId === \"Select Facility\") &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // No organizationId, facilityId, or departmentId selected\n              getAllDeviceStaff();\n            } else if (\n              organizationId &&\n              (facilityId === undefined ||\n                facilityId === null ||\n                facilityId === \"Select Facility\") &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // Only organizationId is selected\n              deviceStaffDataByOrg(organizationId);\n            } else if (\n              organizationId &&\n              facilityId &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // Both organizationId and facilityId are selected\n              deviceStaffDataByFac(facilityId);\n            } else if (organizationId && facilityId && departmentId) {\n              // All organizationId, facilityId, and departmentId are selected\n              deviceStaffDataFetch(departmentId);\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        deviceStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Staff Edited Successfully\",\n              }));\n\n              if (\n                (organizationId === undefined ||\n                  organizationId === null ||\n                  organizationId === \"Select Organization\") &&\n                (facilityId === undefined ||\n                  facilityId === null ||\n                  facilityId === \"Select Facility\") &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // No organizationId, facilityId, or departmentId selected\n                getAllDeviceStaff();\n              } else if (\n                organizationId &&\n                (facilityId === undefined ||\n                  facilityId === null ||\n                  facilityId === \"Select Facility\") &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // Only organizationId is selected\n                deviceStaffDataByOrg(organizationId);\n              } else if (\n                organizationId &&\n                facilityId &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // Both organizationId and facilityId are selected\n                deviceStaffDataByFac(facilityId);\n              } else if (organizationId && facilityId && departmentId) {\n                // All organizationId, facilityId, and departmentId are selected\n                deviceStaffDataFetch(departmentId);\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  // const handleRoleChange = (e) => {\n  //   const selectedValue = e.target.value\n\n  //   setSelectedRole(selectedValue)\n\n  //   if (selectedValue === 'Admins') {\n  //     if (\n  //       localStorage.getItem('departmentId') === undefined ||\n  //       localStorage.getItem('departmentId') === null\n  //     ) {\n  //       getAllDeviceStaff()\n  //     } else {\n  //       deviceStaffDataFetch(localStorage.getItem('departmentId'))\n  //     }\n  //   } else if (selectedValue === 'Users') {\n  //     if (\n  //       localStorage.getItem('departmentId') === undefined ||\n  //       localStorage.getItem('departmentId') === null\n  //     ) {\n  //       getAllDeviceUser()\n  //     } else {\n  //       deviceUserDataFetch(localStorage.getItem('departmentId'))\n  //     }\n  //   }\n  // }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Equipment Staff\" : \"Edit Equipment Staff\"}\n        content={\n          isAddMode ? (\n            <AddDeviceStaff closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddDeviceStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n            Equipment Staff\n            </h3>\n          </CCol>\n          {/* <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? 'select-dark' : ''}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol> */}\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Equipment Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {devicesData ? (\n          <GenericTable\n            columns={columns}\n            data={DeviceStaffData}\n            OnDeleteItem={deleteDevices}\n            openEditModal={openEditModal}\n            deldevstaffId={deldevstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default DevicesStaff;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllFacilitiesStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-admins?name=FacilityAdmin`\n  );\n  return data;\n};\nexport const getAllFacilitiesStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=FacilityAdmin`\n  );\n  return data;\n};\nexport const getAllFacilitiesStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=FacilityAdmin`\n  );\n  return data;\n};\n\nexport const addFacilityStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `user/create/facilityAdmin`,\n    payload\n  );\n  return data;\n};\n\nexport const EditFacilityStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateFacilityStaff`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const deleteFacilityStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteFacilityStaff?userid=${payload.userid}&facilityid=${payload.facilityid}`\n  );\n  return data;\n};\n\nexport const getAllFacilitiesUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=FacilityUser`\n  );\n  return data;\n};\n\nexport const getAllFacilitiesUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-orgId/${id}?name=FacilityUser`\n  );\n  return data;\n};\nexport const getAllFacilitiesUserbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-facId/${id}?name=FacilityUser`\n  );\n  return data;\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport { useMutation } from \"react-query\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddFacilityStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [facilityData, setFacilityData] = useState([]);\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    facilityid: \"\",\n    is_admin: false,\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        facilityid: data.facilityid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"facilityid\") {\n      // Parse the \"facilityid\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      // //debugger\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  function getAllFacilities() {\n    // // //debugger\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  useEffect(() => {\n    getAllFacilities();\n  }, []);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility*\n        </CFormLabel>\n        <CFormSelect\n          name=\"facilityid\"\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility.\"\n          id=\"validationFacility\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.facilityid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n        >\n          <option>Select Facility</option>\n          {facilityData?.map((item) => {\n            return (\n              <option key={item.facilityid} value={item.facilityid}>\n                {item.name}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstName\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastName\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"ContactNumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked });\n          }}\n        />\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Facility Staff \" : \"Add Facility Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddFacilityStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddFacilityStaff;\n","// /* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllFacilitiesStaffData,\n  addFacilityStaff,\n  EditFacilityStaff,\n  deleteFacilityStaff,\n  getAllFacilitiesUserData,\n  getAllFacilitiesUserbyOrgID,\n  getAllFacilitiesStaffbyOrgID,\n  getAllFacilitiesStaffbyFacID,\n  getAllFacilitiesUserbyFacID,\n} from \"src/hooks/useFacilitiesStaff\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport AddFacilityStaff from \"src/views/forms/add-facility-staff-form/add-facility-staff\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"users.email\", label: \"Email\" },\n  { key: \"users.phonenumber\", label: \"Contact Number\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"facilities.name\", label: \"Facility\" },\n];\nconst FacilitiesStaff = () => {\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: facilityStaffAdd } = useMutation(addFacilityStaff);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { mutate: facilityStaffEdit } = useMutation(EditFacilityStaff);\n  const [facilityStaffData, setFacilityStaffData] = useState([]);\n  const { mutate: facilityStaff } = useMutation(getAllFacilitiesStaffData);\n  const { mutate: facilityUser } = useMutation(getAllFacilitiesUserData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteFacilityStaffById = useMutation(deleteFacilityStaff);\n  const [delfacstaffId, setDelfacsatffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: facilityStaffbyOrgID } = useMutation(\n    getAllFacilitiesStaffbyOrgID\n  );\n  const { mutate: facilityUserbyOrgID } = useMutation(\n    getAllFacilitiesUserbyOrgID\n  );\n  const { mutate: facilityStaffbyFacID } = useMutation(\n    getAllFacilitiesStaffbyFacID\n  );\n  const { mutate: facilityUserbyFacID } = useMutation(\n    getAllFacilitiesUserbyFacID\n  );\n\n  function facilitiesStaffDataFetch(selectedId) {\n    facilityStaffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesStaffDataBYfacId(selectedId) {\n    facilityStaffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesUserDataFetch(selectedId) {\n    //debugger;\n    facilityUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        //debugger;\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesUserDataByFacId(selectedId) {\n    //debugger;\n    facilityUserbyFacID(selectedId, {\n      onSuccess: (data) => {\n        //debugger;\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n\n  const handleRoleChange = (e) => {\n    const selectedValue = e.target.value;\n\n    setSelectedRole(selectedValue);\n\n    if (selectedValue === \"Admins\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesStaff();\n      } else if (organizationId && facilityId) {\n        // Only organizationId and facilityId are selected\n        facilitiesStaffDataBYfacId(facilityId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesStaffDataFetch(organizationId);\n      }\n    } else if (selectedValue === \"Users\") {\n      const organizationId = localStorage.getItem(\"OrganizationId\");\n      const facilityId = localStorage.getItem(\"facilityId\");\n\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesUser();\n      } else if (organizationId && facilityId) {\n        // Only organizationId and facilityId are selected\n        facilitiesUserDataByFacId(facilityId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesUserDataFetch(organizationId);\n      }\n    }\n  };\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes a Fecility by its ID.\n   * @param {number} facilityId - The ID of the Facility to be deleted.\n   */\n  const deleteFacilities = (facilityId) => {\n    showLoader();\n    deleteFacilityStaffById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Facility Staff deleted Successfully\",\n        }));\n\n        getAllFacilitiesStaff();\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllFacilitiesStaff() {\n    facilityStaff(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllFacilitiesUser() {\n    hideLoader();\n    facilityUser(\"\", {\n      onSuccess: (data) => {\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  // useEffect(() => {\n  //   //debugger\n  //   if (\n  //     localStorage.getItem('OrganizationId') === undefined ||\n  //     localStorage.getItem('OrganizationId') === null ||\n  //     localStorage.getItem('OrganizationId') === 'Select Organization'\n  //   ) {\n  //     getAllFacilitiesStaff()\n  //   } else {\n  //     //debugger\n  //     facilitiesStaffDataFetch(localStorage.getItem('OrganizationId'))\n  //   }\n  // }, [localStorage.getItem('OrganizationId')])\n  // useEffect(() => {\n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === null ||\n  //       organizationId === \"Select Organization\") &&\n  //     (facilityId === undefined ||\n  //       facilityId === null ||\n  //       facilityId === \"Select Facility\")\n  //   ) {\n  //     getAllFacilitiesStaff();\n  //   } else if (\n  //     organizationId &&\n  //     facilityId &&\n  //     facilityId != \"Select Facility\"\n  //   ) {\n  //     facilitiesStaffDataBYfacId(facilityId);\n  //   } else if (\n  //     organizationId &&\n  //     facilityId &&\n  //     facilityId == \"Select Facility\"\n  //   ) {\n  //     //debugger;\n  //     facilitiesStaffDataFetch(organizationId);\n  //   } else if (organizationId) {\n  //     // Only organizationId is selected\n  //     facilitiesStaffDataFetch(organizationId);\n  //   }\n  // }, [\n  //   localStorage.getItem(\"OrganizationId\"),\n  //   localStorage.getItem(\"facilityId\"),\n  // ]);\n  useEffect(() => {\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesStaff();\n      } else if (\n        organizationId &&\n        facilityId &&\n        facilityId !== \"Select Facility\"\n      ) {\n        facilitiesStaffDataBYfacId(facilityId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        facilityId === \"Select Facility\"\n      ) {\n        facilitiesStaffDataFetch(organizationId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesStaffDataFetch(organizationId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (!facilityId || facilityId === \"Select Facility\") {\n        getAllFacilitiesStaff();\n      } else {\n        facilitiesStaffDataBYfacId(facilityId);\n      }\n    }\n  }, [organizationId, facilityId]);\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        // // //debugger\n        facilityStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Facility Staff Created Successfully\",\n            }));\n            // if (\n            //   localStorage.getItem('OrganizationId') === null ||\n            //   localStorage.getItem('OrganizationId') === undefined\n            // ) {\n            getAllFacilitiesStaff();\n            // } else {\n            //   facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n            // }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        // //debugger\n        facilityStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Facility Staff Edited Successfully\",\n              }));\n\n              getAllFacilitiesStaff();\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Facility Staff\" : \"Edit Facility Staff\"}\n        content={\n          isAddMode ? (\n            <AddFacilityStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddFacilityStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Facility Staff\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Facility Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {facilityStaffData ? (\n          <GenericTable\n            columns={columns}\n            OnDeleteItem={deleteFacilities}\n            data={facilityStaffData}\n            openEditModal={openEditModal}\n            delfacstaffId={delfacstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default FacilitiesStaff;\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLocationPin, cilPaperPlane, cilPhone } from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport useDataStore from \"src/store/state\";\n\n// eslint-disable-next-line react/prop-types\nconst AddStaffForm = ({ closeModal, saveHandler, data }) => {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const { dispatch } = useLoader();\n  const dataOrganization = useDataStore((state) => state.data);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    customerid: \"\",\n    isSuperAdmin: false,\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        customerid: data.customerid,\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        address: data.address,\n        phonenumber: data.phonenumber,\n      }));\n    }\n  }, [data]);\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"customerid\") {\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  useEffect(() => {}, [darkMode]);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Phone Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhonenumber\"\n        >\n          Phone Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Phonenumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Phone Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit User \" : \"Add User \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddStaffForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      roleid: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default AddStaffForm;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CButton, CCol, CForm, CFormSelect, CFormLabel } from \"@coreui/react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { getDepartmentsData, getFacilitiesData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { getAllDevicesData } from \"src/hooks/useDevices\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nconst AssignStaffForm = ({\n  closeModal,\n  assignHandler,\n  data,\n  selectedRole,\n  UnAssignHandler,\n}) => {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const [validated, setValidated] = useState(false);\n  const [facilityData, setFacilityData] = useState();\n  const [departmentsData, setDepartmentsData] = useState();\n  const [deviceData, setDeviceData] = useState();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const { dispatch } = useLoader();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [formData, setFormData] = useState({\n    userid: data.userid,\n    is_admin: isAdmin,\n  });\n  //   useEffect(() => {\n  //     if (data) {\n  //       setFormData(() => ({\n  //         facilityid: data?.facilityid,\n  //         departmentid: data?.departmentid,\n  //         deviceid: data?.deviceid,\n  //       }));\n  //     }\n  //   }, [data]);\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data);\n        },\n        onError: (error) => {},\n      });\n    }\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  const handleInputChange = (e) => {\n    console.log(e.target.value);\n    const { name, value, type, checked } = e.target;\n    console.log(e.target.value);\n    const parsedValue =\n      (name === \"deviceid\" ||\n        name === \"facilityid\" ||\n        name === \"departmentid\") &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getAllDev } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    getAllDev(\"\", {\n      onSuccess: (data) => {\n        setDeviceData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleCheckboxChange = (e) => {\n    setIsAdmin(e.target.checked);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n    debugger;\n    setFormData({\n      ...formData,\n      is_admin: isAdmin,\n    });\n\n    if (form.checkValidity() === true) {\n      console.log(formData);\n      debugger;\n      showLoader();\n      assignHandler(formData);\n      closeModal();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  useEffect(() => {\n    getAllFacilities();\n    getAllDepartments();\n    getAllDevices();\n  }, []);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {selectedRole === \"Assigned\" ? (\n        <>\n          <h4 className=\"ms-3 pt-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n            Are you sure you want to UnAssign this User ?{\" \"}\n          </h4>\n\n          <CCol\n            xs={11}\n            className={`modal-light ${darkMode ? \"modal-dark\" : \"\"}`}\n          >\n            <CButton\n              color=\"danger\"\n              className=\"float-end ms-2\"\n              onClick={() => {\n                UnAssignHandler(data);\n              }}\n            >\n              UnAssign\n            </CButton>\n          </CCol>\n        </>\n      ) : (\n        <>\n          {\" \"}\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationManufacturerName\"\n            >\n              Facility*\n            </CFormLabel>\n            <CFormSelect\n              name=\"facilityid\"\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid facility.\"\n              id=\"validationFacilities\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              value={formData.facilityid}\n              onChange={handleInputChange}\n              disabled={formData.departmentid || formData.deviceid}\n            >\n              <option>Facilities</option>\n              {facilityData?.data?.map((item) => {\n                return (\n                  <option key={item.facilityid} value={item.facilityid}>\n                    {item.name}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          {/*Department Selection */}\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationManufacturerName\"\n            >\n              Department Selection*\n            </CFormLabel>\n            <CFormSelect\n              name=\"departmentid\"\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid facility.\"\n              id=\"validationDepartment\"\n              value={formData.departmentid}\n              onChange={handleInputChange}\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              disabled={formData.facilityid || formData.deviceid}\n            >\n              <option>Departments</option>\n              {departmentsData?.data?.map((item) => {\n                return (\n                  <option key={item.departmentid} value={item.departmentid}>\n                    {item.departmentname}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationFacilityName\"\n            >\n              Devices\n            </CFormLabel>\n            <CFormSelect\n              name=\"deviceid\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid Device.\"\n              value={formData.deviceid}\n              onChange={handleInputChange}\n              disabled={formData.facilityid || formData.departmentid}\n            >\n              <option>Devices</option>\n              {deviceData?.data?.map((item) => {\n                return (\n                  <option key={item.deviceid} value={item.deviceid}>\n                    {item.devicename}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          <CCol xs={12}>\n            <div className=\"form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"isAdminCheckbox\"\n                checked={isAdmin}\n                onChange={handleCheckboxChange}\n                style={{ width: \"20px\", height: \"20px\" }}\n              />\n              <label className=\"form-check-label\" htmlFor=\"isAdminCheckbox\">\n                Admin\n              </label>\n            </div>\n          </CCol>\n          <CCol xs={12}>\n            <CButton color=\"primary\" type=\"submit\">\n              {data ? \"Assign\" : \"Assign\"}\n            </CButton>\n          </CCol>\n        </>\n      )}\n    </CForm>\n  );\n};\nAssignStaffForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    deviceName: PropTypes.string,\n    name: PropTypes.string,\n    manufacturerName: PropTypes.string,\n    facilityid: PropTypes.string,\n    department: PropTypes.string,\n    manufacturer: PropTypes.string,\n    system: PropTypes.shape({\n      systemName: PropTypes.string,\n    }),\n  }),\n};\n\nexport default AssignStaffForm;\n","// /* eslint-disable prettier/prettier */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n  getAllassignedUsersData,\n  getAllassignedUsersDataByOrg,\n  addUser,\n  deleteUsers,\n  EditUser,\n  assignFacilityUser,\n  assignDepartmentUser,\n  assignDeviceUser,\n  UnassignFacilityUser,\n  UnassignDepartmentUser,\n  UnassignDeviceUser,\n} from \"src/hooks/useUsers\";\nimport AddStaffForm from \"src/views/forms/add-staff-form/add-staff-form\";\nimport AssignStaffForm from \"src/views/forms/assign-staff-form/assign-staff-form\";\nconst columns = [\n  { key: \"rolename\", label: \"Role\" },\n  { key: \"name\", label: \"Assigned To\" },\n  { key: \"firstname\", label: \"Name\" },\n  { key: \"email\", label: \"Email\" },\n  { key: \"phonenumber\", label: \"Contact Number\" },\n  { key: \"address\", label: \"Address\" },\n];\nconst Users = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: UserAdd } = useMutation(addUser);\n  const { mutate: userEdit } = useMutation(EditUser);\n  const [usersData, setUsersData] = useState([]);\n  const [selectedRole, setSelectedRole] = useState(\"UnAssigned\");\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const { mutate: UsersByOrg } = useMutation(getAllUnassignedUsersDataByOrg);\n  const { mutate: AssignedUsers } = useMutation(getAllassignedUsersData);\n  const { mutate: AssignedUsersByOrg } = useMutation(\n    getAllassignedUsersDataByOrg\n  );\n  const { mutate: assignUserToFac } = useMutation(assignFacilityUser);\n  const { mutate: assignUserToDep } = useMutation(assignDepartmentUser);\n  const { mutate: assignUserToDev } = useMutation(assignDeviceUser);\n  const { mutate: UnassignUserToFac } = useMutation(UnassignFacilityUser);\n  const { mutate: UnassignUserToDep } = useMutation(UnassignDepartmentUser);\n  const { mutate: UnassignUserToDev } = useMutation(UnassignDeviceUser);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteUserById = useMutation(deleteUsers);\n  const [deluserid, setDeluserId] = useState(true);\n  const [AssignModalOpen, setIsAssignModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const closeAssignModal = () => {\n    setIsAssignModalOpen(false);\n  };\n\n  const deleteFacilities = (user) => {\n    showLoader();\n    deleteUserById.mutate(user.userid, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"User deleted Successfully\",\n        }));\n\n        getAllUsers();\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  const [userData, setUserData] = useState([]);\n  const openAssignModal = (data) => {\n    setUserData(data);\n    setIsAssignModalOpen(true);\n  };\n\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllUsersByOrg(orgId) {\n    UsersByOrg(orgId, {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllAssignedUsers() {\n    AssignedUsers(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllAssignedUsersByOrg(orgId) {\n    AssignedUsersByOrg(orgId, {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n\n  useEffect(() => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n    if (orgId) {\n      getAllUsersByOrg(orgId);\n    } else {\n      getAllUsers();\n    }\n  }, []);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        UserAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"User Created Successfully\",\n            }));\n\n            getAllUsers();\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        userEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"User Edited Successfully\",\n              }));\n\n              getAllUsers();\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data?.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const assignHandler = (handler) => {\n    hideLoader();\n    if (handler.facilityid) {\n      assignUserToFac(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Facility Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (handler.departmentid) {\n      assignUserToDep(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Department Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (handler.deviceid) {\n      assignUserToDev(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Device Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    }\n    closeAssignModal();\n  };\n  const UnAssignHandler = (handler) => {\n    debugger;\n    const { facilityid, departmentid, deviceid } = handler;\n\n    if (facilityid) {\n      UnassignUserToFac(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Facility Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (departmentid) {\n      UnassignUserToDep(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Department Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (deviceid) {\n      UnassignUserToDev(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Device Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    }\n    closeAssignModal();\n  };\n\n  const handleRoleChange = (selectedRole) => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n\n    switch (selectedRole) {\n      case \"Assigned\":\n        if (orgId) {\n          setSelectedRole(\"Assigned\");\n          getAllAssignedUsersByOrg(orgId);\n        } else {\n          setSelectedRole(\"Assigned\");\n          getAllAssignedUsers();\n        }\n        break;\n\n      case \"UnAssigned\":\n        if (orgId) {\n          setSelectedRole(\"UnAssigned\");\n          getAllUsersByOrg(orgId);\n        } else {\n          setSelectedRole(\"UnAssigned\");\n          getAllUsers();\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add User\" : \"Edit User\"}\n        content={\n          isAddMode ? (\n            <AddStaffForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddStaffForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <GenericModal\n        title={selectedRole === \"Assigned\" ? \"UnAssign User\" : \"Assign User\"}\n        content={\n          <AssignStaffForm\n            closeModal={closeModal}\n            assignHandler={assignHandler}\n            data={userData}\n            selectedRole={selectedRole}\n            UnAssignHandler={UnAssignHandler}\n          />\n        }\n        isOpen={AssignModalOpen}\n        onClose={closeAssignModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Users\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={(e) => handleRoleChange(e.target.value)}\n            >\n              <option value=\"UnAssigned\">UnAssigned</option>\n              <option value=\"Assigned\">Assigned</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Users\n            </CButton>\n          </CCol>\n        </CRow>\n        {usersData ? (\n          <GenericTable\n            columns={columns\n              .filter((column) => {\n                return !(\n                  selectedRole.toLowerCase() === \"unassigned\" &&\n                  (column.key === \"rolename\" || column.key === \"name\")\n                );\n              })\n              .map((column) => {\n                return column;\n              })}\n            OnDeleteItem={deleteFacilities}\n            selectedRole={selectedRole}\n            data={usersData}\n            openEditModal={openEditModal}\n            delUserId={deluserid}\n            openAssignModal={openAssignModal}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Users;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cibMailchimp,\n  cil3d,\n  cil4k,\n  cilActionUndo,\n  cilAirplay,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilTerminal,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport useDataStore from \"src/store/state\";\nimport { getFacilitiesData } from \"src/hooks/useAuth\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n} from \"src/hooks/useUsers\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport { useMutation } from \"react-query\";\nconst AddDepartmentForm = ({ closeModal, saveHandler, data }) => {\n  const orgId =\n    localStorage.getItem(\"OrganizationId\") &&\n    localStorage.getItem(\"OrganizationId\") !== \"Select Organization\";\n  const facId =\n    localStorage.getItem(\"facilityId\") &&\n    localStorage.getItem(\"facilityId\") !== \"Select Facility\";\n  const dataOrganization = useDataStore((state) => state.data);\n  const { dispatch } = useLoader();\n  const [facilityData, setFacilityData] = useState();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const [formData, setFormData] = useState({\n    departmentname: \"\",\n    // email: \"\",\n    description: \"\",\n    customerid: orgId ? Number(localStorage.getItem(\"OrganizationId\")) : 0,\n    facilityid: facId ? Number(localStorage.getItem(\"facilityId\")) : 0,\n    userid: 0,\n  });\n  useEffect(() => {\n    if (data) {\n      facilitiesDataFetch(data?.customerid);\n      setFormData(() => ({\n        departmentname: data?.departmentname,\n        // email: data?.email,\n        description: data?.description,\n        customerid: data?.customerid,\n        facilityid: data?.facilityid,\n        userid: data?.userid,\n      }));\n    }\n  }, [data]);\n  const [UserData, setUsersData] = useState([]);\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data);\n        },\n        onError: (error) => {},\n      });\n    }\n  }\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    console.log(e.target.value);\n    const parsedValue =\n      (name === \"customerid\" || name === \"facilityid\" || name === \"userid\") &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n    if (name === \"customerid\") {\n      facilitiesDataFetch(value);\n    }\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  useEffect(() => {\n    getAllUsers();\n    if (facilityPermission) {\n      getAllFacilities();\n    }\n  }, [facilityPermission]);\n  // useEffect(() => {\n  //   if (formData.customerid !== '') {\n  //     facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n  //   }\n  // }, [])\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {!orgId && organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n\n      {/* Facility */}\n      {!facId && facilityPermission && (\n        <CCol md={12}>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Facility*\n          </CFormLabel>\n          <CFormSelect\n            name=\"facilityid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationFacility\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={formData.facilityid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Facility</option>\n            {facilityData?.data?.map((item) => {\n              return (\n                <option key={item.facilityid} value={item.facilityid}>\n                  {item.name}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Department Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDepartmentName\"\n        >\n          Department Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"departmentname\"\n            value={formData.departmentname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Department Name is required\"\n            id=\"validationDepartmentName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Select User\n        </CFormLabel>\n        <CFormSelect\n          name=\"userid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid User.\"\n          // id=\"validationOrganization\"\n          value={formData.userid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select User</option>\n          {UserData?.data?.map((item) => {\n            return (\n              <option key={item.userid} value={item.userid}>\n                {item.firstname}\n                {item.lastname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/*Department Email */}\n      {/* <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDepartmentEmail\"\n        >\n          Department Email*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilEnvelopeClosed} alt=\"Departmentemail\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            aria-describedby=\"validationDepartmentEmail\"\n            feedbackInvalid=\"Department Email is required.\"\n            id=\"validationDepartmentEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol> */}\n      {/*Description*/}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"description\"\n        >\n          Description*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"description\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"description\"\n            value={formData.description}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Description is required\"\n            id=\"validationDescription\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Active*/}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Active\n        </CFormLabel>\n        <CFormCheck id=\"flexCheckDefault\" label=\" \" />\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Department\" : \"Add Department\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDepartmentForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    departmentname: PropTypes.string,\n    system: PropTypes.string,\n    email: PropTypes.string,\n    description: PropTypes.string,\n    customerid: PropTypes.number,\n    facilityid: PropTypes.number,\n    userid: PropTypes.number,\n  }),\n};\n\nexport default AddDepartmentForm;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getDepartmentsData } from \"src/hooks/useAuth\";\nimport {\n  useAllDepartmentsData,\n  deleteDepartment,\n  addDepartment,\n  EditDepartment,\n  getAllDepartmentsData,\n} from \"src/hooks/useDepartments\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllDepByOrgId } from \"src/hooks/useAuth\";\nimport AddDepartmentForm from \"src/views/forms/add-department-form/add-department-form\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"departmentname\", label: \"Department Name\" },\n  { key: \"email\", label: \"Contact Email\" },\n  { key: \"description\", label: \"Description\" },\n  // { key: 'active', label: 'Active' },\n  // { key: 'id', label: 'ID' },\n  // Add more columns as needed\n];\nconst Department = () => {\n  const { dispatch } = useLoader();\n  const { mutate: departmentAdd } = useMutation(addDepartment);\n  const { mutate: departmentEdit } = useMutation(EditDepartment);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, departmentsData, setDepartmentsData } = useGlobalInfo();\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const deleteDepartmentById = useMutation(deleteDepartment);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [deldepId, setDeldepId] = useState(true);\n  const navigate = useNavigate();\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    showLoader();\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDepartmentsByOrg } = useMutation(getAllDepByOrgId);\n  function departmentsDataFetchByOrg(selectedId) {\n    // showLoader();\n    getDepartmentsByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a department by its ID.\n   * @param {number} departmentId - The ID of the department to be deleted.\n   */\n  const deleteDepartments = (departmentId) => {\n    showLoader();\n    deleteDepartmentById.mutate(departmentId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Department deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"facilityId\") === null ||\n          localStorage.getItem(\"facilityId\") === undefined\n        ) {\n          getAllDepartments();\n        } else {\n          departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        departmentAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Department Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"facilityId\") === null ||\n              localStorage.getItem(\"facilityId\") === undefined\n            ) {\n              getAllDepartments();\n            } else {\n              departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        departmentEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Department Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"facilityId\") === null ||\n                localStorage.getItem(\"facilityId\") === undefined\n              ) {\n                getAllDepartments();\n              } else {\n                departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  // useEffect(() => {\n  //   if (\n  //     (localStorage.getItem(\"OrganizationId\") === undefined ||\n  //       localStorage.getItem(\"OrganizationId\") === \"Select Organization\" ||\n  //       localStorage.getItem(\"OrganizationId\") === null) &&\n  //     (localStorage.getItem(\"facilityId\") === undefined ||\n  //       localStorage.getItem(\"facilityId\") === \"Select Facility\" ||\n  //       localStorage.getItem(\"facilityId\") === null)\n  //   ) {\n  //     getAllDepartments();\n  //   } else {\n  //     return;\n  //   }\n  // }, [\n  //   localStorage.getItem(\"facilityId\"),\n  //   localStorage.getItem(\"OrganizationId\"),\n  // ]);\n  // useEffect(() => {\n  //   const organizationId = localStorage.getItem(\"OrganizationId\");\n  //   const facilityId = localStorage.getItem(\"facilityId\");\n  \n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === \"Select Organization\" ||\n  //       organizationId === null) &&\n  //     (facilityId === undefined ||\n  //       // facilityId === \"Select Facility\" ||\n  //       facilityId === null)\n  //   ) {\n  //     getAllDepartments();\n  //   } else if (facilityId === \"Select Facility\") {\n  //     // Call departmentsDataFetchByOrg() when facilityId is \"Select Facility\"\n  //     departmentsDataFetchByOrg(organizationId);\n  //   } else {\n  //     // Additional conditions or actions can be added here if needed\n  //     return;\n  //   }\n  // }, [localStorage.getItem(\"facilityId\"), localStorage.getItem(\"OrganizationId\")]);\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n  \n    if (\n      (organizationId === undefined ||\n        organizationId === \"Select Organization\" ||\n        organizationId === null) &&\n      (facilityId === undefined ||\n        // facilityId === \"Select Facility\" ||\n        facilityId === null)\n    ) {\n      getAllDepartments();\n    } else if (facilityPermission && facilityId === \"Select Facility\") {\n      // Call getAllDepartments when facilityPermission is true and facilityId is \"Select Facility\"\n      getAllDepartments();\n    } else if (facilityId === \"Select Facility\") {\n      // Call departmentsDataFetchByOrg() when facilityId is \"Select Facility\"\n      departmentsDataFetchByOrg(organizationId);\n    } else {\n      // Additional conditions or actions can be added here if needed\n      return;\n    }\n  }, [localStorage.getItem(\"facilityId\"), localStorage.getItem(\"OrganizationId\")]);\n  \n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Department\" : \"Edit Department\"}\n        content={\n          isAddMode ? (\n            <AddDepartmentForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddDepartmentForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Departments\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Department\n            </CButton>\n          </CCol>\n        </CRow>\n        {departmentsData ? (\n          <GenericTable\n            columns={columns}\n            data={departmentsData}\n            openEditModal={openEditModal}\n            OnDeleteItem={deleteDepartments}\n            deldepId={deldepId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Department;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilBuilding, cilSignalCellular0 } from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { getDepartmentsData, getFacilitiesData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n} from \"src/hooks/useUsers\";\nconst AddDeviceForm = ({ closeModal, saveHandler, data }) => {\n  const orgId =\n    localStorage.getItem(\"OrganizationId\") &&\n    localStorage.getItem(\"OrganizationId\") !== \"Select Organization\";\n  const facId =\n    localStorage.getItem(\"facilityId\") &&\n    localStorage.getItem(\"facilityId\") !== \"Select Facility\";\n  const depId =\n    localStorage.getItem(\"departmentId\") &&\n    localStorage.getItem(\"departmentId\") !== \"Select Department\";\n  const dataOrganization = useDataStore((state) => state.data);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const [validated, setValidated] = useState(false);\n  const [facilityData, setFacilityData] = useState();\n  const [departmentsData, setDepartmentsData] = useState();\n  const [UserData, setUsersData] = useState([]);\n  const { dispatch } = useLoader();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [formData, setFormData] = useState({\n    devicename: \"\",\n    manufacturer: \"\",\n    facilityid: orgId ? Number(localStorage.getItem(\"facilityId\")) : 0,\n    departmentid: orgId ? Number(localStorage.getItem(\"departmentId\")) : 0,\n    // active: true,\n    customerid: orgId ? Number(localStorage.getItem(\"OrganizationId\")) : 0,\n    // email: \"\",\n    delaytime: 0,\n    userid: 0,\n  });\n  useEffect(() => {\n    if (data) {\n      // // //debugger\n      // facilitiesDataFetch(data?.customerid)\n      // departmentsDataFetch(data?.departmentid)\n      setFormData(() => ({\n        devicename: data?.devicename,\n        manufacturer: data?.manufacturer,\n        facilityid: data?.facilityid,\n        departmentid: data?.departmentid,\n        customerid: data?.customerid,\n        // email: data?.email,\n        delaytime: data?.delaytime,\n        userid: data?.userid,\n      }));\n    }\n  }, [data]);\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data);\n        },\n        onError: (error) => {},\n      });\n    }\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleInputChange = (e) => {\n    console.log(e.target.value);\n    const { name, value, type, checked } = e.target;\n    console.log(e.target.value);\n    const parsedValue =\n      (name === \"delaytime\" ||\n        name === \"customerid\" ||\n        name === \"facilityid\" ||\n        name === \"departmentid\" ||\n        name === \"userid\") &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n    if (name === \"customerid\") {\n      facilitiesDataFetch(value);\n    } else if (name === \"facilityid\") {\n      departmentsDataFetch(value);\n    }\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  useEffect(() => {\n    getAllUsers();\n    if (facilityPermission) {\n      getAllFacilities();\n    } else if (departmentPermission) {\n      // //debugger\n      getAllDepartments();\n    }\n  }, [facilityPermission]);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {!orgId && organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n\n      {/* Facilities */}\n      {!facId && facilityPermission && (\n        <CCol md={12}>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationManufacturerName\"\n          >\n            Facility*\n          </CFormLabel>\n          <CFormSelect\n            name=\"facilityid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationFacilities\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={formData.facilityid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Facility</option>\n            {facilityData?.data?.map((item) => {\n              return (\n                <option key={item.facilityid} value={item.facilityid}>\n                  {item.name}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/*Department Selection */}\n      {!depId && departmentPermission && (\n        <CCol md={12}>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationManufacturerName\"\n          >\n            Department Selection*\n          </CFormLabel>\n          <CFormSelect\n            name=\"departmentid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationDepartment\"\n            value={formData.departmentid}\n            onChange={handleInputChange}\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Department</option>\n            {departmentsData?.data?.map((item) => {\n              return (\n                <option key={item.departmentid} value={item.departmentid}>\n                  {item.departmentname}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Device Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Select User\n        </CFormLabel>\n        <CFormSelect\n          name=\"userid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid User.\"\n          // id=\"validationOrganization\"\n          value={formData.userid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select User</option>\n          {UserData?.data?.map((item) => {\n            return (\n              <option key={item.userid} value={item.userid}>\n                {item.firstname}\n                {item.lastname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n          Equipment Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"devicename\"\n            value={formData.devicename}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Device Name is required\"\n            id=\"validationDeviceName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Manufacturer Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationManufacturerName\"\n        >\n          Manufacturer Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilSignalCellular0} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"manufacturer\"\n            value={formData.manufacturer}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Manufacturer Name is required\"\n            id=\"validationManufacturerName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Device Name is required\"\n            id=\"validationDeviceName\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol> */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n          Time Delay in Minutes\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"delaytime\"\n            value={formData.delaytime}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Time Delay is required\"\n            id=\"validationDeviceName\"\n            required\n            // disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Device\" : \"Add Device\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    deviceName: PropTypes.string,\n    name: PropTypes.string,\n    manufacturerName: PropTypes.string,\n    facilityid: PropTypes.string,\n    department: PropTypes.string,\n    manufacturer: PropTypes.string, // Added manufacturer validation\n    system: PropTypes.shape({\n      systemName: PropTypes.string, // Added system and systemName validation\n    }),\n  }),\n};\n\nexport default AddDeviceForm;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllDevicesData,\n  useAllDevicesData,\n  addDevice,\n  EditDevice,\n  deleteDevice,\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport AddDeviceForm from \"src/views/forms/add-device-form/add-device-form\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"devicename\", label: \"Equipment Name\" },\n  { key: \"manufacturer\", label: \"Manufacturer\" },\n];\nconst Devices = () => {\n  const { dispatch } = useLoader();\n\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, devicesData, setDevicesData } = useGlobalInfo();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const navigate = useNavigate();\n  const { mutate: getDevices } = useMutation(getAllDevicesData);\n  // const { data, isSuccess, isError, refetch: refetchDevices } = useAllDevicesData()\n  const { mutate: deviceAdd } = useMutation(addDevice);\n  const { mutate: deviceEdit } = useMutation(EditDevice);\n  const deleteDeviceById = useMutation(deleteDevice);\n  const [deldevId, setDeldevId] = useState(true);\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrgID } = useMutation(getAllDevicesByOrgId);\n  function devicesDataByOrg(selectedId) {\n    // showLoader();\n    getDevicesByOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFacID } = useMutation(getAllDevicesByFacId);\n  function devicesDataByFac(selectedId) {\n    // showLoader();\n    getDevicesByFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a device by its ID.\n   * @param {number} deviceId - The ID of the device to be deleted.\n   */\n  const deleteDevices = (deviceId) => {\n    showLoader();\n    deleteDeviceById.mutate(deviceId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device deleted Successfully\",\n        }));\n        // refetchDevices()\n        if (\n          localStorage.getItem(\"departmentId\") === null ||\n          localStorage.getItem(\"departmentId\") === undefined\n        ) {\n          getAllDevices();\n        } else {\n          devicesDataFetch(localStorage.getItem(\"departmentId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllDevices() {\n    getDevices(\"\", {\n      onSuccess: (data) => {\n        setDevicesData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n    const departmentId = localStorage.getItem(\"departmentId\");\n\n    if (departmentId && departmentId !== \"Select Department\") {\n      // Only departmentId is selected\n      devicesDataFetch(departmentId);\n    } else if (facilityId && facilityId !== \"Select Facility\") {\n      // facilityId is selected, prioritize it over organizationId\n      devicesDataByFac(facilityId);\n    } else if (organizationId && organizationId !== \"Select Organization\") {\n      // Only organizationId is selected and it's not \"Select Organization\"\n      devicesDataByOrg(organizationId);\n    } else {\n      // Fallback: getAllDevices\n      getAllDevices();\n    }\n  }, [\n    localStorage.getItem(\"OrganizationId\"),\n    localStorage.getItem(\"facilityId\"),\n    localStorage.getItem(\"departmentId\"),\n  ]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        deviceAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"departmentId\") === null ||\n              localStorage.getItem(\"departmentId\") === undefined\n            ) {\n              getAllDevices();\n            } else {\n              devicesDataFetch(localStorage.getItem(\"departmentId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        deviceEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"departmentId\") === null ||\n                localStorage.getItem(\"departmentId\") === undefined\n              ) {\n                getAllDevices();\n              } else {\n                devicesDataFetch(localStorage.getItem(\"departmentId\"));\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Equipment\" : \"Edit Equipment\"}\n        content={\n          isAddMode ? (\n            <AddDeviceForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddDeviceForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Equipment\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Equipment\n            </CButton>\n          </CCol>\n        </CRow>\n        {devicesData ? (\n          <GenericTable\n            columns={columns}\n            data={devicesData}\n            OnDeleteItem={deleteDevices}\n            openEditModal={openEditModal}\n            deldevId={deldevId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Devices;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n} from \"src/hooks/useUsers\";\nimport { useMutation } from \"react-query\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nconst AddFacilityFrom = ({ closeModal, saveHandler, data }) => {\n  const orgId =\n    localStorage.getItem(\"OrganizationId\") &&\n    localStorage.getItem(\"OrganizationId\") !== \"Select Organization\";\n  const dataOrganization = useDataStore((state) => state.data);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const [UserData, setUsersData] = useState([]);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const [formData, setFormData] = useState({\n    name: \"\",\n    facility_type: \"\",\n    customerid: orgId ? Number(localStorage.getItem(\"OrganizationId\")) : 0,\n    timezone: \"\",\n    currency: \"\",\n    contactname: \"\",\n    contactphonenumber: \"\",\n    address: \"\",\n    city: \"\",\n    street: \"\",\n    postcode: 0,\n    latitude: 0,\n    longitude: 0,\n    isfacilityadmin: true,\n    userid: 0,\n  });\n  useEffect(() => {\n    getAllUsers();\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        name: data?.name,\n        facility_type: data?.facility_type,\n        customerid: Number(data?.customerid),\n        timezone: data?.timezone,\n        currency: data?.currency,\n        contactname: data?.contactname,\n        contactphonenumber: data?.contactphonenumber,\n        address: data?.address,\n        city: data?.city,\n        street: data?.street,\n        postcode: +data?.postcode,\n        latitude: +data?.latitude,\n        longitude: +data?.longitude,\n        isfacilityadmin: true,\n        userid: data?.userid,\n      }));\n    }\n  }, [data]);\n\n  const handleInputChange = (e) => {\n    // debugger;\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      setFormData({\n        ...formData,\n        [name]: value,\n      });\n      return;\n    }\n\n    const parsedValue =\n      (name === \"latitude\" || name === \"longitude\") && type !== \"checkbox\"\n        ? parseFloat(value)\n        : value;\n\n    const postcodeValue =\n      name === \"postcode\" && type !== \"checkbox\" ? parseInt(value, 10) : value;\n\n    if (\n      (!isNaN(parsedValue) || name !== \"latitude\" || name !== \"longitude\") &&\n      (!isNaN(postcodeValue) || name !== \"postcode\")\n    ) {\n      setFormData((prevFormData) => ({\n        ...prevFormData,\n        [name]: name === \"postcode\" ? postcodeValue : parsedValue,\n      }));\n    }\n  };\n\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    if (form.checkValidity() === true) {\n      // Convert userid to number\n      const updatedFormData = {\n        ...formData,\n        userid: Number(formData.userid),\n      };\n\n      showLoader();\n      saveHandler(updatedFormData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {!orgId && organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Facility Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil3d} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Facility Type */}\n\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility Type*\n        </CFormLabel>\n        <CFormSelect\n          name=\"facility_type\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility type.\"\n          id=\"validationFacilityType\"\n          value={formData.facility_type}\n          onChange={handleInputChange}\n          required\n        >\n          <option>Select Facility Type</option>\n          <option value={\"Mixed Dashboard\"}>Mixed Dashboard</option>\n          <option value={\"Energy Dashboard\"}>Energy Dashboard</option>\n          <option value={\"Condition Dashboard\"}>Condition Dashboard</option>\n        </CFormSelect>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Time Zone*\n        </CFormLabel>\n        <CFormSelect\n          name=\"timezone\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.timezone}\n          onChange={handleInputChange}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid time zone.\"\n          id=\"validationTimeZone\"\n          required\n        >\n          <option>Select Timezone</option>\n          <option value={\"Asia/Colombo\"}>Asia/Colombo</option>\n          <option value={\"Asia/Dhaka\"}>Asia/Dhaka</option>\n          <option value={\"Asia/Dubai\"}>Asia/Dubai</option>\n        </CFormSelect>\n      </CCol>\n\n      {/*Currency */}\n      {/* <CFormLabel htmlFor=\"validationCurrency\">Currency*</CFormLabel>*/}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Currency*\n        </CFormLabel>\n        <CFormSelect\n          name=\"currency\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.currency}\n          onChange={handleInputChange}\n          aria-describedby=\"validationCurrency\"\n          feedbackInvalid=\"Please select a valid currency.\"\n          id=\"validationCurrency\"\n          required\n        >\n          <option>Select Currency</option>\n          <option value={\"USD\"}>USD</option>\n          <option value={\"EUR\"}>EUR</option>\n          <option value={\"ZAR\"}>ZAR</option>\n        </CFormSelect>\n      </CCol>\n      {/* Site manager */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          Site Manager\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"contactname\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"contactname\"\n            value={formData.contactname}\n            onChange={handleInputChange}\n            aria-describedby=\"validationSiteManager\"\n            feedbackInvalid=\"Site Manager required.\"\n            id=\"validationSiteManager\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* Contact */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          Contact Number*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"tel\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"contactphonenumber\"\n            placeholder=\"+92xxxx\"\n            value={formData.contactphonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationContactNumber\"\n            feedbackInvalid=\"Phone Number is required.\"\n            id=\"validationContactNumber\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/*Contact Email*/}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Select User\n        </CFormLabel>\n        <CFormSelect\n          name=\"userid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid User.\"\n          // id=\"validationOrganization\"\n          value={formData.userid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select User</option>\n          {UserData?.data?.map((item) => {\n            return (\n              <option key={item.userid} value={item.userid}>\n                {item.firstname}\n                {item.lastname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationAddress\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Street*/}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          Street*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"Street\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"street\"\n            value={formData.street}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Street is required.\"\n            id=\"validationStreet\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* City */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          City*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"City\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"City is required.\"\n            id=\"validationCity\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Postcode */}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Postcode\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"Postcode\" />*/}\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"postcode\"\n            value={formData.postcode}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Postcode is required\"\n            id=\"validationPostcode\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* latitude */}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Latitude*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"latitude\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"latitude\"\n            value={formData.latitude}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"latitude is required\"\n            id=\"validationLatitude\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Longitude*/}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Longitude*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"longitude\" />*/}\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"longitude\"\n            value={formData.longitude}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"longitude is required\"\n            id=\"validationLongitude\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Facility\" : \"Add Facility\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddFacilityFrom.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    facility_type: PropTypes.string,\n    customerid: PropTypes.string,\n    timezone: PropTypes.string,\n    currency: PropTypes.string,\n    contactname: PropTypes.string,\n    contactphonenumber: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.string,\n    city: PropTypes.string,\n    street: PropTypes.string,\n    postcode: PropTypes.string,\n    latitude: PropTypes.string,\n    longitude: PropTypes.string,\n    userid: PropTypes.number,\n  }),\n};\n\nexport default AddFacilityFrom;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  useAllFacilitiesData,\n  addFacility,\n  EditFacility,\n  deleteFacility,\n  getAllFacilitiesData,\n} from \"src/hooks/useFacilities\";\nimport AddFacilityFrom from \"src/views/forms/add-facility-from/add-facility-from\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { getFacilitiesData } from \"src/hooks/useAuth\";\nconst columns = [\n  { key: \"name\", label: \"Facility Name\" },\n  { key: \"facility_type\", label: \"Facility Type\" },\n  { key: \"email\", label: \"Contact Email\" },\n  // { key: \"site_manager\", label: \"Site Manager\" },\n  { key: \"contactphonenumber\", label: \"Contact Number\" },\n  { key: \"address\", label: \"Address\" },\n  { key: \"street\", label: \"Street\" },\n  { key: \"city\", label: \"City\" },\n  { key: \"postcode\", label: \"Postcode\" },\n];\nconst Facilities = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: facilityAdd } = useMutation(addFacility);\n  const { mutate: facilityEdit } = useMutation(EditFacility);\n  const { facilityData, setFacilityData } = useGlobalInfo();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteFacilityById = useMutation(deleteFacility);\n  const [delfacId, setDelfacId] = useState(true);\n\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes a Fecility by its ID.\n   * @param {number} facilityId - The ID of the Facility to be deleted.\n   */\n  const deleteFacilities = (facilityId) => {\n    showLoader();\n    deleteFacilityById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Facility deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"OrganizationId\") === null ||\n          localStorage.getItem(\"OrganizationId\") === undefined\n        ) {\n          getAllFacilities();\n        } else {\n          facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    getFacilities(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    if (\n      localStorage.getItem(\"OrganizationId\") === undefined ||\n      localStorage.getItem(\"OrganizationId\") === \"Select Organization\" ||\n      localStorage.getItem(\"OrganizationId\") === null\n    ) {\n      getAllFacilities();\n    } else {\n      return;\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        debugger;\n        facilityAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Facility Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"OrganizationId\") === null ||\n              localStorage.getItem(\"OrganizationId\") === undefined\n            ) {\n              getAllFacilities();\n            } else {\n              facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        facilityEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Facility Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"OrganizationId\") === null ||\n                localStorage.getItem(\"OrganizationId\") === undefined\n              ) {\n                getAllFacilities();\n              } else {\n                facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n              }\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Facility\" : \"Edit Facility\"}\n        content={\n          isAddMode ? (\n            <AddFacilityFrom\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddFacilityFrom\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Facilities\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Facilities\n            </CButton>\n          </CCol>\n        </CRow>\n        {facilityData ? (\n          <GenericTable\n            columns={columns}\n            OnDeleteItem={deleteFacilities}\n            data={facilityData}\n            openEditModal={openEditModal}\n            delfacId={delfacId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Facilities;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cil3d, cilNotes, cilPhone } from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst Gateway = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const dataOrganization = useDataStore((state) => state.data);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    gateway_id: \"\",\n    gateway_note: \"\",\n    customerid: Number(localStorage.getItem(\"OrganizationId\")),\n    location: \"\",\n    carrier: \"\",\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        gateway_id: data.gateway_id,\n        gateway_note: data.gateway_note,\n        customerid: data.customerid,\n        location:data.location,\n        carrier: data.carrier,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    // If the name is 'customerid', parse the value as a number\n    const parsedValue = name === \"customerid\" ? parseInt(value, 10) : value;\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      //debugger;\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Organization\n        </CFormLabel>\n        <CFormSelect\n          name=\"customerid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid Organization.\"\n          // id=\"validationOrganization\"\n          value={formData.customerid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select Organization</option>\n          {dataOrganization[0]?.map((item) => {\n            return (\n              <option key={item.customerid} value={item.customerid}>\n                {item.customername}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* Gateway ID */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Gateway ID*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil3d} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_id\"\n            value={formData.gateway_id}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Notes */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Notes*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.gateway_note}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Carrier*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.carrier}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Location*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.location}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Facility\" : \"Add GateWay\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nGateway.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    gateway_id: PropTypes.string,\n    gateway_note: PropTypes.string,\n    customerid: PropTypes.string,\n    location: PropTypes.string,\n    carrier: PropTypes.string,\n  }),\n};\n\nexport default Gateway;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllGatewayData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`gateway/get-all-gateways/${id}`);\n  return data;\n};\nexport const getAllGateways = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`gateway/get-all-gateways`);\n  return data;\n};\n\nexport const addGateWay = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `gateway/assign-to-organization`,\n    payload\n  );\n  return data;\n};\n\nexport const EditGateWay = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `/gateway/update-gateway/${payload.editData.gatewayid}`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteGateway = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`gateway/delete-gateway/${id}`);\n  return data;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport GatewayForm from \"../../../forms/gateway/GatewayForm\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport AddDeviceSensor from \"src/views/forms/add-device-sensors/add-device-sensor\";\nimport {\n  getAllGatewayData,\n  addGateWay,\n  deleteGateway,\n  EditGateWay,\n  getAllGateways,\n} from \"src/hooks/usegateway\";\nconst columns = [\n  { key: \"gateway_id\", label: \"Gateway ID\" },\n  { key: \"gateway_note\", label: \"Gateway Notes\" },\n  { key: \"carrier\", label: \"Carrier\" },\n  { key: \"location\", label: \"Location\" },\n\n  // { key: 'action', label: 'Action' },\n];\nconst Gateway = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: gatewayAdd } = useMutation(addGateWay);\n  // const dataOrganization = useDataStore((state) => state.data)\n  const { mutate: gatewayEdit } = useMutation(EditGateWay);\n  const { mutate: GatewayData } = useMutation(getAllGatewayData);\n  const { mutate: AllGatewayData } = useMutation(getAllGateways);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [gatewayData, setgatewaydata] = useState([]);\n  const [editData, setEditData] = useState();\n  //const [data, setData] = useState([]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteGatewayById = useMutation(deleteGateway);\n  const [delgatewayId, setdelgatewayId] = useState(true);\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllGatewaysByOrg(id) {\n    GatewayData(id, {\n      onSuccess: (data) => {\n        hideLoader();\n        setgatewaydata(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllgateways() {\n    AllGatewayData(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setgatewaydata(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n\n    if (organizationId && organizationId !== \"Select Organization\") {\n      // If organizationId is present and not 'Select Organization', call gByOrg\n      getAllGatewaysByOrg(organizationId);\n    } else {\n      // If organizationId is null, undefined, or 'Select Organization', call getAllGateways\n      getAllgateways();\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n\n  /**\n     * Deletes a Fecility by its ID.\n     * @param {number} facilityId - The ID of the Facility to be deleted.\n    //  */\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        gatewayAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"GateWay Created Successfully\",\n            }));\n            getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        gatewayEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"GateWay Edited Successfully\",\n              }));\n              getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const deleteFacilities = (facilityId) => {\n    // //debugger\n    showLoader();\n    deleteGatewayById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"GateWay deleted Successfully\",\n        }));\n\n        getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add GateWay\" : \"Edit GateWay\"}\n        content={\n          isAddMode ? (\n            <GatewayForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <GatewayForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              GateWay\n            </h3>\n          </CCol>\n          <CCol className=\"d-flex gap-5 justify-content-end\">\n            <div>\n              <CButton\n                color=\"primary\"\n                className=\"float-end mr-3\"\n                onClick={() => {\n                  setIsAddMode(true);\n                  setEditData(null);\n                  setIsModalOpen(true);\n                }}\n              >\n                Add GateWay\n              </CButton>\n            </div>\n            <div className=\"d-flex gap-2\">\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Day\n              </CButton>\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Week\n              </CButton>\n\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Month\n              </CButton>\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Hour\n              </CButton>\n            </div>\n          </CCol>\n        </CRow>\n        {gatewayData ? (\n          <GenericTable\n            columns={columns}\n            data={gatewayData}\n            OnDeleteItem={deleteFacilities}\n            openEditModal={openEditModal}\n            delgatewayId={delgatewayId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\nexport default Gateway;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilClock,\n  cilPeople,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddOrganizationForm = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    customername: \"\",\n    contactperson: \"\",\n    email: \"\",\n    address: \"\",\n    city: \"\",\n    street: \"\",\n    postcode: \"\",\n    phone: \"\",\n    interval1: null,\n    interval2: null,\n    interval3: null,\n    interval4: null,\n  });\n  useEffect(() => {\n    // // //debugger\n    if (data) {\n      setFormData(() => ({\n        customername: data.customername,\n        contactperson: data.contactperson,\n        email: data.email,\n        address: data.address,\n        city: data.city,\n        street: data.street,\n        postcode: data.postcode,\n        phone: data.phone,\n        interval1: data.interval1,\n        interval2: data.interval2,\n        interval3: data.interval3,\n        interval4: data.interval4,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (\n      name === \"postcode\" ||\n      name === \"interval1\" ||\n      name === \"interval2\" ||\n      name === \"interval3\" ||\n      (name === \"interval4\" && type !== \"checkbox\")\n    ) {\n      // Parse the \"postcode\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n\n      // If the parsed value is 0, set it to null\n      if (parsedValue === 0) {\n        parsedValue = null;\n      }\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      debugger;\n      showLoader();\n      saveHandler(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Organization Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationName\"\n        >\n          Organization Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"customername\"\n            value={formData.customername}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Organization Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Organization Contact */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationContact\"\n        >\n          Contact Person\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPeople} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"contactperson\"\n            value={formData.contactperson}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Please enter a valid phone number\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationContact\"\n        >\n          Phone\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Please enter a valid phone number\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Organization Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Organization Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\"Organization Email is required\"\n            id=\"validationCustomorganizationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>Set CheckPoint Intervals</CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 1\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval1\"\n            value={formData.interval1}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 2\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval2\"\n            value={formData.interval2}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 3\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval3\"\n            value={formData.interval3}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 4\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval4\"\n            value={formData.interval4}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* City */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          City\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"City\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"City is required.\"\n            id=\"validationCustom04\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* Street */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          Street\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"Street\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"street\"\n            value={formData.street}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Street is required.\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Postcode */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Postcode\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPaperclip} alt=\"Postcode\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"postcode\"\n            value={formData.postcode}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Postcode is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Organization\" : \"Add Organization\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddOrganizationForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      customername: PropTypes.string,\n      contactperson: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      city: PropTypes.string,\n      street: PropTypes.string,\n      postcode: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddOrganizationForm;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\n\nimport useDataStore from \"src/store/state\";\nimport Modals from \"src/views/notifications/modals/Modals\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport Facilities from \"../facilities/Facilities\";\nimport AddOrganizationForm from \"src/views/forms/add-organization-form/AddOrganizationForm\";\nimport { useMutation } from \"react-query\";\nimport {\n  addOrganization,\n  getOrganizationData,\n  EditOrganization,\n  deleteOrganization,\n} from \"src/hooks/useAuth\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nconst columns = [\n  { key: \"customername\", label: \"Organization Name\" },\n  { key: \"contactperson\", label: \"Organization Contact\" },\n  { key: \"email\", label: \"Contact Email\" },\n  { key: \"calibration_date\", label: \"Calibration Date\" },\n  { key: \"address\", label: \"Address\" },\n  { key: \"street\", label: \"Street\" },\n  { key: \"city\", label: \"City\" },\n  { key: \"postcode\", label: \"Postcode\" },\n];\nconst Organization = () => {\n  const addData = useDataStore((state) => state.addData);\n  const { mutate: organizationAdd } = useMutation(addOrganization);\n  const { mutate: organizationData } = useMutation(getOrganizationData);\n  const { mutate: organizationedit } = useMutation(EditOrganization);\n  const data = useDataStore((state) => state.data);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const [delorgId, setDelOrgId] = useState(true);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  /**\n   * Deletes an Organization by its ID.\n   * @param {number} organizationId - The ID of the Organization to be deleted.\n   */\n  const deleteOrganizations = (organizationId) => {\n    showLoader();\n    deleteOrganizationById.mutate(organizationId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Organization deleted Successfully\",\n        }));\n        organizationData(\"\", {\n          onSuccess: (data) => {\n            addData(data.data);\n          },\n          onError: (error) => {\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data,\n            }));\n          },\n        });\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const deleteOrganizationById = useMutation(deleteOrganization);\n  function saveHandler(handler) {\n    showLoader();\n\n    setTimeout(() => {\n      if (isAddMode) {\n        organizationAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Organization Created Successfully\",\n            }));\n            organizationData(\"\", {\n              onSuccess: (data) => {\n                // //debugger\n                addData(data.data);\n              },\n              onError: (error) => {\n                setShowToast(() => ({\n                  show: true,\n                  title: \"Error\",\n                  content: error.response.data,\n                }));\n              },\n            });\n          },\n          onError: (error) => {\n            // //debugger\n            if (error.code === \"ERR_BAD_REQUEST\") {\n              localStorage.removeItem(\"token\");\n              localStorage.removeItem(\"OrganizationId\");\n              localStorage.removeItem(\"facilityId\");\n              localStorage.removeItem(\"departmentId\");\n              navigate(\"/login\");\n            }\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        organizationedit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Organization Edited Successfully\",\n              }));\n              organizationData(\"\", {\n                onSuccess: (data) => {\n                  addData(data.data);\n                },\n                onError: (error) => {\n                  setShowToast(() => ({\n                    show: true,\n                    title: \"Error\",\n                    content: error.response.data,\n                  }));\n                },\n              });\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Organization\" : \"Edit Organization\"}\n        content={\n          isAddMode ? (\n            <AddOrganizationForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddOrganizationForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Organizations\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Organization\n            </CButton>\n          </CCol>\n        </CRow>\n        <GenericTable\n          columns={columns}\n          data={data[0]}\n          openEditModal={openEditModal}\n          OnDeleteItem={deleteOrganizations}\n          delorgId={delorgId}\n        />\n      </CCard>\n    </>\n  );\n};\n\nexport default Organization;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllNotificationDataByEmail = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/${id}?type=email`\n  );\n  return data;\n};\nexport const getAllNotificationDataBySms = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/${id}?type=phone`\n  );\n  return data;\n};\nexport const getAllSelectedUsers = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/selected-users/${id}`\n  );\n  return data;\n};\nconst orgid = localStorage.getItem(\"OrganizationId\");\nexport const addNotificationUsers = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `notificationsetup/create/${orgid}`,\n    payload\n  );\n  return data;\n};\nexport const getAllOrganizationCredits = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`organization/credit/${id}`);\n  return data;\n};\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CFormCheck,\n  CInputGroupText,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilNotes,\n  cilPhone,\n} from '@coreui/icons'\nimport { useLoader } from 'src/global-context/LoaderContext'\nimport useDataStore from 'src/store/state'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport { addNotificationUsers, getAllNotificationDataByEmail } from 'src/hooks/useNotifications'\nimport { useMutation } from 'react-query'\nimport Organization from 'src/views/pages/admin/organization/Organization'\n\nconst NotificationAlarm = ({ closeModal, saveHandler, data }) => {\n  const [tableDataArray, setDataTableArray] = useState([])\n  const { dispatch } = useLoader()\n  const showLoader = () => dispatch({ type: 'SHOW_LOADER' })\n  const hideLoader = () => dispatch({ type: 'HIDE_LOADER' })\n  const { mutate: AllData } = useMutation(getAllNotificationDataByEmail)\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  \n  function EmailDataFetch(id) {\n    AllData(id, {\n      onSuccess: (data) => {\n        hideLoader()\n        setDataTableArray(data.data)\n      },\n      onError: (error) => {\n        hideLoader()\n      },\n    })\n  }\n  const [checkedItems, setCheckedItems] = useState([])\n  const [isAllNoneChecked, setIsAllNoneChecked] = useState(false)\n\n  // Handler for checkbox change\n  const handleCheckboxChange = (index) => {\n    const isChecked = checkedItems.includes(index)\n\n    // Create a copy of checkedItems to avoid mutating state directly\n    const updatedCheckedItems = [...checkedItems]\n\n    if (isChecked) {\n      // Item is checked, remove it\n      updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n    } else {\n      // Item is unchecked, add it\n      updatedCheckedItems.push(index)\n    }\n\n    setCheckedItems(updatedCheckedItems)\n  }\n  // const handleCheckboxChange = (index) => {\n  //   // Create a copy of checkedItems to avoid mutating state directly\n  //   const updatedCheckedItems = [...checkedItems]\n\n  //   // Toggle the checkbox state\n  //   if (updatedCheckedItems.includes(index)) {\n  //     updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n  //   } else {\n  //     updatedCheckedItems.push(index)\n  //   }\n\n  //   setCheckedItems(updatedCheckedItems)\n  // }\n\n  // Handler for \"All/None\" checkbox change\n  const handleAllNoneCheckboxChange = () => {\n    // If \"All/None\" is checked, set all checkboxes to be checked; otherwise, uncheck them\n    setIsAllNoneChecked((prev) => {\n      const updatedCheckedItems = prev\n        ? []\n        : Array.from({ length: tableDataArray.length }, (_, i) => i)\n      setCheckedItems(updatedCheckedItems)\n      return !prev\n    })\n  }\n\n  // Handler for Save button click\n  const handleSaveClick = () => {\n    const checkedItemsData = checkedItems.map((index) => tableDataArray[index])\n    // Log the checked items to the console\n    console.log('Checked Items:', checkedItemsData)\n    // Call the saveHandler function with the array parameter\n    saveHandler(checkedItemsData)\n\n    // Optionally, close the modal or perform other actions\n    closeModal()\n  }\n  useEffect(() => {\n    EmailDataFetch(localStorage.getItem('OrganizationId'))\n  }, [localStorage.getItem('OrganizationId')])\n  useEffect(() => {\n    // Initialize checkedItems based on is_email field\n    const initialCheckedItems = tableDataArray\n      .map((rowData, index) => (rowData.is_email ? index : null))\n      .filter((index) => index !== null)\n\n    setCheckedItems(initialCheckedItems)\n  }, [tableDataArray])\n  return (\n    <div>\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Name</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Email Address</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n              <CFormCheck\n                id=\"defaultCheckAllNone\"\n                label=\"All/None\"\n                checked={isAllNoneChecked}\n                onChange={handleAllNoneCheckboxChange}\n              />\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {/* Map over the array to render table rows */}\n          {tableDataArray.map((rowData, index) => (\n            <CTableRow key={index}>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.name}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.email}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n                {/* Use handleCheckboxChange to handle checkbox change */}\n                <CFormCheck\n                  id={`defaultCheck${index + 1}`}\n                  onChange={() => handleCheckboxChange(index)}\n                  checked={checkedItems.includes(index)}\n                  \n                />\n              </CTableDataCell>\n            </CTableRow>\n          ))}\n        </CTableBody>\n      </CTable>\n      {/* Button to trigger handleSaveClick */}\n      <button onClick={handleSaveClick}>Save</button>\n    </div>\n  )\n}\n\nexport default NotificationAlarm\nNotificationAlarm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    data: PropTypes.array.isRequired,\n  }).isRequired,\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CFormCheck,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilNotes,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { getAllNotificationDataBySms } from \"src/hooks/useNotifications\";\nconst SmsNumber = ({ closeModal, saveHandler, data }) => {\n  const [tableDataArray, setDataTableArray] = useState([]);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: AllData } = useMutation(getAllNotificationDataBySms);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  function EmailDataFetch(id) {\n    AllData(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setDataTableArray(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const [checkedItems, setCheckedItems] = useState([]);\n  const [isAllNoneChecked, setIsAllNoneChecked] = useState(false);\n\n  // Handler for checkbox change\n  const handleCheckboxChange = (index) => {\n    const isChecked = checkedItems.includes(index);\n\n    // Create a copy of checkedItems to avoid mutating state directly\n    const updatedCheckedItems = [...checkedItems];\n\n    if (isChecked) {\n      // Item is checked, remove it\n      updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1);\n    } else {\n      // Item is unchecked, add it\n      updatedCheckedItems.push(index);\n    }\n\n    setCheckedItems(updatedCheckedItems);\n  };\n  // const handleCheckboxChange = (index) => {\n  //   // Create a copy of checkedItems to avoid mutating state directly\n  //   const updatedCheckedItems = [...checkedItems]\n\n  //   // Toggle the checkbox state\n  //   if (updatedCheckedItems.includes(index)) {\n  //     updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n  //   } else {\n  //     updatedCheckedItems.push(index)\n  //   }\n\n  //   setCheckedItems(updatedCheckedItems)\n  // }\n\n  // Handler for \"All/None\" checkbox change\n  const handleAllNoneCheckboxChange = () => {\n    // If \"All/None\" is checked, set all checkboxes to be checked; otherwise, uncheck them\n    setIsAllNoneChecked((prev) => {\n      const updatedCheckedItems = prev\n        ? []\n        : Array.from({ length: tableDataArray.length }, (_, i) => i);\n      setCheckedItems(updatedCheckedItems);\n      return !prev;\n    });\n  };\n\n  // Handler for Save button click\n  const handleSaveClick = () => {\n    const checkedItemsData = checkedItems.map((index) => tableDataArray[index]);\n    // Log the checked items to the console\n    console.log(\"Checked Items:\", checkedItemsData);\n    // Call the saveHandler function with the array parameter\n    saveHandler(checkedItemsData);\n\n    // Optionally, close the modal or perform other actions\n    closeModal();\n  };\n  useEffect(() => {\n    EmailDataFetch(localStorage.getItem(\"OrganizationId\"));\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  useEffect(() => {\n    // Initialize checkedItems based on is_email field\n    const initialCheckedItems = tableDataArray\n      .map((rowData, index) => (rowData.is_email ? index : null))\n      .filter((index) => index !== null);\n\n    setCheckedItems(initialCheckedItems);\n  }, [tableDataArray]);\n  return (\n    <div>\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Name</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Phone Number</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n              <CFormCheck\n                id=\"defaultCheckAllNone\"\n                label=\"All/None\"\n                checked={isAllNoneChecked}\n                onChange={handleAllNoneCheckboxChange}\n              />\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {/* Map over the array to render table rows */}\n          {tableDataArray.map((rowData, index) => (\n            <CTableRow key={index}>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.name}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.phonenumber}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n                {/* Use handleCheckboxChange to handle checkbox change */}\n                <CFormCheck\n                  id={`defaultCheck${index + 1}`}\n                  onChange={() => handleCheckboxChange(index)}\n                  checked={checkedItems.includes(index)}\n                />\n              </CTableDataCell>\n            </CTableRow>\n          ))}\n        </CTableBody>\n      </CTable>\n      {/* Button to trigger handleSaveClick */}\n      <button onClick={handleSaveClick}>Save</button>\n    </div>\n  );\n};\n\nexport default SmsNumber;\nSmsNumber.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    data: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","import React, { useRef, useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CAccordion,\n  CAccordionBody,\n  CAccordionItem,\n  CAccordionHeader,\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CFormTextarea,\n  CTextarea,\n} from \"@coreui/react\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilTriangle,\n  cilAirplay,\n  cilNotes,\n  cilCog,\n  cilEnvelopeOpen,\n  cilHeadphones,\n  cilBuilding,\n  cilList,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLockLocked, cilUser } from \"@coreui/icons\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport NotificationAlarm from \"../../../forms/Notification-alarm/NotificationAlarm\";\nimport SmsNumber from \"src/views/forms/smsnumber/SmsNumber\";\nimport {\n  getAllSelectedUsers,\n  addNotificationUsers,\n  getAllOrganizationCredits,\n} from \"src/hooks/useNotifications\";\nconst NotificationSetup = () => {\n  const [combinedData, setCombinedData] = useState([]);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: selectedUsers } = useMutation(getAllSelectedUsers);\n  const { mutate: OrganizationCredits } = useMutation(\n    getAllOrganizationCredits\n  );\n  const { mutate: AddUsers } = useMutation(addNotificationUsers);\n\n  function SelectedUsersDataFetch(id) {\n    // showLoader()\n    //debugger\n    selectedUsers(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setData(data.data);\n        setPhonedata(data.data);\n      },\n      onError: (error) => {\n        //debugger\n        hideLoader();\n      },\n    });\n  }\n  const [credits, setCredits] = useState([]);\n  function CreditsOrganization(id) {\n    //debugger\n    OrganizationCredits(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setCredits(data.data);\n      },\n      onError: (error) => {\n        //debugger\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    if (!organizationId || organizationId === \"Select Organization\") {\n      setShowToast({\n        show: true,\n        title: \"Error\",\n        content: \"Please select an organization first.\",\n        color: \"#FF0000\",\n      });\n      return; // Prevent further execution of the useEffect\n    }\n\n    if (organizationId && organizationId !== \"Select Organization\") {\n      SelectedUsersDataFetch(organizationId);\n      CreditsOrganization(organizationId);\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [editData, setEditData] = useState(null);\n  const [isSmsNumberModalOpen, setIsSmsNumberModalOpen] = useState(false);\n  const [isAlarmNotificationModalOpen, setIsAlarmNotificationModalOpen] =\n    useState(false);\n  const [showState, setShowState] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [editData, setEditData] = useState()\n  //const [data, setData] = useState([]);\n  // const [isAddMode, setIsAddMode] = useState(false)\n  const { setShowToast } = useGlobalInfo();\n  // const deleteGatewayById = useMutation(deleteGatewayById)\n  const navigate = useNavigate();\n  const openSmsNumberTable = () => {\n    setIsAddMode(true);\n    setEditData(null);\n    setIsSmsNumberModalOpen(true);\n    setShowState(false);\n  };\n\n  const openAlarmNotificationTable = () => {\n    setIsAddMode(true);\n    setEditData(null);\n    setIsAlarmNotificationModalOpen(true);\n    setShowState(false);\n  };\n  const closeSmsNumberModal = () => {\n    setIsSmsNumberModalOpen(false);\n    // Additional cleanup if needed\n  };\n\n  const closeAlarmNotificationModal = () => {\n    setIsAlarmNotificationModalOpen(false);\n    // Additional cleanup if needed\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const [data, setdata] = useState([]);\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    textemailaddress: \"\",\n    smsnumber: \"\",\n    texttospeechnumber: \"\",\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        email: data.email,\n        textemailaddress: data.textemailaddress,\n        smsnumber: data.smsnumber,\n        texttospeechnumber: data.texttospeechnumber,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    // setValidated(true)\n\n    // Handle form submission here\n    // if (form.checkValidity() === true) {\n    // showLoader()\n    saveHandler(formData);\n    console.log(formData);\n    closeModal();\n    // }\n  };\n  const [Data, setData] = useState([]);\n  const [phoneData, setPhonedata] = useState([]);\n  function emailhandler(handler) {\n    setData(handler);\n  }\n  function numberhandler(handler) {\n    setPhonedata(handler);\n  }\n  function saveHandler(event) {\n    const combinedArray = [...Data, ...phoneData];\n    event.preventDefault();\n    //debugger\n    // setData(handler)\n    // setPhonedata(handler)\n    // showLoader()\n    // setTimeout(() => {\n    //   if (isAddMode) {\n    AddUsers(combinedArray, {\n      onSuccess: () => {\n        //debugger\n        hideLoader();\n        // setShowToast(() => ({\n        //   show: true,\n        //   title: 'Success',\n        //   content: 'Facility Created Successfully',\n        // }))\n        SelectedUsersDataFetch(localStorage.getItem(\"OrganizationId\"));\n      },\n      onError: (error) => {\n        hideLoader();\n        SelectedUsersDataFetch(localStorage.getItem(\"OrganizationId\"));\n      },\n    });\n    //   } else {\n    //     facilityEdit(\n    //       { handler, editData },\n    //       {\n    //         onSuccess: () => {\n    //           hideLoader()\n    //           setShowToast(() => ({\n    //             show: true,\n    //             title: 'Success',\n    //             content: 'Facility Edited Successfully',\n    //           }))\n    //           if (\n    //             localStorage.getItem('OrganizationId') === null ||\n    //             localStorage.getItem('OrganizationId') === undefined\n    //           ) {\n    //             getAllFacilities()\n    //           } else {\n    //             facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n    //           }\n    //         },\n    //         onError: (error) => {\n    //           hideLoader()\n    //           setShowToast(() => ({\n    //             show: true,\n    //             title: 'Error',\n    //             content: error.response.data.error,\n    //             color: '#FF0000',\n    //           }))\n    //         },\n    //       },\n    //     )\n    //   }\n    // }, 0)\n  }\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      {!showState && isSmsNumberModalOpen && (\n        <GenericModal\n          title={isAddMode ? \"Select User\" : \"Edit SMS Number\"}\n          content={\n            <SmsNumber\n              closeModal={closeSmsNumberModal}\n              saveHandler={numberhandler}\n              data={editData}\n            />\n          }\n          isOpen={isSmsNumberModalOpen}\n          onClose={closeSmsNumberModal}\n        />\n      )}\n\n      {!showState && isAlarmNotificationModalOpen && (\n        <GenericModal\n          title={isAddMode ? \"Select User\" : \"Edit Alarm Notification\"}\n          content={\n            <NotificationAlarm\n              closeModal={closeAlarmNotificationModal}\n              saveHandler={emailhandler}\n              data={editData}\n            />\n          }\n          isOpen={isAlarmNotificationModalOpen}\n          onClose={closeAlarmNotificationModal}\n        />\n      )}\n      {/* <GenericModal\n        title={isAddMode ? 'Select User' : 'Edit NotificationAlram'}\n        content={\n          <NotificationAlarm closeModal={closeModal} saveHandler={saveHandler} data={editData} />\n          //   isAddMode ? (\n          //     <Gateway closeModal={closeModal} saveHandler={saveHandler} />\n          //   ) : (\n          //     <Gateway closeModal={closeModal} saveHandler={saveHandler} data={editData} />\n          //   )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      /> */}\n      <div>\n        <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n          Alarm Notification\n        </h3>\n      </div>\n      <div>\n        <CAccordion\n          className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n            }`}\n          alwaysOpen\n          activeItemKey={2}\n        >\n          <CAccordionItem\n            className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n            itemKey={1}\n          >\n            <CAccordionHeader\n              className={` ${darkMode\n                  ? \"table_container_dark\"\n                  : \"table_container_light heading-dark\"\n                }`}\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n            >\n              Notification Setup\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n            >\n              <left className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                {/* This is the first item's accordion body. It is hidden by default, until the collapse */}\n                plugin adds the appropriate classes that we use to style each\n                element. These classes are very useful for the necessory\n                implementation of the work and also the esuresance of task\n                control the overall appearance, as well as the showing and\n                hiding via CSS transitions. You can modify any of this with{\" \"}\n                Alaram Setup custom CSS or overriding our default\n                {/* variables. It's also worth noting that just about any HTML can go within the */}\n                User setup, though the transition does limit overflow.\n              </left>\n            </CAccordionBody>\n          </CAccordionItem>\n          <br />\n          <CAccordionItem\n            className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n            alwaysOpen\n            itemKey={2}\n          >\n            <CAccordionHeader\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n              className=\"pb-2\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            >\n              SMS Credits\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n              alwaysOpen\n            >\n              <p className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                * It is hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to to be aware of something is\n                necessary\n              </p>\n              <br />\n              <CTable\n                className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n                  }`}\n                alwaysOpen\n                bordered\n              >\n                <CTableBody>\n                  <CTableRow\n                    className={` ${darkMode\n                        ? \"table_container_dark\"\n                        : \"table_container_light\"\n                      }`}\n                    alwaysOpen\n                  >\n                    <CTableDataCell\n                      style={{ width: \"800px\" }}\n                      className={`pb-2 ${darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                        }`}\n                      alwaysOpen\n                      id={`${darkMode ? \"heading-dark\" : \"heading-light\"}`}\n                    >\n                      Organization Credit\n                    </CTableDataCell>\n                    <CTableDataCell\n                      className={`pb-2 ${darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                        }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      {credits ? credits : \"0\"}\n                    </CTableDataCell>\n                  </CTableRow>\n                  <CTableRow\n                    className={` ${darkMode\n                        ? \"table_container_dark\"\n                        : \"table_container_light\"\n                      }`}\n                  >\n                    <CTableDataCell\n                      className={`pb-2 ${darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                        }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      Facility Credit\n                    </CTableDataCell>\n                    <CTableDataCell\n                      className={`pb-2 ${darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                        }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      0\n                    </CTableDataCell>\n                  </CTableRow>\n                </CTableBody>\n              </CTable>\n            </CAccordionBody>\n          </CAccordionItem>\n          <br />\n\n          <CAccordionItem\n            className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n            alwaysOpen\n            itemKey={3}\n          >\n            <CAccordionHeader\n              className=\"pb-2\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n            >\n              Alarms\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n              alwaysOpen\n            >\n              <CForm\n                className=\"row mt-2 g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={saveHandler}\n                style={{ marginBottom: \"26px\" }}\n              >\n                {/* First Name */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationFirstName\"\n                  >\n                    Email Address\n                  </CFormLabel>\n                  <CInputGroup style={{ height: \"90px\" }}>\n                    <CInputGroupText>\n                      {/* <MdLocationPin /> */}\n                      <CIcon icon={cilBuilding} alt=\"Name\" />\n                    </CInputGroupText>\n                    <textarea\n                      className={`form-control ${darkMode ? \"input-dark\" : \"input-light\"\n                        }`}\n                      name=\"email\"\n                      value={Data.map((item) => item.email).join(\"\\n\")}\n                      onChange={handleInputChange}\n                      // onClick={() => {\n                      //   setIsAddMode(true)\n                      //   setEditData(null)\n                      //   setIsModalOpen(true)\n                      // }}\n                      readOnly\n                      onClick={openAlarmNotificationTable}\n                      placeholder=\"Enter your email...\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/* Plain Text email Address*/}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationLastName\"\n                  >\n                    Plain text email Address\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilEnvelopeOpen} alt=\"text to email\" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"text\"\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"\n                        }`}\n                      name=\"textemailaddress\"\n                      value={formData.textemailaddress}\n                      onChange={handleInputChange}\n                      feedbackInvalid=\"Plain Text Email Address is required\"\n                      id=\"validationCustom02\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/*  Email */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationEmail\"\n                  >\n                    SMS Number\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilHeadphones} alt=\"sms number\" />\n                    </CInputGroupText>\n                    {/* <textarea\n                      type=\"number\"\n                      className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n                      name=\"smsnumber\"\n                      value={formData.smsnumber}\n                      onChange={handleEmailChange}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      feedbackInvalid=\" Sms number is required\"\n                      id=\"validationEmail\"\n                      required\n                    /> */}\n                    <textarea\n                      type=\"text\"\n                      className={`form-control ${darkMode ? \"input-dark\" : \"input-light\"\n                        }`}\n                      name=\"smsnumber\"\n                      value={phoneData\n                        .map((item) => item.phonenumber)\n                        .join(\"\\n\")}\n                      // value={formData.smsnumber}\n                      onChange={handleEmailChange}\n                      onClick={openSmsNumberTable}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      // feedbackInvalid=\" Sms number is required\"\n                      id=\"validationEmail\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/*  Email */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationEmail\"\n                  >\n                    Text to Speech Number\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilHeadphones} alt=\"text \" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"number\"\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"\n                        }`}\n                      name=\"texttospeechnumber\"\n                      value={formData.texttospeechnumber}\n                      onChange={handleEmailChange}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      feedbackInvalid=\" Text is required\"\n                      id=\"validationText\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n\n                {/* Submit Button */}\n                <CCol xs={12}>\n                  <CButton\n                    color=\"primary\"\n                    className=\"float-end\"\n                    id={`${darkMode ? \"button-dark\" : \"\"}`}\n                    type=\"submit\"\n                  >\n                    {data ? \"Save \" : \"Add  Details\"}\n                  </CButton>\n                </CCol>\n              </CForm>\n            </CAccordionBody>\n          </CAccordionItem>\n        </CAccordion>\n      </div>\n    </>\n  );\n};\n\nexport default NotificationSetup;\n","import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilMagnifyingGlass } from '@coreui/icons'\n\nconst Page404 = () => {\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={6}>\n            <div className=\"clearfix\">\n              <h1 className=\"float-start display-3 me-4\">404</h1>\n              <h4 className=\"pt-3\">Oops! You{\"'\"}re lost.</h4>\n              <p className=\"text-medium-emphasis float-start\">\n                The page you are looking for was not found.\n              </p>\n            </div>\n            <CInputGroup className=\"input-prepend\">\n              <CInputGroupText>\n                <CIcon icon={cilMagnifyingGlass} />\n              </CInputGroupText>\n              <CFormInput type=\"text\" placeholder=\"What are you looking for?\" />\n              <CButton color=\"info\">Search</CButton>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Page404\n","// /* eslint-disable prettier/prettier */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useAllDevicesData } from \"src/hooks/useDevices\";\nimport {\n  addDeviceSensor,\n  EditDeviceSensor,\n  getSensorConfigurationData,\n} from \"src/hooks/useDevicesSensors\";\nimport AddDeviceSensor from \"src/views/forms/add-device-sensors/add-device-sensor\";\nimport AddSensorConfigration from \"src/views/forms/add-sensor-configration/add-sensor-configration\";\nimport {\n  getAllDevicesSensorsData,\n  getAllSensorsDataofDep,\n  getAllSensorsDataofFac,\n  deleteDeviceSensor,\n  getAllSensorsDataofOrg,\n} from \"src/hooks/useDevicesSensors\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { getAllDevicesById, getAllDevicesData } from \"src/hooks/useDevices\";\nimport { TRUE } from \"sass\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nconst columns = [\n  { key: \"aws_sensorid\", label: \"Sensor ID\" },\n  { key: \"sensorname\", label: \"Sensor Name\" },\n  { key: \"devices.departments.departmentname\", label: \"Department Name\" },\n  { key: \"devices.devicename\", label: \"Device Name\" },\n];\nconst DevicesSensors = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { mutate: DeviceSensorAdd } = useMutation(addDeviceSensor);\n  const { mutate: GetAllDevices } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    // showLoader();\n    GetAllDevices(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: DeviceSensorEdit } = useMutation(EditDeviceSensor);\n  const { mutate: GetSensorConfiguration } = useMutation(\n    getSensorConfigurationData\n  );\n  // const { data: allDevices } = useAllDevicesData();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState();\n  const [isModalSensorOpen, setisModalSensorOpen] = useState(false);\n  const [AddsensorConfiguration, setIsAddsensorConfiguration] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteDeviceSensorById = useMutation(deleteDeviceSensor);\n  const [sensorForm, setSensorForm] = useState(false);\n  const [configData, setConfigData] = useState(\"\");\n  const [sensorData, setSensorData] = useState(\"\");\n  const [Deldevdsensor, setDeldevdsensor] = useState(true);\n  const [tableData, setTableData] = useState([]);\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openAddSensorConfigurationModal = () => {\n    setIsAddsensorConfiguration(true);\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function handleDeviceChange(e) {\n    setDeviceId(e.target.value);\n    deviceData(e.target.value, {\n      onSuccess: (data) => {},\n      onError: () => {},\n    });\n  }\n  const [DeviceData, setDevicesData] = useState([]);\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesSensorsByOrg } = useMutation(\n    getAllSensorsDataofOrg\n  );\n  function getAllDataOfOrgSensors(selectedId) {\n    getDevicesSensorsByOrg(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: getDevicesSensorsByFac } = useMutation(\n    getAllSensorsDataofFac\n  );\n  function getAllDataOfFacSensors(selectedId) {\n    getDevicesSensorsByFac(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: getDevicesSensorsByDep } = useMutation(\n    getAllSensorsDataofDep\n  );\n  function getAllDataOfDepSensors(selectedId) {\n    getDevicesSensorsByDep(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: deviceData } = useMutation(getAllDevicesSensorsData);\n  function getAllDataOfDeviceSensors(myDeviceId) {\n    deviceData(myDeviceId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const orgId = localStorage.getItem(\"OrganizationId\");\n  const facId = localStorage.getItem(\"facilityId\");\n  const depId = localStorage.getItem(\"departmentId\");\n  useEffect(() => {\n    if (organizationPermission) {\n      if (orgId && facId && depId) {\n        getAllDataOfDepSensors(depId);\n      } else if (orgId && facId) {\n        getAllDataOfFacSensors(facId);\n      } else if (orgId) {\n        getAllDataOfOrgSensors(orgId);\n      }\n    } else if (facilityPermission) {\n      if (facId) {\n        getAllDataOfFacSensors(facId);\n      } else if (facId && depId) {\n        getAllDataOfDepSensors(depId);\n      }\n    } else if (departmentPermission) {\n      if (facId && depId) {\n        getAllDataOfDepSensors(depId);\n      }\n    } else {\n    }\n    //debugger;\n\n    if (organizationPermission || facilityPermission || departmentPermission) {\n      devicesDataFetch(localStorage.getItem(\"departmentId\"));\n    } else if (devicepermission) {\n      getAllDevices();\n    }\n  }, [orgId, facId, depId]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        DeviceSensorAdd(handler, {\n          onSuccess: (res) => {\n            localStorage.setItem(\"sensorId\", res.id);\n            localStorage.setItem(\"deviceid\", res.deviceId);\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Sensor Created Successfully\",\n            }));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.title,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        DeviceSensorEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Edited Successfully\",\n              }));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  /**\n   * Deletes a Device sensor by its ID.\n   * @param {number} deviceSensorId - The ID of the Device sensor to be deleted.\n   */\n  const deleteDeviceSensors = (deviceSensorId) => {\n    showLoader();\n    deleteDeviceSensorById.mutate(deviceSensorId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device Sensor deleted Successfully\",\n        }));\n        hideLoader();\n        // getAllDataOfDeviceSensors(deviceId);\n      },\n      onError: (error) => {\n        //debugger;\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error?.response?.data,\n        }));\n        hideLoader();\n        // getAllDataOfDeviceSensors(deviceId);\n      },\n    });\n    hideLoader();\n  };\n\n  const viewConfig = (item) => {\n    localStorage.setItem(\"sensorId\", item.sensorid);\n    //debugger;\n    setSensorData(item);\n    // configurationView(id)\n    GetSensorConfiguration(item.sensorid, {\n      onSuccess: (res) => {\n        //debugger;\n        hideLoader();\n        setConfigData(res.data);\n        setSensorForm(true);\n      },\n      onError: (error) => {\n        hideLoader();\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error?.response?.data?.title,\n          color: \"#FF0000\",\n        }));\n      },\n    });\n  };\n  function handleDeviceChange(e) {\n    // debugger\n    const selectedDeviceId = e.target.value;\n\n    if (selectedDeviceId !== \"Select Device\") {\n      setDeviceId(selectedDeviceId);\n      getAllDataOfDeviceSensors(selectedDeviceId);\n    } else {\n      // You might want to add additional logic based on your requirements.\n    }\n  }\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      {sensorForm ? (\n        <AddSensorConfigration\n          closeModal={closeModal}\n          saveHandler={saveHandler}\n          data={configData}\n          sensorData={sensorData}\n        />\n      ) : (\n        <>\n          <GenericModal\n            title={isAddMode ? \"Add Equipment sensor\" : \"Edit Equipment sensor\"}\n            content={\n              isAddMode ? (\n                <AddDeviceSensor\n                  closeModal={closeModal}\n                  saveHandler={saveHandler}\n                  openAddSensorConfigurationModal={\n                    openAddSensorConfigurationModal\n                  }\n                  AddsensorConfiguration={AddsensorConfiguration}\n                  setisModalSensorOpen={setisModalSensorOpen}\n                />\n              ) : (\n                <AddDeviceSensor\n                  closeModal={closeModal}\n                  saveHandler={saveHandler}\n                  data={editData}\n                />\n              )\n            }\n            isOpen={isModalOpen}\n            onClose={closeModal}\n          />\n          <CCard\n            className={`table_container_light p-4 ${\n              darkMode ? \"table_container_dark\" : \"\"\n            }`}\n          >\n            <CRow>\n              <CCol md={6}>\n                <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                  Equipment Sensors\n                </h3>\n              </CCol>\n              <CCol md={3} className=\"float-end\">\n                <select\n                  size=\"sm\"\n                  className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                  aria-label=\"Department\"\n                  onChange={handleDeviceChange}\n                  value={deviceId}\n                >\n                  <option>Select Equipment</option>\n                  {DeviceData?.data?.map((item) => {\n                    return (\n                      <option key={item.deviceid} value={item.deviceid}>\n                        {item.devicename}\n                      </option>\n                    );\n                  })}\n                </select>\n              </CCol>\n              <CCol md={3}>\n                <CButton\n                  color=\"primary\"\n                  className=\"float-end\"\n                  onClick={() => {\n                    setIsAddMode(true);\n                    setEditData(null);\n                    setIsModalOpen(true);\n                  }}\n                >\n                  Add Equipment Sensor\n                </CButton>\n              </CCol>\n            </CRow>\n            <GenericTable\n              columns={columns}\n              data={tableData?.data}\n              OnDeleteItem={deleteDeviceSensors}\n              openEditModal={openEditModal}\n              viewConfig={viewConfig}\n              Deldevdsensor={Deldevdsensor}\n            />\n          </CCard>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default DevicesSensors;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { getAllSensors } from \"src/hooks/useOrganizationDevices\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { cilBuilding } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst AddOrganizationSensor = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const dataOrganization = useDataStore((state) => state.data);\n  const [orgId, setOrgId] = useState();\n  const [formData, setFormData] = useState({\n    // sensors: [],\n    customerid: orgId,\n    aws_sensorid: \"\",\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData({\n        aws_sensorid: data.aws_sensorid,\n        id: Number(data.sensorid),\n        customerid: Number(data.customerid),\n      });\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n  // const handleInputChange = (e) => {\n  //   const { name, value, type, checked } = e.target\n  //   if (name === 'typeSensorId') {\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensors: [value],\n  //     }))\n  //   } else if (name === 'sensorId') {\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensors: [...prevData.sensors, value],\n  //     }))\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensorId: [value],\n  //     }))\n  //   } else {\n  //     setFormData({\n  //       ...formData,\n  //       [name]: type === 'checkbox' ? checked : value,\n  //     })\n  //   }\n  // }\n  const handleOrgChange = (e) => {\n    const selectedOrgId = parseInt(e.target.value, 10) || 0; // Parse as an integer or default to 0\n    setFormData({\n      ...formData,\n      customerid: selectedOrgId,\n    });\n    setOrgId(selectedOrgId);\n  };\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      // //debugger\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  const { mutate: getAllSensorsData, data: sensorData } =\n    useMutation(getAllSensors);\n  useEffect(() => {\n    getAllSensorsData(\"\", {\n      onSuccess: (data) => {},\n      onError: (error) => {\n        console.log(error);\n      },\n    });\n  }, []);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Type Sensor Id */}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationTypeSensorId\">\n          Type Sensor Id *\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {' '}\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            name=\"aws_sensorid\"\n            value={formData.aws_sensorid}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Type Sensor Id is required\"\n            id=\"validationTypeSensorId\"\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol> */}\n      {/* Sensor Id*/}\n      {!data ? (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationSensorId\"\n          >\n            Sensor Id*\n          </CFormLabel>\n          <CFormSelect\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid sensor id\"\n            name=\"aws_sensorid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={formData.aws_sensorid}\n            id=\"validationSensorId\"\n            onChange={handleInputChange}\n            // required\n          >\n            <option>Select Sensors</option>\n            {sensorData?.data?.map((item, index) => {\n              return (\n                <option value={item} key={index}>\n                  {item}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      ) : null}\n      {/* Organization */}\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationOrganization\"\n        >\n          Organization*\n        </CFormLabel>\n        <CFormSelect\n          aria-describedby=\"validationCustom04Feedback\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          name=\"organization\"\n          value={formData.customerid}\n          feedbackInvalid=\"Please select a valid Organization\"\n          id=\"validationOrganization\"\n          onChange={handleOrgChange}\n          required\n        >\n          <option>Select Organization</option>\n          {dataOrganization[0]?.map((item) => {\n            return (\n              <option key={item.customerid} value={item.customerid}>\n                {item.customername}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Organization Sensor\" : \"Add Organization Sensor\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddOrganizationSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    typeSensorId: PropTypes.string,\n    sensorId: PropTypes.string,\n    organization: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        organizationName: PropTypes.string,\n      }),\n    ]),\n  }),\n};\nAddOrganizationSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    aws_sensorid: PropTypes.string,\n    customerid: PropTypes.string,\n    sensorid: PropTypes.string,\n  }),\n};\nexport default AddOrganizationSensor;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  // useAllOrgDevicesData,\n  EditOrganizationSensor,\n  addOrganizationSensor,\n  deleteOrganizationSensor,\n  getAllOrgDevicesData,\n  getAllAssignedSensorsofOrg,\n} from \"src/hooks/useOrganizationDevices\";\nimport { getAllSensorsDataofOrg } from \"src/hooks/useDevicesSensors\";\nimport AddOrganizationSensor from \"src/views/forms/add-organization-sensor/add-organization-sensor\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { useMutation } from \"react-query\";\nconst columns = [\n  { key: \"aws_sensorid\", label: \"AWS Sensor ID\" },\n  { key: \"customers.customername\", label: \"Assigned Organization\" },\n];\n\nconst OrganizationSensor = () => {\n  const navigate = useNavigate();\n  const [tableData, setTabledata] = useState([]);\n  // const {\n  //   data,\n  //   isSuccess,\n  //   isError,\n  //   refetch: refetchOrganizationSensors,\n  // } = useAllOrgDevicesData();\n  const { mutate: getAllSensors } = useMutation(getAllOrgDevicesData);\n  function AllSensorsData() {\n    //debugger\n    getAllSensors(\"\", {\n      onSuccess: (data) => {\n        //debugger\n        setTabledata(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getAllOrgSensorsData } = useMutation(\n    getAllAssignedSensorsofOrg\n  );\n  function orgSensors(selectedId) {\n    //debugger\n    getAllOrgSensorsData(selectedId, {\n      onSuccess: (data) => {\n        //debugger\n        setTabledata(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: OrganizationSensorAdd } = useMutation(addOrganizationSensor);\n  const { mutate: OrganizationSensorEdit } = useMutation(\n    EditOrganizationSensor\n  );\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast } = useGlobalInfo();\n  const deleteOrganizationSensorById = useMutation(deleteOrganizationSensor);\n  const [delOrgsSensorId, setDelOrgSensorId] = useState(true);\n  const orgId = localStorage.getItem(\"OrganizationId\");\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes an organization sensor by its ID.\n   * @param {number} organizationSensorId - The ID of the organization sensor to be deleted.\n   */\n  const deleteOrganizationSensors = (organizationSensorId) => {\n    showLoader();\n    deleteOrganizationSensorById.mutate(organizationSensorId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Organization Sensor deleted Successfully\",\n        }));\n        hideLoader();\n        // refetchOrganizationSensors();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n\n  // Fetch additional sensor data when orgId is present\n  // const { mutate: getAllSensorsData, data: sensorData } = useMutation(getAllSensorsDataofOrg);\n\n  // useEffect(() => {\n  //   if (orgId && orgId !== \"Select Organization\") {\n  //     getAllSensorsData(orgId, {\n  //       onSuccess: (data) => {\n  //         // Handle the sensor data as needed\n  //         //debugger;\n  //       },\n  //       onError: (error) => {\n  //         // Handle error if needed\n  //       },\n  //     });\n  //   }\n  // }, [orgId]);\n  // useEffect(() => {\n  //   showLoader();\n  //   if (isSuccess && !isError) {\n  //     hideLoader();\n  //   } else {\n  //     hideLoader();\n  //   }\n  // }, [isSuccess, isError, showLoader, hideLoader]);\n  useEffect(() => {\n      const organizationId = localStorage.getItem(\"OrganizationId\");\n  \n    if (organizationId && organizationId !== undefined && organizationId !== \"Select Organization\") {\n      orgSensors(organizationId);\n    } else {\n      AllSensorsData();\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  \n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        OrganizationSensorAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Organization Sensor Created Successfully\",\n            }));\n          },\n          onError: (error) => {\n            debugger\n            if (error.code === \"ERR_BAD_REQUEST\") {\n              localStorage.removeItem(\"token\");\n              localStorage.removeItem(\"OrganizationId\");\n              localStorage.removeItem(\"facilityId\");\n              localStorage.removeItem(\"departmentId\");\n              navigate(\"/login\");\n            }\n            hideLoader();\n            debugger\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.message,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        OrganizationSensorEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Organization Sensor Edited Successfully\",\n              }));\n              // organizationData('', {\n              //   onSuccess: (data) => {\n              //     addData(data)\n              //   },\n              //   onError: (error) => {\n              //     setShowToast(() => ({\n              //       show: true,\n              //       title: 'Error',\n              //       content: error.response.data,\n              //     }))\n              //   },\n              // })\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <>\n      <GenericModal\n        title={\n          isAddMode ? \"Add Organization sensor\" : \"Edit Organization sensor\"\n        }\n        content={\n          isAddMode ? (\n            <AddOrganizationSensor\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddOrganizationSensor\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Organization Sensors\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Organization Sensor\n            </CButton>\n          </CCol>\n        </CRow>\n        {tableData ? (\n          <GenericTable\n            columns={columns}\n            data={tableData}\n            OnDeleteItem={deleteOrganizationSensors}\n            openEditModal={openEditModal}\n            delOrgsSensorId={delOrgsSensorId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default OrganizationSensor;\n","/* eslint-disable react/prop-types */\nimport { CButton, CCol, CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React from 'react'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nexport const DeleteModal = ({ title, content, onClose, isOpen, OnDeleteClick, id }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo()\n  return (\n    <CModal id=\"delete_modal\" visible={isOpen} onClose={onClose}>\n      <CModalHeader closeButton className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n        <CModalTitle id={`${darkMode ? 'heading-dark' : ''}`}>{title}</CModalTitle>\n      </CModalHeader>\n      <CModalBody className={`modal-light pt-0 ${darkMode ? 'modal-dark' : ''}`}>\n        {content}\n        <h4 className=\"ms-3 pt-2\" id={`${darkMode ? 'heading-dark' : ''}`}>\n          Are you sure you want to delete?{' '}\n        </h4>\n\n        <CCol xs={11} className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n          <CButton\n            color=\"danger\"\n            className=\"float-end ms-2\"\n            onClick={() => {\n              OnDeleteClick(id)\n              onClose()\n            }}\n          >\n            Delete\n          </CButton>\n          <CButton\n            color=\"primary\"\n            className=\"float-end\"\n            onClick={() => {\n              onClose()\n            }}\n          >\n            Cancel\n          </CButton>\n        </CCol>\n      </CModalBody>\n    </CModal>\n  )\n}\n","/* eslint-disable react/prop-types */\n// GenericTable.js\nimport React, { useEffect, useState } from \"react\";\nimport {\n  CDropdownMenu,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { CDropdown, CDropdownItem, CDropdownToggle } from \"@coreui/react\";\nimport \"./GenericTable.css\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cilPencil,\n  cilSettings,\n  cilTrash,\n  cilEye,\n  cilSearch,\n} from \"@coreui/icons\";\nimport { DeleteModal } from \"src/components/modal/DeleteModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst GenericTable = ({\n  columns = [],\n  data = [],\n  openEditModal,\n  OnDeleteItem,\n  viewConfig,\n  deldevId,\n  deldepId,\n  delfacId,\n  delorgId,\n  deldevsSensorId,\n  delfacstaffId,\n  delUserId,\n  deldevstaffId,\n  deldepstaffId,\n  delgatewayId,\n  Deldevdsensor,\n  delOrgsSensorId,\n  selectedRole,\n  openAssignModal,\n}) => {\n  const renderCell = (item, key) => {\n    const keys = key.split(\".\");\n    return keys.reduce((acc, currentKey) => acc?.[currentKey], item);\n  };\n  const [DeleteId, setDeleteId] = useState(\"\");\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const openDeleteModal = () => {\n    setIsDeleteModalOpen(true);\n  };\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <div className=\"table-responsive-x\">\n      <DeleteModal\n        title=\"Delete\"\n        content={\"\"}\n        OnDeleteClick={OnDeleteItem}\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        id={DeleteId}\n      />\n      <CTable hover className=\"custom-table\">\n        <CTableHead>\n          <CTableRow>\n            {columns.map((column) => (\n              <CTableHeaderCell\n                className={`table-data-light ${\n                  darkMode ? \"table-data-dark\" : \"\"\n                }`}\n                key={column.key}\n              >\n                {column.label}\n              </CTableHeaderCell>\n            ))}\n            {viewConfig ? (\n              <CTableHeaderCell\n                key=\"viewConfig\"\n                className={`table-data-light ${\n                  darkMode ? \"table-data-dark\" : \"\"\n                }`}\n              >\n                View Config\n              </CTableHeaderCell>\n            ) : null}\n            <CTableHeaderCell\n              className={`table-data-light ${\n                darkMode ? \"table-data-dark\" : \"\"\n              }`}\n              key=\"actions\"\n            >\n              Actions\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {data?.length > 0 &&\n            data?.map((item, index) => (\n              <CTableRow key={index}>\n                {columns.map((column) => (\n                  <td\n                    key={column.key}\n                    className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}\n                  >\n                    {column.key.includes(\".\")\n                      ? renderCell(item, column.key)\n                      : item[column.key]}\n                  </td>\n                ))}\n                {viewConfig ? (\n                  <td\n                    key=\"viewConfig\"\n                    className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}\n                  >\n                    <CIcon\n                      style={{\n                        cursor: \"pointer\",\n                        width: \"25px\",\n                        height: \"22px\",\n                      }}\n                      color=\"secondary\"\n                      icon={cilSearch}\n                      onClick={() => viewConfig(item)}\n                    />\n                  </td>\n                ) : null}\n                <td\n                  key=\"actions\"\n                  className={`table-data-light ${\n                    darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                >\n                  <CDropdown>\n                    <CDropdownToggle color=\"secondary\">\n                      <CIcon icon={cilSettings} />\n                    </CDropdownToggle>\n                    <CDropdownMenu\n                      className={` pt-0 ${darkMode ? \"dropdown-dark\" : \"\"}`}\n                    >\n                      {selectedRole ? (\n                        <CDropdownItem onClick={() => openAssignModal(item)}>\n                          <CIcon icon={cilPencil} className=\"me-2\" />\n                          {selectedRole === \"Assigned\" ? \"UnAssign\" : \"Assign\"}\n                        </CDropdownItem>\n                      ) : null}\n\n                      <CDropdownItem onClick={() => openEditModal(item)}>\n                        <CIcon icon={cilPencil} className=\"me-2\" />\n                        Edit\n                      </CDropdownItem>\n                      <CDropdownItem\n                        onClick={() => {\n                          if (delorgId) {\n                            setDeleteId(item.customerid);\n                          } else if (delfacId) {\n                            setDeleteId(item.facilityid);\n                          } else if (deldepId) {\n                            setDeleteId(item.departmentid);\n                          } else if (deldevId) {\n                            setDeleteId(item.deviceid);\n                          } else if (deldevsSensorId) {\n                            setDeleteId(item.sensorid);\n                          } else if (\n                            delfacstaffId ||\n                            deldepstaffId ||\n                            deldevstaffId ||\n                            delUserId\n                          ) {\n                            setDeleteId(item);\n                          } else if (delgatewayId) {\n                            setDeleteId(item.gatewayid);\n                          } else if (Deldevdsensor) {\n                            setDeleteId(item.sensorid);\n                          } else if (delOrgsSensorId) {\n                            setDeleteId(item.sensorid);\n                          }\n                          openDeleteModal();\n                        }}\n                      >\n                        <CIcon icon={cilTrash} className=\"me-2\" />\n                        Delete\n                      </CDropdownItem>\n                    </CDropdownMenu>\n                  </CDropdown>\n                </td>\n              </CTableRow>\n            ))}\n          {data?.length === 0 && (\n            <CTableRow key=\"noData\">\n              <td colSpan={columns.length + 1} className=\"text-center\">\n                <b>No data found</b>\n              </td>\n            </CTableRow>\n          )}\n        </CTableBody>\n      </CTable>\n    </div>\n  );\n};\n\nexport default GenericTable;\n"],"names":["_jsx","className","style","height","children","SpinnerInfinity","size","thickness","speed","color","secondaryColor","props","permissions","localStorage","getItem","hasPermissionToActionAccess","pageAccess","pageAction","component","Navigate","to","replace","UserManagement","React","AlramThreshold","path","exact","name","element","Page404","AddSensorConfigration","_ref","type","_useState","useState","_useState2","_slicedToArray","tabledata","setTableData","ActiveSuppression","useMutation","getAllActiveSuppression","mutate","ExpiredSuppression","getAllExpiredSuppression","UpcomingSuppression","getAllUpcomingSuppression","useEffect","onSuccess","data","onError","error","_jsxs","_Fragment","marginTop","CTable","bordered","responsive","CTableHead","CTableRow","CTableHeaderCell","CTableBody","map","suppression","rowIndex","CTableDataCell","sensors","sensorname","aws_sensorid","start_time","end_time","duration","informuser","startTime","startDate","endTime","endDate","notification","setData","_useState3","useLoader","dispatch","_useState4","sensorData","setSensor","getSensors","getAllAssignedSensorsofOrg","setShowToast","useGlobalInfo","SuppressionAdd","addSuppression","handleChange","e","target","id","_objectSpread","_defineProperty","value","checked","display","flexDirection","overflowX","padding","justifyContent","alignItems","gap","width","CFormInput","onChange","CFormCheck","CCol","md","CFormLabel","htmlFor","CFormSelect","feedbackInvalid","sensorid","item","index","textAlign","CButton","onClick","formattedData","concat","informUser","sensorids","Number","show","title","content","AddSuppression","console","log","showUpcomingPeriods","setShowUpcomingPeriods","showActivePeriods","setShowActivePeriods","_useState5","_useState6","showExpiredPeriods","setShowExpiredPeriods","_useState7","_useState8","showNewPeriod","setShowNewPeriod","_useGlobalInfo","darkMode","handleButtonClick","setDarkMode","UpcomingPeriods","NewPeriod","daysOfWeek","dataToModal","step","setSteps","IsAddToSchedule","setIsAddToSchedule","addedSchedule","setAddedSchedule","scheduleName","methodType","selectedSchedule","setSelectedSchedule","_useState9","days","Mon","start","end","allDay","none","Tue","Wed","Thur","Fri","Sat","Sun","_useState10","schedules","setSchedules","prevSchedules","borderRadius","backgroundColor","fontSize","CIcon","icon","cilReportSlash","prevSteps","filter","restSchedules","_objectWithoutProperties","_toPropertyKey","DeleteStepByName","fontWeight","placeholder","readOnly","currentSchedule","day","handleStartTimeChange","handleEndTimeChange","handleAllDayChange","handleNoneChange","cilNoteAdd","renderTableRows","_toConsumableArray","included","setIncluded","excluded","setExcluded","scope","exclude","include","isModalOpen","setIsModalOpen","isIncludedExcludedOpen","setIsIncludedExcludedOpen","setDataToModal","closeModal","thStyle","sensorCellStyle","stepCellStyle","GenericModal","IncludedExcluded","isOpen","onClose","EscalationModalTable","colSpan","sensorGroup","steps","details","time","actions","paddingTop","minWidth","single_step","cilClipboard","getalarms","dataOfAlarm","setDataOfAlarm","acknowledge","acknowledgeAlert","comment","setComment","handleSave","preventDefault","alertid","response","AcknowledeAlert","alertstatus","alertstatusid","CRow","devices","devicename","disabled","textOverflow","property","alerttype","status","email","timestamp","CFormTextarea","border","outline","rows","_useGlobalInfo2","getAlarms","getAllAlarmManagement","dataPass","setDataPass","getAllAlarms","onAssigneeChange","newData","Assignee","AlarmTableModal","CCard","hover","class","_data$sensors","_data$sensors$devices","_data$sensors2","_data$sensors2$device","aws_id","cilMenu","AppContent","isLoading","GlobalLoader","CContainer","maxWidth","lg","Suspense","fallback","CSpinner","Routes","routes","route","idx","Route","CustomRoute","Dashboard","constant","Organization","Department","Facilities","Devices","FacilitiesStaff","DevicesStaff","DepartmentStaff","OrganizationSensor","DevicesSensors","Gateway","NotificationSetup","Users","GraphPage","AlarmSuppression","Escalations","AlarmsTable","ModalOpen","uploadedImageUrl","userPermissions","JSON","parse","organizationPermission","_organization","_view","facilityPermission","_facility","_department","_device","organizationLogoUrl","navigate","useNavigate","CDropdown","variant","CDropdownToggle","placement","caret","CAvatar","src","CDropdownMenu","CDropdownItem","cilSettings","removeItem","cilLockLocked","saveHandler","getAllRolesData","validated","organizationName","file","formData","setFormData","firstname","lastname","address","phonenumber","roleid","CForm","noValidate","onSubmit","event","currentTarget","CInputGroup","CInputGroupText","files","required","xs","_organizationData$dat","location","useLocation","addData","useDataStore","state","setDepartmentId","showLoader","hideLoader","dispatched","useDispatch","organizationData","setOrganizationData","facility","getAllFacilitiesData","getAllDep","getAllDepartmentsData","departmentPermission","devicePermission","mail","role","facilityData","setFacilityData","departmentsData","setDepartmentsData","setDevicesData","devicesData","sidebarShow","useSelector","getOrganization","getOrganizationData","getFacilities","getFacilitiesData","facilitiesDataFetch","selectedId","getDevices","getAllDevicesById","getDevicesByOrg","getAllDevicesByOrgId","getDevicesByFac","getAllDevicesByFacId","getDepartments","getDepartmentsData","departmentsDataFetch","getDepartmentsByOrg","getAllDepByOrgId","setUploadedImageUrl","logoUrl","uploadLogo","LogoUpload","LogoPost","uploadLogoPost","logo","LogoPostUpdate","LogoUploadPatch","code","undefined","_useGlobalInfo3","CHeader","position","Settings","handler","openModal","fluid","CHeaderToggler","CHeaderBrand","href","Sitelogo","alt","CHeaderNav","includes","pathname","CNavItem","setItem","departmentsDataByOrg","devicesDataFetchOrg","customerid","customername","devicesDataFetchFac","facilityid","devicesDataFetch","departmentid","departmentname","AppHeaderDropdown","AppSidebarNav","items","navLink","badge","CBadge","text","navItem","rest","_excluded","Component","_createElement","NavLink","key","navGroup","_item$items","_excluded2","String","toggler","visible","startsWith","_nav","cilBarChart","customClassName","CNavGroup","cilPeople","cilLibraryBuilding","cilBuilding","cilDevices","cilUserFollow","cilAudio","cilAudioSpectrum","cilCast","_sensor","cilListFilter","cilBell","cibMinutemailer","cilChartLine","cilBellExclamation","setUserPermissions","filteredNav","setFilteredNav","storedPermissions","memoizedFilteredNav","useMemo","hasPermissionToAction","apply","newItems","subItem","Boolean","AppSidebar","unfoldable","sidebarUnfoldable","generalPermissions","FilteredNav","stringify","CSidebar","onVisibleChange","CSidebarBrand","CSidebarNav","SimpleBar","DocsExample","_href","CNav","CNavLink","active","cilMediaPlay","cilCode","CTabContent","CTabPane","CModal","CModalHeader","closeButton","CModalTitle","CModalBody","BASE_URL","permissionList","pageData","setAuthenticationToken","token","setAuthToken","axiosInstance","axios","create","baseURL","timeout","headers","defaults","common","getAllSensorsThreshHolds","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$axiosInstance$","wrap","_context","prev","next","get","sent","abrupt","stop","_x","arguments","updateSensorsThreshHolds","_ref2","_callee2","payload","_yield$axiosInstance$2","_context2","patch","_x2","_ref3","_callee3","_yield$axiosInstance$3","_context3","_x3","_ref4","_callee4","_yield$axiosInstance$4","_context4","_x4","_ref5","_callee5","_yield$axiosInstance$5","_context5","post","_x5","_ref6","_callee6","_yield$axiosInstance$6","_context6","_x6","_ref7","_callee7","_yield$axiosInstance$7","_context7","_x7","_ref8","_callee8","_yield$axiosInstance$8","_context8","_x8","loginPost","password","addOrganization","EditOrganization","editData","deleteOrganization","_ref9","_callee9","_yield$axiosInstance$9","_context9","delete","resetpassword","_ref10","_callee10","_yield$axiosInstance$10","_context10","SetNewPassword","_ref11","_callee11","_yield$axiosInstance$11","_context11","_x9","_ref12","_callee12","_yield$axiosInstance$12","_context12","FormData","append","t0","_x10","_ref13","_callee13","_yield$axiosInstance$13","_context13","_x11","AcknowledgeMail","_ref14","_callee14","_yield$axiosInstance$14","_context14","_x12","deleteDepartment","addDepartment","EditDepartment","getAllDevicesData","useAllDevicesData","useQuery","deleteDevice","addDevice","EditDevice","deviceid","getAllDevicesSensorsData","getAssignedOrg","getAllSensorsDataofOrg","getAllSensorsDataofFac","getAllSensorsDataofDep","deleteDeviceSensor","addDeviceSensor","EditDeviceSensor","addSensorConfiguration","getSensorConfigurationData","EditSensorConfigurationData","deleteFacility","addFacility","facility_type","userid","contactphonenumber","contactname","timezone","currency","street","city","postcode","latitude","longitude","isfacilityadmin","EditFacility","getAllOrgDevicesData","getAllSensors","deleteOrganizationSensor","addOrganizationSensor","EditOrganizationSensor","getAllUnassignedUsersData","getAllassignedUsersData","getAllUnassignedUsersDataByOrg","getAllassignedUsersDataByOrg","addUser","EditUser","deleteUsers","assignFacilityUser","assignDepartmentUser","assignDeviceUser","UnassignFacilityUser","params","UnassignDepartmentUser","UnassignDeviceUser","set","newItem","sensorId","sensorsData","loading","_populateChart","updatedOptions","chart","xaxis","categories","updatedSeries","sensorName","maxvalue","minvalue","currentDate","Date","toISOString","split","dataForCurrentDate","reading","date","reading_timestamp","getHours","getMinutes","parseFloat","measure","populateChart","Skeleton","paragraph","ReactApexChart","options","series","_location$state","_objectDestructuringEmpty","sensorGraphData","setStartDate","setEndDate","navi","CustomInput","setSensorsData","setLoading","isSensorId","base","w","DatePicker","selected","dateFormat","placeholderText","customInput","BlueGraph","Gauge","memo","minValue","maxValue","currentValue","readingTime","awsId","percentage","Math","min","max","initialTimeDifference","setInitialTimeDifference","setTimeDifference","getTimeDifference","currentTime","prevTime","standardizedReadingDateString","slice","prevTimeValid","isNaN","getTime","currentTimeValid","timeDifferenceSeconds","floor","seconds","minutes","hours","intervalId","setInterval","prevDifference","clearInterval","memoizedGaugeChart","GaugeChart","nrOfLevels","colors","arcWidth","percent","needleColor","animate","animDelay","animateDuration","marginRight","displayName","getAllSensorData","FindDashboard","ReportData","CheckPointReportData","SensorGraphData","awsSensorId","setAlarms","_sensorsToMap","setoffline","setOk","setwarnings","showoffline","showAlarms","showok","showwarnings","SensorsData","SensorGraph","setWidgetsData","setSensorData","loadingDonut","setLoadingDonut","getAllSensorsData","handleCardClick","formattedDate","stateData","getSensorGraphData","sensorTypeId","fetchData","orgId","sse","EventSource","onmessage","updatedSensorData","prevWidgetsData","updatedWidgetsData","widget","readingDateTime","batteryValue","close","newWarnings","newOffline","newOk","warningSensors","offlineSensors","okSensors","forEach","push","sensorsToMap","Array","_","sm","CCardBody","cursor","CCardHeader","Battery","marginLeft","deviceName","uniqueDates","Set","sensor","uniqueIntervals","flatMap","readings","interval","measuresMap","Map","sensorValue","measures","intervalMeasures","uniqueDate","length","values","flat","setDay","setSensors","intervals","setIntervals","reportData","checkpointReport","checkpointReportDataFetch","_data$data","_data$data2","_data$data3","checkPoints","sensorIds","_useState11","_useState12","selectedSensors","setSelectedSensors","Select","isMulti","_sensors$find","label","find","selectedOptions","selectedSensorTypeIds","styles","container","provided","borderColor","borderBottomColor","boxShadow","selectedDay","Object","entries","intervalValue","ReportTable","count","customStyle","visibility","departmentId","dashboardFind","organizationCount","setOrganiztionCount","facilityCount","setFacilityCount","departmentCount","setDepartmentCount","deviceCount","setDeviceCount","unAssignedSensorCount","setUnAssignedSensorCount","assignedSensorCount","setAssignedSensorCount","orgID","facID","depID","DashboardData","idType","setTimeout","res","_res$data$counts","_res$data$counts2","_res$data$counts3","_res$data$counts4","_res$data$counts5","_res$data$counts6","counts","OrganizationCount","FacilityCount","DepartmentCount","DeviceCount","UnAssignedSensorCount","AssignedSensorCount","_useState13","_useState14","warnings","_useState15","_useState16","offline","_useState17","_useState18","ok","_useState19","_useState20","Alarms","_useState21","_useState22","setShowwarnings","_useState23","_useState24","setShowoffline","_useState25","_useState26","setShowOk","_useState27","_useState28","filterValue","filterType","marginBottom","cilWarning","CCardText","cilAlarm","cilCheckAlt","cilSortAscending","Donut","TableCard","flexWrap","CounterComp","_sensorData$data","_deviceData$data","deviceData","setValidated","organizationId","deviceId","setDeviceId","_useMutation","getDevicesByID","getDevicesByOrgID","getDevicesByFacID","facilityId","devicesDataByFac","devicesDataByOrg","handleInputChange","_e$target","form","organizationContact","checkValidity","stopPropagation","selectedDeviceId","parseInt","AddSensorConfiguration","editSensorConfiguration","tempOneChecked","setTempOneChecked","tempTwoChecked","setTempTwoChecked","co2Checked","setCo2Checked","humidityChecked","setHumidityChecked","unit","description","hidden","is_active","tempOne","settempOne","tempTwo","settempTwo","co2","setco2","humidity","sethumidity","propertyMap","temp","temp2","defaultProperties","is_hidden","keys","date_created","date_updated","is_deleted","updated_by","propertyName","handleTempOneChange","parsedValue","test","prevState","handleTempTwoChange","_e$target2","handleCo2Change","_e$target3","handleHumidityChange","_e$target4","_error$response","_error$response$data","_error$response2","_error$response2$data","deviceSensor","updatedFormData","setTrueIsActive","reverse","getAllDepartmentStaffData","addDepartmentStaff","EditDepartmentStaff","deleteDepartmentStaff","getAllDepartmentUserData","getAllDepartmentUserbyOrgID","getAllDepartmentUserbyDepID","getAllDepartmentStaffbyOrgID","getAllDepartmentStaffbyFacID","getAllDepartmentStaffbyDepID","is_admin","users","cilPaperPlane","inputEmail","isValid","cilLocationPin","cilPhone","columns","departmentStaffAdd","departmentStaffEdit","DepartmentStaffData","setdepartmentStaffData","departmentStaff","departmentUser","deleteDepartmentStaffById","setEditData","isAddMode","setIsAddMode","deldepstaffId","setSelectedRole","getAllDepartmentStaff","departmentSatffbyOrgID","departmentStaffDataFetch","departmentSatffbyFacID","departmentStaffDataByOrg","departmentSatffbydepID","departmentStaffDataByDep","departmentUserbyOrgID","departmentUserbyFacID","departmentUserbyDepID","AddDepartmentStaff","defaultValue","selectedValue","departmentUserDataFetch","departmentUserDataByDep","GenericTable","openEditModal","OnDeleteItem","_allDevices$data","allDevices","getAllDeviceStaffData","addDeviceStaff","EditDeviceStaff","deleteDeviceStaff","getAllDeviceUserData","getAllDeviceUserbyOrgID","getAllDeviceStaffbyOrgID","getAllDeviceStaffbyDepID","getAllDeviceStaffbyFacID","DeviceStaffData","setdeviceStaffData","deviceStaff","deviceStaffAdd","deviceStaffEdit","deleteDeviceStaffById","deldevstaffId","getAllDeviceStaff","deviceSatffbyOrgID","deviceStaffDataFetch","deviceSatffbyDepID","deviceStaffDataByOrg","deviceSatffbyFacID","deviceStaffDataByFac","AddDeviceStaff","getAllFacilitiesStaffData","getAllFacilitiesStaffbyOrgID","getAllFacilitiesStaffbyFacID","addFacilityStaff","EditFacilityStaff","deleteFacilityStaff","getAllFacilitiesUserData","getAllFacilitiesUserbyOrgID","getAllFacilitiesUserbyFacID","facilityStaffAdd","facilityStaffEdit","facilityStaffData","setFacilityStaffData","facilityStaff","facilityUser","deleteFacilityStaffById","delfacstaffId","facilityStaffbyOrgID","facilityUserbyOrgID","facilityStaffbyFacID","facilityUserbyFacID","facilitiesStaffDataFetch","facilitiesStaffDataBYfacId","getAllFacilitiesStaff","AddFacilityStaff","facilitiesUserDataFetch","_dataOrganization$","dataOrganization","isSuperAdmin","_facilityData$data","_departmentsData$data","assignHandler","selectedRole","UnAssignHandler","setDeviceData","isAdmin","setIsAdmin","charAt","toUpperCase","getAllDev","UserAdd","userEdit","usersData","setUsersData","UsersByOrg","AssignedUsers","AssignedUsersByOrg","assignUserToFac","assignUserToDep","assignUserToDev","UnassignUserToFac","UnassignUserToDep","UnassignUserToDev","deleteUserById","deluserid","AssignModalOpen","setIsAssignModalOpen","closeAssignModal","userData","setUserData","getAllUsers","getAllUsersByOrg","handleRoleChange","getAllAssignedUsersByOrg","AddStaffForm","AssignStaffForm","_error$response3","_error$response3$data","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","_error$response6$data","_error$response7","_error$response7$data","_error$response8","_error$response8$data","column","toLowerCase","user","delUserId","openAssignModal","_UserData$data","facId","UserData","cil4k","departmentAdd","departmentEdit","deleteDepartmentById","deldepId","getAllDepartments","AddDepartmentForm","depId","manufacturer","delaytime","cilSignalCellular0","deviceAdd","deviceEdit","deleteDeviceById","deldevId","getAllDevices","AddDeviceForm","postcodeValue","prevFormData","cil3d","facilityAdd","facilityEdit","deleteFacilityById","delfacId","getAllFacilities","AddFacilityFrom","gateway_id","gateway_note","carrier","cilNotes","getAllGatewayData","getAllGateways","addGateWay","EditGateWay","gatewayid","deleteGateway","gatewayAdd","gatewayEdit","GatewayData","AllGatewayData","gatewayData","setgatewaydata","deleteGatewayById","delgatewayId","getAllGatewaysByOrg","GatewayForm","contactperson","phone","interval1","interval2","interval3","interval4","cilClock","cilPaperclip","organizationAdd","organizationedit","delorgId","deleteOrganizationById","AddOrganizationForm","getAllNotificationDataByEmail","getAllNotificationDataBySms","getAllSelectedUsers","orgid","addNotificationUsers","getAllOrganizationCredits","tableDataArray","setDataTableArray","AllData","checkedItems","setCheckedItems","isAllNoneChecked","setIsAllNoneChecked","initialCheckedItems","rowData","is_email","updatedCheckedItems","from","i","isChecked","splice","indexOf","handleCheckboxChange","checkedItemsData","selectedUsers","OrganizationCredits","AddUsers","SelectedUsersDataFetch","setPhonedata","credits","setCredits","isSmsNumberModalOpen","setIsSmsNumberModalOpen","isAlarmNotificationModalOpen","setIsAlarmNotificationModalOpen","showState","setShowState","closeSmsNumberModal","closeAlarmNotificationModal","textemailaddress","smsnumber","texttospeechnumber","handleEmailChange","Data","phoneData","combinedArray","SmsNumber","NotificationAlarm","CAccordion","alwaysOpen","activeItemKey","CAccordionItem","itemKey","CAccordionHeader","fontFamily","CAccordionBody","join","cilEnvelopeOpen","cilHeadphones","cilMagnifyingGlass","_DeviceData$data","devicepermission","DeviceSensorAdd","GetAllDevices","DeviceSensorEdit","GetSensorConfiguration","setisModalSensorOpen","AddsensorConfiguration","setIsAddsensorConfiguration","deleteDeviceSensorById","sensorForm","setSensorForm","configData","setConfigData","Deldevdsensor","tableData","DeviceData","getDevicesSensorsByOrg","getDevicesSensorsByFac","getAllDataOfFacSensors","getDevicesSensorsByDep","getAllDataOfDepSensors","AddDeviceSensor","openAddSensorConfigurationModal","deviceSensorId","viewConfig","setOrgId","selectedOrgId","setTabledata","getAllOrgSensorsData","OrganizationSensorAdd","OrganizationSensorEdit","deleteOrganizationSensorById","delOrgsSensorId","message","AddOrganizationSensor","organizationSensorId","DeleteModal","OnDeleteClick","_ref$columns","_ref$data","deldevsSensorId","renderCell","reduce","acc","currentKey","DeleteId","setDeleteId","isDeleteModalOpen","setIsDeleteModalOpen","cilSearch","cilPencil","cilTrash"],"sourceRoot":""}