{"version":3,"file":"static/js/495.7cab23f8.chunk.js","mappings":"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","sources":["views/thresholdtable/AlramThresholdTable.js","views/pages/alerts/alarm-threshold/Alram-threshold.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport {\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n  CFormInput,\n  CFormCheck,\n  CFormSelect,\n  CButton,\n  CCol,\n  CRow,\n  CButtonGroup\n} from \"@coreui/react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// import jsPDF from \"jspdf\";\n// import html2canvas from \"html2canvas\";\nimport { getAllSensorsThreshHolds, updateSensorsThreshHolds } from \"src/hooks/useAlarms\";\nconst AlramThresholdTable = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const [enableAll, setEnableAll] = useState(false);\n  const [healthyStatusAll, setHealthyStatusAll] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const { mutate: getThreshold } = useMutation(getAllSensorsThreshHolds);\n  const { mutate: updateThreshold } = useMutation(updateSensorsThreshHolds);\n  function getAllThresholds(id) {\n    getThreshold(id , {\n      onSuccess: (data) => {\n        setData(data.data);\n      },\n      onError: (error) => { },\n    });\n  }\n  function updateAllThresholds(data) {\n    updateThreshold(data, {\n      onSuccess: (data) => {\n        // setData(data.data);\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Threshold Updated Successfully\",\n        }));\n        getAllThresholds(localStorage.getItem(\"OrganizationId\"));\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: \"Error In Updating Threshold\",\n          color: \"#FF0000\",\n        }));\n        getAllThresholds(localStorage.getItem(\"OrganizationId\"));\n      },\n    });\n  }\n  const [data, setData] = useState([]);\n  const label = {\n    \"background-color\": \"#4F46E5\",\n    color: \"#ffffff\",\n    \"border-radius\": \"4px\",\n    padding: \"5px\",\n    width: \"120px\",\n  };\n  const option = {\n    \"background-color\": \"white\",\n    color: \"black\",\n  };\n  const handleChange = (index, name, e) => {\n    const list = [...data];\n    list[index][name] = e.target.value;\n    setData(list);\n  };\n  const handleCheck = (index, name, e) => {\n    const list = [...data];\n    list[index][name] = e.target.checked;\n    setData(list);\n  };\n  const handelAllCheck = (e, name) => {\n    const list = [...data];\n    if (name === \"is_enabled\") {\n      setEnableAll(e.target.checked);\n    } else {\n      setHealthyStatusAll(e.target.checked);\n    }\n    list.map((item) => {\n      item[name] = e.target.checked;\n    });\n    setData(list);\n  };\n  const onSave = (e) => {\n    console.log(data);\n    updateAllThresholds(data);\n  };\n  // const generatePDF = () => {\n  //   const input = document.getElementById(\"threshold-table\");\n  //   html2canvas(input).then((canvas) => {\n  //     const imgData = canvas.toDataURL(\"image/png\");\n  //     const pdf = new jsPDF();\n  //     pdf.addImage(imgData, \"PNG\", 0, 0);\n  //     pdf.save(\"threshold-table.pdf\");\n  //   });\n  // };\n  const generateCSV = () => {\n    const csvContent = \"data:text/csv;charset=utf-8,\" + data.map(row => Object.values(row).join(\",\")).join(\"\\n\");\n    const encodedUri = encodeURI(csvContent);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", encodedUri);\n    link.setAttribute(\"download\", \"thresholds.csv\");\n    document.body.appendChild(link);\n    link.click();\n  };\n  const handlePrint = () => {\n    window.print();\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  useEffect(() => {\n    getAllThresholds(localStorage.getItem(\"OrganizationId\"))\n  }, []);\n  return (\n    <>\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <CButtonGroup role=\"group\" aria-label=\"Default button group\">\n          {/* <CButton color=\"primary\" variant=\"outline\">\n                  Copy\n                </CButton> */}\n          <CButton id={`${darkMode ? \"button-dark\" : \"\"}`} onClick={generateCSV} color=\"primary\" variant=\"outline\">\n            Excel\n          </CButton>\n          <CButton\n            //  onClick={generatePDF}\n            id={`${darkMode ? \"button-dark\" : \"\"}`}\n            color=\"primary\" variant=\"outline\">\n            Pdf\n          </CButton>\n          <CButton id={`${darkMode ? \"button-dark\" : \"\"}`} onClick={handlePrint} color=\"primary\" variant=\"outline\">\n            Print\n          </CButton>\n        </CButtonGroup>\n      </div>\n      <div\n        style={{\n          padding: \"15px\"\n        }}>\n        <CTable\n          bordered\n          responsive\n          style={{ marginTop: \"10px\", width: \"100%\" }}\n        >\n          <CTableHead>\n            <CTableRow>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                colSpan={3}\n                style={{ fontFamily: \"sans-serif\", width: \"20%\" }}\n              >\n                Sensor\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\", width: \"120px\" }}\n              >\n                Unit\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n\n                style={{ fontFamily: \"sans-serif\", width: \"10%\" }}\n              >\n                Enable\n                <CFormCheck\n                  checked={enableAll}\n                  onChange={(e) => {\n                    handelAllCheck(e, \"is_enabled\");\n                  }}\n                />\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\", width: \"10%\" }}\n              >\n                Delay (Mins)\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\", width: \"10%\" }}\n              >\n                Max\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\", width: \"10%\" }}\n              >\n                Min\n              </CTableHeaderCell>\n              {/* <CTableHeaderCell\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\" }}\n              >\n                Warning %\n              </CTableHeaderCell> */}\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\", width: \"10%\" }}\n              >\n                Healthy State\n                <CFormCheck\n                  checked={healthyStatusAll}\n                  onChange={(e) => {\n                    handelAllCheck(e, \"healthy_state\");\n                  }}\n                />\n\n              </CTableHeaderCell>\n              <CTableHeaderCell\n                className={`table-data-light ${darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                scope=\"col\"\n                style={{ fontFamily: \"sans-serif\" }}\n              >\n                Offline Alert\n              </CTableHeaderCell>\n            </CTableRow>\n          </CTableHead>\n          <CTableBody>\n            {data.map((item, index) => {\n              return (\n                <CTableRow key={index}>\n                  <CTableDataCell colSpan={3}>\n                    {/* <CFormInput\n                      type=\"text\"\n                      name=\"sensorName\" // Use 'name' instead of 'value'\n                      value={item.sensorName}\n                      onChange={(e) => handleChange(index, \"sensorName\", e)}\n                        style={label}\n                    /> */}\n                    {item.name}\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormInput\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n                      type=\"text\"\n                      name=\"unit\" // Use 'name' instead of 'value'\n                      value={item.unit}\n                      onChange={(e) => handleChange(index, \"unit\", e)}\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormCheck\n                      type=\"checkbox\"\n                      name=\"is_enabled\" // Use 'name' instead of 'value'\n                      checked={item.is_enabled}\n                      onChange={(e) => {\n                        handleCheck(index, \"is_enabled\", e);\n                      }}\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormInput\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n                      type=\"number\"\n                      name=\"delay\" // Use 'name' instead of 'value'\n                      value={item.sensors?.devices?.delaytime}\n                      onChange={(e) => handleChange(index, \"delay\", e)}\n                      disabled\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormInput\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n                      type=\"number\"\n                      name=\"max\" // Use 'name' instead of 'value'\n                      value={item.maxvalue}\n                      onChange={(e) => handleChange(index, \"maxvalue\", e)}\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormInput\n                      className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n                      type=\"number\"\n                      name=\"min\" // Use 'name' instead of 'value'\n                      value={item.minvalue}\n                      onChange={(e) => handleChange(index, \"minvalue\", e)}\n                    />\n                  </CTableDataCell>\n                  {/* <CTableDataCell>\n                    <CFormInput\n                      type=\"number\"\n                      name=\"warning\" // Use 'name' instead of 'value'\n                      value={item.warning}\n                      onChange={(e) => handleChange(index, \"warning\", e)}\n                    />\n                  </CTableDataCell> */}\n                  <CTableDataCell>\n                    <CFormCheck\n                      type=\"checkbox\"\n                      name=\"healthy_state\" // Use 'name' instead of 'value'\n                      checked={item.healthy_state}\n                      onChange={(e) => {\n                        handleCheck(index, \"healthy_state\", e);\n                      }}\n                    />\n                  </CTableDataCell>\n                  <CTableDataCell>\n                    <CFormSelect\n                      className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                      name=\"offlineAlert\"\n                      value={item.offline_alert}\n                      onChange={(e) => handleChange(index, \"offline_alert\", e)}\n                      style={option}\n                    >\n                      <option value=\"Off\">Off</option>\n                      <option value=\"On\">1 hour</option>\n                      <option value=\"On\">2 hour</option>\n                      <option value=\"On\">3 hour</option>\n                      <option value=\"On\">4 hour</option>\n                      <option value=\"On\">24 hour</option>\n                    </CFormSelect>\n                  </CTableDataCell>\n                </CTableRow>\n              );\n            })}\n          </CTableBody>\n          <CRow>\n          </CRow>\n        </CTable>\n        <br />\n        <CCol xs=\"auto\">\n          <CButton\n            id={`${darkMode ? \"button-dark\" : \"\"}`}\n            onClick={(e) => {\n              onSave(e);\n            }}\n          >\n            Save\n          </CButton>\n        </CCol>\n      </div>\n    </>\n  );\n};\nexport default AlramThresholdTable;\n\n\n\n\n\n\n\n\n\n\n\n\n","import React, { useRef, useState, useEffect } from 'react'\nimport {\n  CButton,\n  CCard,\n  CAccordion,\n  CAccordionBody,\n  CAccordionItem,\n  CAccordionHeader,\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n  CDropdown,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n  CButtonGroup,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormCheck,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n} from '@coreui/react'\nimport {\n  cilSortAscending,\n  cilBell,\n  cilEnvelopeOpen,\n  cilHeadphones,\n  cilBuilding,\n} from '@coreui/icons'\nimport CIcon from '@coreui/icons-react'\nimport { cilLockLocked, cilUser } from '@coreui/icons'\nimport GlobalLoader from 'src/components/global-loader/GlobalLoader'\nimport { GenericModal } from 'src/components/modal/GenericModal'\nimport { useLoader } from 'src/global-context/LoaderContext'\nimport { useMutation } from 'react-query'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport { useNavigate } from 'react-router-dom'\n// import NotificationAlarm from '../forms/Notification-alarm/NotificationAlarm'\n// import AlramThresholdTable from '../thresholdtable/AlramThresholdTable'\nimport AlramThresholdTable from 'src/views/thresholdtable/AlramThresholdTable'\nconst AlramThreshold = () => {\n  const { dispatch } = useLoader()\n\n  const { darkMode, setDarkMode } = useGlobalInfo()\n  const vars = {\n    '--cui-accordion-active-color': '#ffffff',\n    '--cui-accordion-active-bg': '#0F172A',\n  }\n  const label = {\n    'background-color': '#4F46E5',\n    color: '#ffffff',\n    'border-radius': '4px',\n    padding: '5px',\n    width: '120px',\n  }\n  const option = {\n    'background-color': 'white',\n    color: 'black',\n  }\n\n  return (\n    <>\n      <h3>\n        Alarm Threshold\n      </h3>\n      <div\n        style={{\n          display: 'flex',\n          alignItems: 'flex-start',\n          justifyContent: 'space-between',\n          flexWrap: 'wrap',\n        }}\n      >\n        <CAccordion class=\"accordion\" style={{ width: '45%' }}>\n          {/* Accordion Item 1 */}\n          <CAccordionItem itemKey={1}>\n            <CAccordionHeader style={vars}>\n              <h5 style={{ fontFamily: 'sans-serif', fontSize: '20px' }}>Alarm Period</h5>\n            </CAccordionHeader>\n            <CAccordionBody>\n              {/* <h1>Hello I am the time picker</h1> */}\n            </CAccordionBody>\n          </CAccordionItem>\n        </CAccordion>\n        <CAccordion class=\"accordion\" style={{ width: '45%' }}>\n          <CAccordionItem itemKey={2}>\n            <CAccordionHeader style={vars}>\n              <h5 style={{ fontFamily: 'sans-serif', fontSize: '20px' }}>System Office Delay</h5>\n            </CAccordionHeader>\n            <CAccordionBody style={{ fontFamily: 'sans-serif' }}>\n              The default office delay value, which can be inherited by the sensor on this system\n              <CFormSelect style={label}>\n                <option>2:00 hour</option>\n                <option value=\"1\" style={option}>\n                  5:00 hour\n                </option>\n                <option value=\"2\" style={option}>\n                  6:00 hour\n                </option>\n                <option value=\"3\" style={option}>\n                  7:00 hour\n                </option>\n              </CFormSelect>\n            </CAccordionBody>\n          </CAccordionItem>\n        </CAccordion>\n      </div>\n      <CAccordion alwaysOpen activeItemKey={2} style={{ marginTop: '10px' }}>\n        <CAccordionItem itemKey={1}>\n          <CAccordionHeader style={vars}>\n            <h5 style={{ fontFamily: 'sans-serif' }}>Condition based Alram</h5>\n          </CAccordionHeader>\n          <CAccordionBody>\n\n            <AlramThresholdTable />\n          </CAccordionBody>\n        </CAccordionItem>\n      </CAccordion>\n\n      {/* <CAccordion alwaysOpen activeItemKey={2} style={{ marginTop: '10px' }}>\n        <CAccordionItem itemKey={1}>\n          <CAccordionHeader style={vars}>\n            <h5 style={{ fontFamily: 'sans-serif' }}>Status Based Alram</h5>\n          </CAccordionHeader>\n          <CAccordionBody>\n            <div\n              style={{\n                display: 'flex',\n                alignItems: 'flex-start',\n                justifyContent: 'space-between,',\n                flexWrap: 'wrap',\n              }}\n            >\n              <CButtonGroup role=\"group\" aria-label=\"Default button group\">\n                <CButton color=\"primary\" variant=\"outline\">\n                  Copy\n                </CButton>\n                <CButton color=\"primary\" variant=\"outline\">\n                  Excel\n                </CButton>\n                <CButton color=\"primary\" variant=\"outline\">\n                  Pdf\n                </CButton>\n                <CButton color=\"primary\" variant=\"outline\">\n                  Print\n                </CButton>\n              </CButtonGroup>\n              <CForm className=\"row float-end\">\n                <CCol>\n                  <CFormLabel>\n                    Search:\n                    <CFormInput type=\"text\" id=\"inputtext\" />\n                  </CFormLabel>\n                </CCol>\n              </CForm>\n            </div>\n            <AlramThresholdTable />\n          </CAccordionBody>\n        </CAccordionItem>\n      </CAccordion> */}\n    </>\n  )\n}\n\nexport default AlramThreshold\n"],"names":["useLoader","dispatch","_useState","useState","_useState2","_slicedToArray","enableAll","setEnableAll","_useState3","_useState4","healthyStatusAll","setHealthyStatusAll","setShowToast","useGlobalInfo","getThreshold","useMutation","getAllSensorsThreshHolds","mutate","updateThreshold","updateSensorsThreshHolds","getAllThresholds","id","onSuccess","data","setData","onError","error","_useState5","_useState6","option","color","handleChange","index","name","e","list","_toConsumableArray","target","value","handleCheck","checked","handelAllCheck","map","item","onSave","console","log","show","title","content","localStorage","getItem","updateAllThresholds","_useGlobalInfo2","darkMode","setDarkMode","useEffect","_jsxs","_Fragment","children","_jsx","style","display","alignItems","justifyContent","flexWrap","CButtonGroup","role","CButton","concat","onClick","csvContent","row","Object","values","join","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","variant","window","print","padding","CTable","bordered","responsive","marginTop","width","CTableHead","CTableRow","CTableHeaderCell","className","scope","colSpan","fontFamily","CFormCheck","onChange","CTableBody","_item$sensors","_item$sensors$devices","CTableDataCell","CFormInput","type","unit","is_enabled","sensors","devices","delaytime","disabled","maxvalue","minvalue","healthy_state","CFormSelect","offline_alert","CRow","CCol","xs","_useGlobalInfo","vars","CAccordion","class","CAccordionItem","itemKey","CAccordionHeader","fontSize","CAccordionBody","alwaysOpen","activeItemKey","AlramThresholdTable"],"sourceRoot":""}