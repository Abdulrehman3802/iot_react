{"version":3,"file":"static/js/853.29886804.chunk.js","mappings":"6XA6SA,EAjRqB,SAAHA,GAA2C,IAADC,EAApCC,EAAUF,EAAVE,WAAYC,EAAWH,EAAXG,YAAaC,EAAIJ,EAAJI,KACzCC,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,gBAClDC,GAAyBC,EAAAA,EAAAA,IAC7BN,EACAO,EAAAA,GACAC,EAAAA,IAEMC,GAAaC,EAAAA,EAAAA,KAAbD,SACFE,GAAmBC,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMd,IAAI,IAE3De,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAgCL,EAAAA,EAAAA,UAAS,CACvCM,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,YAAa,GACbC,WAAY,GACZC,cAAc,IACdC,GAAAX,EAAAA,EAAAA,GAAAG,EAAA,GARKS,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAS5BG,EAAAA,EAAAA,YAAU,WACJhC,GACF+B,GAAY,iBAAO,CACjBJ,WAAY3B,EAAK2B,WACjBL,UAAWtB,EAAKsB,UAChBC,SAAUvB,EAAKuB,SACfC,MAAOxB,EAAKwB,MACZC,QAASzB,EAAKyB,QACdC,YAAa1B,EAAK0B,YACnB,GAEL,GAAG,CAAC1B,IAEJ,IAAMiC,EAAoB,SAACC,GACzB,IAAAC,EAAuCD,EAAEE,OAAjCC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QACvBC,EAAcH,EAEL,eAATD,IACFI,EAAcC,SAASJ,EAAO,KAAO,GAGvCP,GAAWY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACRb,GAAQ,IAAAc,EAAAA,EAAAA,GAAA,GACVP,EAAgB,aAATE,EAAsBC,EAAUC,IAE5C,EA+BAI,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAGlB,OADAhB,EAAAA,EAAAA,YAAU,WAAO,GAAG,CAACe,KAEnBE,EAAAA,EAAAA,MAACC,EAAAA,GAAK,CACJC,UAAU,gCACVC,YAAU,EACVjC,UAAWA,EACXkC,SAzBiB,SAACC,GACpB,IAAMC,EAAOD,EAAME,cACnBF,EAAMG,kBACuB,IAAzBF,EAAKG,iBACPJ,EAAMK,kBAGRvC,GAAa,IAGgB,IAAzBmC,EAAKG,kBA5DchD,EAAS,CAAE6B,KAAM,gBA8DtCxC,EAAY+B,GACZ8B,QAAQC,IAAI/B,GACZhC,IAEJ,EAS2BgE,SAAA,CAEtBxD,IACC2C,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EAEXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,yBAAwBP,SACjC,kBAGDb,EAAAA,EAAAA,MAACqB,EAAAA,GAAW,CACVjC,KAAK,aACLc,UAAS,gBAAAiB,OAAkBrB,EAAW,cAAgB,IACtD,mBAAiB,6BACjBwB,gBAAgB,sCAEhBjC,MAAOR,EAASH,WAChB6C,SAAUvC,EACVwC,UAAQ,EAERC,WAAU1E,EAAoB8D,SAAA,EAE9BG,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,wBACY,QADgBjE,EACnCe,EAAiB,UAAE,IAAAf,OAAA,EAAnBA,EAAqB8E,KAAI,SAACC,GACzB,OACEX,EAAAA,EAAAA,KAAA,UAA8B3B,MAAOsC,EAAKjD,WAAWmC,SAClDc,EAAKC,cADKD,EAAKjD,WAItB,WAKNsB,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,EAAEF,SAAA,EACVG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,sBAAqBP,SAC9B,gBAGDb,EAAAA,EAAAA,MAAC6B,EAAAA,GAAW,CAAAhB,SAAA,EACVG,EAAAA,EAAAA,KAACc,EAAAA,GAAe,KAIhBd,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CACTzC,KAAK,OACLY,UAAS,oBAAAiB,OAAsBrB,EAAW,aAAe,IACzDV,KAAK,YACLC,MAAOR,EAASR,UAChBkD,SAAUvC,EACVsC,gBAAgB,yBAChBJ,GAAG,qBACHM,UAAQ,WAKdxB,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,EAAEF,SAAA,EACVG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,qBAAoBP,SAC7B,eAGDb,EAAAA,EAAAA,MAAC6B,EAAAA,GAAW,CAAC3B,UAAU,iBAAgBW,SAAA,EACrCG,EAAAA,EAAAA,KAACc,EAAAA,GAAe,KAGhBd,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CACTzC,KAAK,OACLY,UAAS,oBAAAiB,OAAsBrB,EAAW,aAAe,IACzDV,KAAK,WACLC,MAAOR,EAASP,SAChBiD,SAAUvC,EACVsC,gBAAgB,wBAChBJ,GAAG,qBACHM,UAAQ,WAKdxB,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,kBAAiBP,SAC1B,WAGDb,EAAAA,EAAAA,MAAC6B,EAAAA,GAAW,CAAC3B,UAAU,iBAAgBW,SAAA,EACrCG,EAAAA,EAAAA,KAACc,EAAAA,GAAe,CAAAjB,UACdG,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CAACC,KAAMC,EAAAA,EAAeC,IAAI,aAElCnB,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CACTzC,KAAK,QACLY,UAAS,oBAAAiB,OAAsBrB,EAAW,aAAe,IACzDV,KAAK,QACLC,MAAOR,EAASN,MAChBgD,SA1IgB,SAACtC,GACzB,IAAAmD,EAAuCnD,EAAEE,OAAjCC,EAAIgD,EAAJhD,KAAMC,EAAK+C,EAAL/C,MAAOC,EAAI8C,EAAJ9C,KAAMC,EAAO6C,EAAP7C,QAC3BT,GAAWY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACRb,GAAQ,IAAAc,EAAAA,EAAAA,GAAA,GACVP,EAAgB,aAATE,EAAsBC,EAAUF,KAE1C,IAAMgD,EAAapD,EAAEE,OAAOE,MAEtBiD,EADa,kDACQC,KAAKF,GAEhClE,EAAamE,EACf,EAgIU,mBAAiB,4BACjBhB,gBAAgB,qBAChBJ,GAAG,kBACHM,UAAQ,WAKdxB,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,0BAAyBP,SAClC,aAGDb,EAAAA,EAAAA,MAAC6B,EAAAA,GAAW,CAAAhB,SAAA,EACVG,EAAAA,EAAAA,KAACc,EAAAA,GAAe,CAAAjB,UACdG,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CAACC,KAAMO,EAAAA,EAAgBL,IAAI,eAEnCnB,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CACT7B,UAAS,oBAAAiB,OAAsBrB,EAAW,aAAe,IACzDR,KAAK,OACLF,KAAK,UACLC,MAAOR,EAASL,QAChB+C,SAAUvC,EACV,mBAAiB,6BACjBsC,gBAAgB,uBAChBJ,GAAG,qBACHM,UAAQ,WAKdxB,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,EAAW,eAAiB,IACnCsB,QAAQ,8BAA6BP,SACtC,kBAGDb,EAAAA,EAAAA,MAAC6B,EAAAA,GAAW,CAAAhB,SAAA,EACVG,EAAAA,EAAAA,KAACc,EAAAA,GAAe,CAAAjB,UACdG,EAAAA,EAAAA,KAACgB,EAAAA,EAAK,CAACC,KAAMQ,EAAAA,EAAUN,IAAI,mBAE7BnB,EAAAA,EAAAA,KAACe,EAAAA,GAAU,CACT7B,UAAS,oBAAAiB,OAAsBrB,EAAW,aAAe,IACzDR,KAAK,OACLF,KAAK,cACLC,MAAOR,EAASJ,YAChB8C,SAAUvC,EACV,mBAAiB,6BACjBsC,gBAAgB,2BAChBJ,GAAG,qBACHM,UAAQ,WAKdR,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAAC4B,GAAI,GAAG7B,UACXG,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CACNC,MAAM,UACN1C,UAAU,YACVgB,GAAE,GAAAC,OAAKrB,EAAW,cAAgB,IAClCR,KAAK,SAAQuB,SAEZ9D,EAAO,aAAe,kBAKjC,E,4CC8BA,EAtSwB,SAAHJ,GAMd,IAADkG,EAAAC,EAAAC,EALJlG,EAAUF,EAAVE,WACAmG,EAAarG,EAAbqG,cACAjG,EAAIJ,EAAJI,KACAkG,EAAYtG,EAAZsG,aACAC,EAAevG,EAAfuG,gBAEMlG,EAAkBC,KAAKC,MAAMC,aAAaC,QAAQ,gBACxDU,GAAkCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA1CI,EAASF,EAAA,GAAEG,EAAYH,EAAA,GAC9BI,GAAwCL,EAAAA,EAAAA,YAAUa,GAAAX,EAAAA,EAAAA,GAAAG,EAAA,GAA3C+E,EAAYvE,EAAA,GAAEwE,EAAexE,EAAA,GACpCyE,GAA8CtF,EAAAA,EAAAA,YAAUuF,GAAArF,EAAAA,EAAAA,GAAAoF,EAAA,GAAjDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAC1CG,GAAoC1F,EAAAA,EAAAA,YAAU2F,GAAAzF,EAAAA,EAAAA,GAAAwF,EAAA,GAAvCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAA8B9F,EAAAA,EAAAA,WAAS,GAAM+F,GAAA7F,EAAAA,EAAAA,GAAA4F,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAClBrG,GAAaC,EAAAA,EAAAA,KAAbD,SACQwG,GAAaC,EAAAA,EAAAA,aAAYC,EAAAA,IAAjCC,OACQC,GAAcH,EAAAA,EAAAA,aAAYI,EAAAA,IAAlCF,OAiBRG,IAhB+BjH,EAAAA,EAAAA,IAC7BN,EACAO,EAAAA,GACAC,EAAAA,KAEyBF,EAAAA,EAAAA,IACzBN,EACAwH,EAAAA,GACAhH,EAAAA,KAE2BF,EAAAA,EAAAA,IAC3BN,EACAyH,EAAAA,GACAjH,EAAAA,KAG8BO,EAAAA,EAAAA,UAAS,CACvC2G,OAAQ3H,EAAK2H,OACbC,SAAUZ,KACVa,GAAA3G,EAAAA,EAAAA,GAAAsG,EAAA,GAHK1F,EAAQ+F,EAAA,GAAE9F,EAAW8F,EAAA,IAaMV,EAAAA,EAAAA,aAAYW,EAAAA,IAAtCT,QAW2BF,EAAAA,EAAAA,aAAYY,EAAAA,IAAvCV,OAUR,IAAMpF,EAAoB,SAACC,GACzB0B,QAAQC,IAAI3B,EAAEE,OAAOE,OACrB,IAAAH,EAAuCD,EAAEE,OAAjCC,EAAIF,EAAJE,KAAMC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,KAAMC,EAAOL,EAAPK,QAC3BoB,QAAQC,IAAI3B,EAAEE,OAAOE,OACrB,IAAMG,EACM,aAATJ,GACU,eAATA,GACS,iBAATA,GACFC,IAAK,YAAA8B,OAAiB/B,EAAK2F,OAAO,GAAGC,cAAgB5F,EAAK6F,MAAM,IAE5D5F,EADAI,SAASJ,EAAO,IAEtBP,GAAWY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACRb,GAAQ,IAAAc,EAAAA,EAAAA,GAAA,GACVP,EAAgB,aAATE,EAAsBC,EAAUC,IAE5C,EAiBA,IAAgB0F,GAAchB,EAAAA,EAAAA,aAAYiB,EAAAA,IAAlCf,OASR,IA2BAxE,GAAkCC,EAAAA,EAAAA,KAA1BC,GAAQF,EAARE,SAAqBF,EAAXG,YAMlB,OALAhB,EAAAA,EAAAA,YAAU,WApDRkF,EAAS,GAAI,CACXmB,UAAW,SAACrI,GACVqG,EAAgBrG,EAClB,EACAsI,QAAS,SAACC,GAAW,IAIvBjB,EAAU,GAAI,CACZe,UAAW,SAACrI,GACVyG,EAAmBzG,EACrB,EACAsI,QAAS,SAACC,GAAW,IAKvBJ,EAAU,GAAI,CACZE,UAAW,SAACrI,GACV6G,EAAc7G,EAChB,EACAsI,QAAS,SAACC,GAAW,GAmCzB,GAAG,KAEDtE,EAAAA,EAAAA,KAACf,EAAAA,GAAK,CACJC,UAAU,gCACVC,YAAU,EACVjC,UAAWA,EACXkC,SAnCiB,SAACC,GACpBA,EAAMG,iBAEN,IAAMF,EAAOD,EAAME,eACU,IAAzBD,EAAKG,iBACPJ,EAAMK,kBAGRvC,GAAa,GAEbW,GAAWY,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACRb,GAAQ,IACX8F,SAAUZ,MAGiB,IAAzBzD,EAAKG,kBACPE,QAAQC,IAAI/B,GA/FSpB,EAAS,CAAE6B,KAAM,gBAkGtC0D,EAAcnE,GACdhC,IAEJ,EAa2BgE,SAEL,aAAjBoC,GACCjD,EAAAA,EAAAA,MAAAuF,EAAAA,SAAA,CAAA1E,SAAA,EACEb,EAAAA,EAAAA,MAAA,MAAIE,UAAU,YAAYgB,GAAE,GAAAC,OAAKrB,GAAW,eAAiB,IAAKe,SAAA,CAAC,gDACnB,QAGhDG,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CACH4B,GAAI,GACJxC,UAAS,eAAAiB,OAAiBrB,GAAW,aAAe,IAAKe,UAEzDG,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CACNC,MAAM,SACN1C,UAAU,iBACVsF,QAAS,WACPtC,EAAgBnG,EAClB,EAAE8D,SACH,mBAMLb,EAAAA,EAAAA,MAAAuF,EAAAA,SAAA,CAAA1E,SAAA,CACG,KACDb,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,GAAW,eAAiB,IACnCsB,QAAQ,6BAA4BP,SACrC,eAGDb,EAAAA,EAAAA,MAACqB,EAAAA,GAAW,CACVjC,KAAK,aACL,mBAAiB,6BACjBkC,gBAAgB,kCAChBJ,GAAG,uBACHhB,UAAS,gBAAAiB,OAAkBrB,GAAW,cAAgB,IACtDT,MAAOR,EAAS4G,WAChBlE,SAAUvC,EACVyC,SAAU5C,EAAS6G,cAAgB7G,EAAS8G,SAAS9E,SAAA,EAErDG,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,eACK,OAAZsC,QAAY,IAAZA,GAAkB,QAANN,EAAZM,EAAcpG,YAAI,IAAA8F,OAAN,EAAZA,EAAoBnB,KAAI,SAACC,GACxB,OACEX,EAAAA,EAAAA,KAAA,UAA8B3B,MAAOsC,EAAK8D,WAAW5E,SAClDc,EAAKvC,MADKuC,EAAK8D,WAItB,WAIJzF,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,GAAW,eAAiB,IACnCsB,QAAQ,6BAA4BP,SACrC,2BAGDb,EAAAA,EAAAA,MAACqB,EAAAA,GAAW,CACVjC,KAAK,eACL,mBAAiB,6BACjBkC,gBAAgB,kCAChBJ,GAAG,uBACH7B,MAAOR,EAAS6G,aAChBnE,SAAUvC,EACVkB,UAAS,gBAAAiB,OAAkBrB,GAAW,cAAgB,IACtD2B,SAAU5C,EAAS4G,YAAc5G,EAAS8G,SAAS9E,SAAA,EAEnDG,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,gBACQ,OAAf0C,QAAe,IAAfA,GAAqB,QAANT,EAAfS,EAAiBxG,YAAI,IAAA+F,OAAN,EAAfA,EAAuBpB,KAAI,SAACC,GAC3B,OACEX,EAAAA,EAAAA,KAAA,UAAgC3B,MAAOsC,EAAK+D,aAAa7E,SACtDc,EAAKiE,gBADKjE,EAAK+D,aAItB,WAGJ1F,EAAAA,EAAAA,MAACc,EAAAA,GAAI,CAACC,GAAI,GAAGF,SAAA,EACXG,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CACTC,GAAE,GAAAC,OAAKrB,GAAW,eAAiB,IACnCsB,QAAQ,yBAAwBP,SACjC,aAGDb,EAAAA,EAAAA,MAACqB,EAAAA,GAAW,CACVjC,KAAK,WACLc,UAAS,gBAAAiB,OAAkBrB,GAAW,cAAgB,IACtD,mBAAiB,6BACjBwB,gBAAgB,gCAChBjC,MAAOR,EAAS8G,SAChBpE,SAAUvC,EACVyC,SAAU5C,EAAS4G,YAAc5G,EAAS6G,aAAa7E,SAAA,EAEvDG,EAAAA,EAAAA,KAAA,UAAAH,SAAQ,YACG,OAAV8C,QAAU,IAAVA,GAAgB,QAANZ,EAAVY,EAAY5G,YAAI,IAAAgG,OAAN,EAAVA,EAAkBrB,KAAI,SAACC,GACtB,OACEX,EAAAA,EAAAA,KAAA,UAA4B3B,MAAOsC,EAAKgE,SAAS9E,SAC9Cc,EAAKkE,YADKlE,EAAKgE,SAItB,WAGJ3E,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAAC4B,GAAI,GAAG7B,UACXb,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYW,SAAA,EACzBG,EAAAA,EAAAA,KAAA,SACE1B,KAAK,WACLY,UAAU,mBACVgB,GAAG,kBACH3B,QAASwE,EACTxC,SAxJe,SAACtC,GAC5B+E,EAAW/E,EAAEE,OAAOI,QACtB,EAuJcuG,MAAO,CAAEC,MAAO,OAAQC,OAAQ,WAElChF,EAAAA,EAAAA,KAAA,SAAOd,UAAU,mBAAmBkB,QAAQ,kBAAiBP,SAAC,gBAKlEG,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAAC4B,GAAI,GAAG7B,UACXG,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CAACC,MAAM,UAAUtD,KAAK,SAAQuB,SAC5B,iBAOtB,EC3QMoF,EAAU,CACd,CAAEC,IAAK,WAAYC,MAAO,QAC1B,CAAED,IAAK,OAAQC,MAAO,eACtB,CAAED,IAAK,YAAaC,MAAO,QAC3B,CAAED,IAAK,QAASC,MAAO,SACvB,CAAED,IAAK,cAAeC,MAAO,kBAC7B,CAAED,IAAK,UAAWC,MAAO,YA8b3B,EA5bc,WACZ,IAAQ1I,GAAaC,EAAAA,EAAAA,KAAbD,SACF2I,EAAa,WAAH,OAAS3I,EAAS,CAAE6B,KAAM,eAAiB,EACrD+G,EAAa,WAAH,OAAS5I,EAAS,CAAE6B,KAAM,eAAiB,EAC3CgH,GAAYpC,EAAAA,EAAAA,aAAYqC,EAAAA,IAAhCnC,OACQoC,GAAatC,EAAAA,EAAAA,aAAYuC,EAAAA,IAAjCrC,OACRtG,GAAkCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvC4I,EAAS1I,EAAA,GAAE2I,EAAY3I,EAAA,GAC9BI,GAAwCL,EAAAA,EAAAA,UAAS,cAAaa,GAAAX,EAAAA,EAAAA,GAAAG,EAAA,GAAvD6E,EAAYrE,EAAA,GAAEgI,EAAehI,EAAA,GACpBiI,GAAU3C,EAAAA,EAAAA,aAAY4C,EAAAA,IAA9B1C,OACQ2C,GAAe7C,EAAAA,EAAAA,aAAY8C,EAAAA,IAAnC5C,OACQ6C,GAAkB/C,EAAAA,EAAAA,aAAYgD,EAAAA,IAAtC9C,OACQ+C,GAAuBjD,EAAAA,EAAAA,aACrCkD,EAAAA,IADMhD,OAGQiD,GAAoBnD,EAAAA,EAAAA,aAAYoD,EAAAA,IAAxClD,OACQmD,GAAoBrD,EAAAA,EAAAA,aAAYsD,EAAAA,IAAxCpD,OACQqD,GAAoBvD,EAAAA,EAAAA,aAAYwD,EAAAA,IAAxCtD,OACQuD,GAAsBzD,EAAAA,EAAAA,aAAY0D,EAAAA,IAA1CxD,OACQyD,GAAsB3D,EAAAA,EAAAA,aAAY4D,EAAAA,IAA1C1D,OACQ2D,GAAsB7D,EAAAA,EAAAA,aAAY8D,EAAAA,IAA1C5D,OAERf,GAAsCtF,EAAAA,EAAAA,WAAS,GAAMuF,GAAArF,EAAAA,EAAAA,GAAAoF,EAAA,GAA9C4E,EAAW3E,EAAA,GAAE4E,EAAc5E,EAAA,GAClCG,GAAgC1F,EAAAA,EAAAA,YAAU2F,GAAAzF,EAAAA,EAAAA,GAAAwF,EAAA,GAAnC0E,EAAQzE,EAAA,GAAE0E,EAAW1E,EAAA,GAC5BG,GAAkC9F,EAAAA,EAAAA,WAAS,GAAM+F,GAAA7F,EAAAA,EAAAA,GAAA4F,EAAA,GAA1CwE,EAASvE,EAAA,GAAEwE,EAAYxE,EAAA,GACtByE,GAAiB1I,EAAAA,EAAAA,KAAjB0I,aACFC,GAAiBtE,EAAAA,EAAAA,aAAYuE,EAAAA,IACnClE,GAAkCxG,EAAAA,EAAAA,WAAS,GAAK6G,GAAA3G,EAAAA,EAAAA,GAAAsG,EAAA,GAAzCmE,GAAS9D,EAAA,GAChB+D,IAD8B/D,EAAA,IACkB7G,EAAAA,EAAAA,WAAS,IAAM6K,IAAA3K,EAAAA,EAAAA,GAAA0K,GAAA,GAAxDE,GAAeD,GAAA,GAAEE,GAAoBF,GAAA,GACtCG,IAAWC,EAAAA,EAAAA,MAEXnM,GAAa,WACjBqL,GAAe,EACjB,EACMe,GAAmB,WACvBH,IAAqB,EACvB,EAuCAI,IAAgCnL,EAAAA,EAAAA,UAAS,IAAGoL,IAAAlL,EAAAA,EAAAA,GAAAiL,GAAA,GAArCE,GAAQD,GAAA,GAAEE,GAAWF,GAAA,GAM5B,SAASG,KACPzC,EAAM,GAAI,CACRzB,UAAW,SAACrI,GACV4J,EAAa5J,EAAKA,MAClBsJ,GACF,EACAhB,QAAS,SAACC,GAAW,GAEzB,CACA,SAASiE,GAAiBC,GACxBzC,EAAWyC,EAAO,CAChBpE,UAAW,SAACrI,GACV4J,EAAa5J,EAAKA,MAClBsJ,GACF,EACAhB,QAAS,SAACC,GAAW,GAEzB,CA6BA,SAASxI,GAAY2M,GACnBrD,IACAsD,YAAW,WACLrB,EACF/B,EAAQmD,EAAS,CACfrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,4BACV,IAEDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAAuB,EAAAC,EAAA,MAAO,CAClBJ,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAVwE,EAALxE,EAAO0E,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiB/M,YAAI,IAAAgN,OAAhB,EAALA,EAAuBzE,MAChC1C,MAAO,UACR,GACH,IAGF4D,EACE,CAAEiD,QAAAA,EAAStB,SAAAA,GACX,CACE/C,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,2BACV,IAEDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAA0B,EAAAC,EAAA,MAAO,CAClBP,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAV2E,EAAL3E,EAAO0E,gBAAQ,IAAAC,GAAM,QAANC,EAAfD,EAAiBlN,YAAI,IAAAmN,OAAhB,EAALA,EAAuB5E,MAChC1C,MAAO,UACR,GACH,GAIR,GAAG,EACL,EA7DA7D,EAAAA,EAAAA,YAAU,WACR,IAAMyK,EAAQrM,aAAaC,QAAQ,kBAC/BoM,EACFD,GAAiBC,GAEjBF,IAEJ,GAAG,IAuDH,IA2IMa,GAAmB,SAAClH,GACxB,IAAMuG,EAAQrM,aAAaC,QAAQ,kBAEnC,OAAQ6F,GACN,IAAK,WACCuG,GACF5C,EAAgB,YAzNxB,SAAkC4C,GAChCrC,EAAmBqC,EAAO,CACxBpE,UAAW,SAACrI,GACV4J,EAAa5J,EAAKA,MAClBsJ,GACF,EACAhB,QAAS,SAACC,GAAW,GAEzB,CAkNQ8E,CAAyBZ,KAEzB5C,EAAgB,YApOtBK,EAAc,GAAI,CAChB7B,UAAW,SAACrI,GACV4J,EAAa5J,EAAKA,MAClBsJ,GACF,EACAhB,QAAS,SAACC,GAAW,KAkOnB,MAEF,IAAK,aACCkE,GACF5C,EAAgB,cAChB2C,GAAiBC,KAEjB5C,EAAgB,cAChB0C,MAOR,EACAe,IAAkCxK,EAAAA,EAAAA,KAA1BC,GAAQuK,GAARvK,SAAqBuK,GAAXtK,YAElB,OACEC,EAAAA,EAAAA,MAAAuF,EAAAA,SAAA,CAAA1E,SAAA,EACEG,EAAAA,EAAAA,KAACsJ,EAAAA,EAAY,CACXV,MAAOvB,EAAY,WAAa,YAChCwB,QACExB,GACErH,EAAAA,EAAAA,KAACuJ,EAAY,CAAC1N,WAAYA,GAAYC,YAAaA,MAEnDkE,EAAAA,EAAAA,KAACuJ,EAAY,CACX1N,WAAYA,GACZC,YAAaA,GACbC,KAAMoL,IAIZqC,OAAQvC,EACRwC,QAAS5N,MAEXmE,EAAAA,EAAAA,KAACsJ,EAAAA,EAAY,CACXV,MAAwB,aAAjB3G,EAA8B,gBAAkB,cACvD4G,SACE7I,EAAAA,EAAAA,KAAC0J,EAAe,CACd7N,WAAYA,GACZmG,cAhMY,SAACyG,GACrBpD,IACIoD,EAAQhE,WACV4B,EAAgBoC,EAAS,CACvBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,yCACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBjB,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAVqF,EAALrF,EAAO0E,gBAAQ,IAAAW,GAAM,QAANC,EAAfD,EAAiB5N,YAAI,IAAA6N,OAAhB,EAALA,EAAuBtF,MAChC1C,MAAO,UACR,GACH,IAEO6G,EAAQ/D,aACjB6B,EAAgBkC,EAAS,CACvBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,2CACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAAsC,EAAAC,EAAA,MAAO,CAClBnB,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAVuF,EAALvF,EAAO0E,gBAAQ,IAAAa,GAAM,QAANC,EAAfD,EAAiB9N,YAAI,IAAA+N,OAAhB,EAALA,EAAuBxF,MAChC1C,MAAO,UACR,GACH,IAEO6G,EAAQ9D,UACjB8B,EAAgBgC,EAAS,CACvBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,uCACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAAwC,EAAAC,EAAA,MAAO,CAClBrB,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAVyF,EAALzF,EAAO0E,gBAAQ,IAAAe,GAAM,QAANC,EAAfD,EAAiBhO,YAAI,IAAAiO,OAAhB,EAALA,EAAuB1F,MAChC1C,MAAO,UACR,GACH,IAGJqG,IACF,EA8HUlM,KAAMqM,GACNnG,aAAcA,EACdC,gBA/Hc,SAACuG,GAEvB,IAAQhE,EAAuCgE,EAAvChE,WAAYC,EAA2B+D,EAA3B/D,aAAcC,EAAa8D,EAAb9D,SAE9BF,EACFkC,EAAkB8B,EAAS,CACzBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,6CACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAA0C,EAAAC,EAAA,MAAO,CAClBvB,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAV2F,EAAL3F,EAAO0E,gBAAQ,IAAAiB,GAAM,QAANC,EAAfD,EAAiBlO,YAAI,IAAAmO,OAAhB,EAALA,EAAuB5F,MAChC1C,MAAO,UACR,GACH,IAEO8C,EACTmC,EAAkB4B,EAAS,CACzBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,+CACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAA4C,EAAAC,EAAA,MAAO,CAClBzB,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAV6F,EAAL7F,EAAO0E,gBAAQ,IAAAmB,GAAM,QAANC,EAAfD,EAAiBpO,YAAI,IAAAqO,OAAhB,EAALA,EAAuB9F,MAChC1C,MAAO,UACR,GACH,IAEO+C,GACToC,EAAkB0B,EAAS,CACzBrE,UAAW,WACTiB,IACAkC,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,2CACV,IACDP,IACF,EACAjE,QAAS,SAACC,GACRe,IACAkC,GAAa,eAAA8C,EAAAC,EAAA,MAAO,CAClB3B,MAAM,EACNC,MAAO,QACPC,QAAc,OAALvE,QAAK,IAALA,GAAe,QAAV+F,EAAL/F,EAAO0E,gBAAQ,IAAAqB,GAAM,QAANC,EAAfD,EAAiBtO,YAAI,IAAAuO,OAAhB,EAALA,EAAuBhG,MAChC1C,MAAO,UACR,GACH,IAGJqG,IACF,IA6DMuB,OAAQ3B,GACR4B,QAASxB,MAEXjJ,EAAAA,EAAAA,MAACuL,EAAAA,GAAK,CACJrL,UAAS,6BAAAiB,OACPrB,GAAW,uBAAyB,IACnCe,SAAA,EAEHb,EAAAA,EAAAA,MAACwL,EAAAA,GAAI,CAAA3K,SAAA,EACHG,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAAAD,UACHG,EAAAA,EAAAA,KAAA,MAAId,UAAU,OAAOgB,GAAE,GAAAC,OAAKrB,GAAW,eAAiB,IAAKe,SAAC,aAIhEG,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAACC,GAAI,EAAGb,UAAU,YAAWW,UAChCb,EAAAA,EAAAA,MAAA,UACEyL,KAAK,KACLvL,UAAS,gBAAAiB,OAAkBrB,GAAW,cAAgB,IACtD,aAAW,aACX4L,aAAa,SACbnK,SAAU,SAACtC,GAAC,OAAKkL,GAAiBlL,EAAEE,OAAOE,MAAM,EAACwB,SAAA,EAElDG,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,aAAYwB,SAAC,gBAC3BG,EAAAA,EAAAA,KAAA,UAAQ3B,MAAM,WAAUwB,SAAC,mBAG7BG,EAAAA,EAAAA,KAACF,EAAAA,GAAI,CAAAD,UACHG,EAAAA,EAAAA,KAAC2B,EAAAA,GAAO,CACNC,MAAM,UACN1C,UAAU,YACVsF,QAAS,WACP8C,GAAa,GACbF,EAAY,MACZF,GAAe,EACjB,EAAErH,SACH,mBAKJ6F,GACC1F,EAAAA,EAAAA,KAAC2K,EAAAA,EAAY,CACX1F,QAASA,EACN2F,QAAO,SAACC,GACP,QACiC,eAA/B5I,EAAa6I,gBACG,aAAfD,EAAO3F,KAAqC,SAAf2F,EAAO3F,KAEzC,IACCxE,KAAI,SAACmK,GACJ,OAAOA,CACT,IACFE,aAxYe,SAACC,GACxB5F,IACAoC,EAAepE,OAAO4H,EAAKtH,OAAQ,CACjCU,UAAW,WACTmD,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,UACPC,QAAS,4BACV,IAEDP,KAEAjD,GACF,EACAhB,QAAS,SAACC,GACW,oBAAfA,EAAM2G,OACR9O,aAAa+O,WAAW,SACxB/O,aAAa+O,WAAW,kBACxB/O,aAAa+O,WAAW,cACxB/O,aAAa+O,WAAW,gBACxBnD,GAAS,WAEXR,GAAa,iBAAO,CAClBoB,MAAM,EACNC,MAAO,QACPC,QAASvE,EAAM0E,SAASjN,KAAKuI,MAC9B,IACDe,GACF,IAEFA,GACF,EA0WUpD,aAAcA,EACdlG,KAAM2J,EACNyF,cA3WY,SAACpP,GACrBuL,GAAa,GACbF,EAAYrL,GACZmL,GAAe,EACjB,EAwWUkE,UAAW1D,GACX2D,gBAvWc,SAACtP,GACvBsM,GAAYtM,GACZ+L,IAAqB,EACvB,KAuWQ9H,EAAAA,EAAAA,KAACsL,EAAAA,EAAY,SAKvB,C","sources":["views/forms/add-staff-form/add-staff-form.js","views/forms/assign-staff-form/assign-staff-form.js","views/pages/Staff/Users/user.js"],"sourcesContent":["// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLocationPin, cilPaperPlane, cilPhone } from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport useDataStore from \"src/store/state\";\n\n// eslint-disable-next-line react/prop-types\nconst AddStaffForm = ({ closeModal, saveHandler, data }) => {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const { dispatch } = useLoader();\n  const dataOrganization = useDataStore((state) => state.data);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    customerid: \"\",\n    isSuperAdmin: false,\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        customerid: data.customerid,\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        address: data.address,\n        phonenumber: data.phonenumber,\n      }));\n    }\n  }, [data]);\n\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"customerid\") {\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  useEffect(() => {}, [darkMode]);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Phone Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhonenumber\"\n        >\n          Phone Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Phonenumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Phone Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit User \" : \"Add User \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddStaffForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      roleid: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default AddStaffForm;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CButton, CCol, CForm, CFormSelect, CFormLabel } from \"@coreui/react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { getDepartmentsData, getFacilitiesData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { getAllDevicesData } from \"src/hooks/useDevices\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nconst AssignStaffForm = ({\n  closeModal,\n  assignHandler,\n  data,\n  selectedRole,\n  UnAssignHandler,\n}) => {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const [validated, setValidated] = useState(false);\n  const [facilityData, setFacilityData] = useState();\n  const [departmentsData, setDepartmentsData] = useState();\n  const [deviceData, setDeviceData] = useState();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const { dispatch } = useLoader();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [formData, setFormData] = useState({\n    userid: data.userid,\n    is_admin: isAdmin,\n  });\n  //   useEffect(() => {\n  //     if (data) {\n  //       setFormData(() => ({\n  //         facilityid: data?.facilityid,\n  //         departmentid: data?.departmentid,\n  //         deviceid: data?.deviceid,\n  //       }));\n  //     }\n  //   }, [data]);\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data);\n        },\n        onError: (error) => {},\n      });\n    }\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  const handleInputChange = (e) => {\n    console.log(e.target.value);\n    const { name, value, type, checked } = e.target;\n    console.log(e.target.value);\n    const parsedValue =\n      (name === \"deviceid\" ||\n        name === \"facilityid\" ||\n        name === \"departmentid\") &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getAllDev } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    getAllDev(\"\", {\n      onSuccess: (data) => {\n        setDeviceData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleCheckboxChange = (e) => {\n    setIsAdmin(e.target.checked);\n  };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n    debugger;\n    setFormData({\n      ...formData,\n      is_admin: isAdmin,\n    });\n\n    if (form.checkValidity() === true) {\n      console.log(formData);\n      debugger;\n      showLoader();\n      assignHandler(formData);\n      closeModal();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  useEffect(() => {\n    getAllFacilities();\n    getAllDepartments();\n    getAllDevices();\n  }, []);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {selectedRole === \"Assigned\" ? (\n        <>\n          <h4 className=\"ms-3 pt-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n            Are you sure you want to UnAssign this User ?{\" \"}\n          </h4>\n\n          <CCol\n            xs={11}\n            className={`modal-light ${darkMode ? \"modal-dark\" : \"\"}`}\n          >\n            <CButton\n              color=\"danger\"\n              className=\"float-end ms-2\"\n              onClick={() => {\n                UnAssignHandler(data);\n              }}\n            >\n              UnAssign\n            </CButton>\n          </CCol>\n        </>\n      ) : (\n        <>\n          {\" \"}\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationManufacturerName\"\n            >\n              Facility*\n            </CFormLabel>\n            <CFormSelect\n              name=\"facilityid\"\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid facility.\"\n              id=\"validationFacilities\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              value={formData.facilityid}\n              onChange={handleInputChange}\n              disabled={formData.departmentid || formData.deviceid}\n            >\n              <option>Facilities</option>\n              {facilityData?.data?.map((item) => {\n                return (\n                  <option key={item.facilityid} value={item.facilityid}>\n                    {item.name}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          {/*Department Selection */}\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationManufacturerName\"\n            >\n              Department Selection*\n            </CFormLabel>\n            <CFormSelect\n              name=\"departmentid\"\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid facility.\"\n              id=\"validationDepartment\"\n              value={formData.departmentid}\n              onChange={handleInputChange}\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              disabled={formData.facilityid || formData.deviceid}\n            >\n              <option>Departments</option>\n              {departmentsData?.data?.map((item) => {\n                return (\n                  <option key={item.departmentid} value={item.departmentid}>\n                    {item.departmentname}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          <CCol md={12}>\n            <CFormLabel\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              htmlFor=\"validationFacilityName\"\n            >\n              Devices\n            </CFormLabel>\n            <CFormSelect\n              name=\"deviceid\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-describedby=\"validationCustom04Feedback\"\n              feedbackInvalid=\"Please select a valid Device.\"\n              value={formData.deviceid}\n              onChange={handleInputChange}\n              disabled={formData.facilityid || formData.departmentid}\n            >\n              <option>Devices</option>\n              {deviceData?.data?.map((item) => {\n                return (\n                  <option key={item.deviceid} value={item.deviceid}>\n                    {item.devicename}\n                  </option>\n                );\n              })}\n            </CFormSelect>\n          </CCol>\n          <CCol xs={12}>\n            <div className=\"form-check\">\n              <input\n                type=\"checkbox\"\n                className=\"form-check-input\"\n                id=\"isAdminCheckbox\"\n                checked={isAdmin}\n                onChange={handleCheckboxChange}\n                style={{ width: \"20px\", height: \"20px\" }}\n              />\n              <label className=\"form-check-label\" htmlFor=\"isAdminCheckbox\">\n                Admin\n              </label>\n            </div>\n          </CCol>\n          <CCol xs={12}>\n            <CButton color=\"primary\" type=\"submit\">\n              {data ? \"Assign\" : \"Assign\"}\n            </CButton>\n          </CCol>\n        </>\n      )}\n    </CForm>\n  );\n};\nAssignStaffForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    deviceName: PropTypes.string,\n    name: PropTypes.string,\n    manufacturerName: PropTypes.string,\n    facilityid: PropTypes.string,\n    department: PropTypes.string,\n    manufacturer: PropTypes.string,\n    system: PropTypes.shape({\n      systemName: PropTypes.string,\n    }),\n  }),\n};\n\nexport default AssignStaffForm;\n","// /* eslint-disable prettier/prettier */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n  getAllassignedUsersData,\n  getAllassignedUsersDataByOrg,\n  addUser,\n  deleteUsers,\n  EditUser,\n  assignFacilityUser,\n  assignDepartmentUser,\n  assignDeviceUser,\n  UnassignFacilityUser,\n  UnassignDepartmentUser,\n  UnassignDeviceUser,\n} from \"src/hooks/useUsers\";\nimport AddStaffForm from \"src/views/forms/add-staff-form/add-staff-form\";\nimport AssignStaffForm from \"src/views/forms/assign-staff-form/assign-staff-form\";\nconst columns = [\n  { key: \"rolename\", label: \"Role\" },\n  { key: \"name\", label: \"Assigned To\" },\n  { key: \"firstname\", label: \"Name\" },\n  { key: \"email\", label: \"Email\" },\n  { key: \"phonenumber\", label: \"Contact Number\" },\n  { key: \"address\", label: \"Address\" },\n];\nconst Users = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: UserAdd } = useMutation(addUser);\n  const { mutate: userEdit } = useMutation(EditUser);\n  const [usersData, setUsersData] = useState([]);\n  const [selectedRole, setSelectedRole] = useState(\"UnAssigned\");\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const { mutate: UsersByOrg } = useMutation(getAllUnassignedUsersDataByOrg);\n  const { mutate: AssignedUsers } = useMutation(getAllassignedUsersData);\n  const { mutate: AssignedUsersByOrg } = useMutation(\n    getAllassignedUsersDataByOrg\n  );\n  const { mutate: assignUserToFac } = useMutation(assignFacilityUser);\n  const { mutate: assignUserToDep } = useMutation(assignDepartmentUser);\n  const { mutate: assignUserToDev } = useMutation(assignDeviceUser);\n  const { mutate: UnassignUserToFac } = useMutation(UnassignFacilityUser);\n  const { mutate: UnassignUserToDep } = useMutation(UnassignDepartmentUser);\n  const { mutate: UnassignUserToDev } = useMutation(UnassignDeviceUser);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteUserById = useMutation(deleteUsers);\n  const [deluserid, setDeluserId] = useState(true);\n  const [AssignModalOpen, setIsAssignModalOpen] = useState(false);\n  const navigate = useNavigate();\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const closeAssignModal = () => {\n    setIsAssignModalOpen(false);\n  };\n\n  const deleteFacilities = (user) => {\n    showLoader();\n    deleteUserById.mutate(user.userid, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"User deleted Successfully\",\n        }));\n\n        getAllUsers();\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  const [userData, setUserData] = useState([]);\n  const openAssignModal = (data) => {\n    setUserData(data);\n    setIsAssignModalOpen(true);\n  };\n\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllUsersByOrg(orgId) {\n    UsersByOrg(orgId, {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllAssignedUsers() {\n    AssignedUsers(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllAssignedUsersByOrg(orgId) {\n    AssignedUsersByOrg(orgId, {\n      onSuccess: (data) => {\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n\n  useEffect(() => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n    if (orgId) {\n      getAllUsersByOrg(orgId);\n    } else {\n      getAllUsers();\n    }\n  }, []);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        UserAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"User Created Successfully\",\n            }));\n\n            getAllUsers();\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        userEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"User Edited Successfully\",\n              }));\n\n              getAllUsers();\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data?.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const assignHandler = (handler) => {\n    hideLoader();\n    if (handler.facilityid) {\n      assignUserToFac(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Facility Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (handler.departmentid) {\n      assignUserToDep(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Department Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (handler.deviceid) {\n      assignUserToDev(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User Assigned to Device Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    }\n    closeAssignModal();\n  };\n  const UnAssignHandler = (handler) => {\n    debugger;\n    const { facilityid, departmentid, deviceid } = handler;\n\n    if (facilityid) {\n      UnassignUserToFac(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Facility Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (departmentid) {\n      UnassignUserToDep(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Department Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    } else if (deviceid) {\n      UnassignUserToDev(handler, {\n        onSuccess: () => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Success\",\n            content: \"User UnAssigned From Device Successfully\",\n          }));\n          getAllUsers();\n        },\n        onError: (error) => {\n          hideLoader();\n          setShowToast(() => ({\n            show: true,\n            title: \"Error\",\n            content: error?.response?.data?.error,\n            color: \"#FF0000\",\n          }));\n        },\n      });\n    }\n    closeAssignModal();\n  };\n\n  const handleRoleChange = (selectedRole) => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n\n    switch (selectedRole) {\n      case \"Assigned\":\n        if (orgId) {\n          setSelectedRole(\"Assigned\");\n          getAllAssignedUsersByOrg(orgId);\n        } else {\n          setSelectedRole(\"Assigned\");\n          getAllAssignedUsers();\n        }\n        break;\n\n      case \"UnAssigned\":\n        if (orgId) {\n          setSelectedRole(\"UnAssigned\");\n          getAllUsersByOrg(orgId);\n        } else {\n          setSelectedRole(\"UnAssigned\");\n          getAllUsers();\n        }\n        break;\n\n      default:\n        break;\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add User\" : \"Edit User\"}\n        content={\n          isAddMode ? (\n            <AddStaffForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddStaffForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <GenericModal\n        title={selectedRole === \"Assigned\" ? \"UnAssign User\" : \"Assign User\"}\n        content={\n          <AssignStaffForm\n            closeModal={closeModal}\n            assignHandler={assignHandler}\n            data={userData}\n            selectedRole={selectedRole}\n            UnAssignHandler={UnAssignHandler}\n          />\n        }\n        isOpen={AssignModalOpen}\n        onClose={closeAssignModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Users\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={(e) => handleRoleChange(e.target.value)}\n            >\n              <option value=\"UnAssigned\">UnAssigned</option>\n              <option value=\"Assigned\">Assigned</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Users\n            </CButton>\n          </CCol>\n        </CRow>\n        {usersData ? (\n          <GenericTable\n            columns={columns\n              .filter((column) => {\n                return !(\n                  selectedRole.toLowerCase() === \"unassigned\" &&\n                  (column.key === \"rolename\" || column.key === \"name\")\n                );\n              })\n              .map((column) => {\n                return column;\n              })}\n            OnDeleteItem={deleteFacilities}\n            selectedRole={selectedRole}\n            data={usersData}\n            openEditModal={openEditModal}\n            delUserId={deluserid}\n            openAssignModal={openAssignModal}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Users;\n"],"names":["_ref","_dataOrganization$","closeModal","saveHandler","data","userPermissions","JSON","parse","localStorage","getItem","organizationPermission","hasPermissionToActionAccess","_organization","_view","dispatch","useLoader","dataOrganization","useDataStore","state","_useState","useState","_useState2","_slicedToArray","validated","setValidated","_useState3","firstname","lastname","email","address","phonenumber","customerid","isSuperAdmin","_useState4","formData","setFormData","useEffect","handleInputChange","e","_e$target","target","name","value","type","checked","parsedValue","parseInt","_objectSpread","_defineProperty","_useGlobalInfo","useGlobalInfo","darkMode","setDarkMode","_jsxs","CForm","className","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","console","log","children","CCol","md","_jsx","CFormLabel","id","concat","htmlFor","CFormSelect","feedbackInvalid","onChange","required","disabled","map","item","customername","CInputGroup","CInputGroupText","CFormInput","CIcon","icon","cilPaperPlane","alt","_e$target2","inputEmail","isValid","test","cilLocationPin","cilPhone","xs","CButton","color","_facilityData$data","_departmentsData$data","_deviceData$data","assignHandler","selectedRole","UnAssignHandler","facilityData","setFacilityData","_useState5","_useState6","departmentsData","setDepartmentsData","_useState7","_useState8","deviceData","setDeviceData","_useState9","_useState10","isAdmin","setIsAdmin","facility","useMutation","getAllFacilitiesData","mutate","getAllDep","getAllDepartmentsData","_useState11","_facility","_department","userid","is_admin","_useState12","getFacilitiesData","getDepartmentsData","charAt","toUpperCase","slice","getAllDev","getAllDevicesData","onSuccess","onError","error","_Fragment","onClick","facilityid","departmentid","deviceid","departmentname","devicename","style","width","height","columns","key","label","showLoader","hideLoader","UserAdd","addUser","userEdit","EditUser","usersData","setUsersData","setSelectedRole","Users","getAllUnassignedUsersData","UsersByOrg","getAllUnassignedUsersDataByOrg","AssignedUsers","getAllassignedUsersData","AssignedUsersByOrg","getAllassignedUsersDataByOrg","assignUserToFac","assignFacilityUser","assignUserToDep","assignDepartmentUser","assignUserToDev","assignDeviceUser","UnassignUserToFac","UnassignFacilityUser","UnassignUserToDep","UnassignDepartmentUser","UnassignUserToDev","UnassignDeviceUser","isModalOpen","setIsModalOpen","editData","setEditData","isAddMode","setIsAddMode","setShowToast","deleteUserById","deleteUsers","deluserid","_useState13","_useState14","AssignModalOpen","setIsAssignModalOpen","navigate","useNavigate","closeAssignModal","_useState15","_useState16","userData","setUserData","getAllUsers","getAllUsersByOrg","orgId","handler","setTimeout","show","title","content","_error$response","_error$response$data","response","_error$response2","_error$response2$data","handleRoleChange","getAllAssignedUsersByOrg","_useGlobalInfo2","GenericModal","AddStaffForm","isOpen","onClose","AssignStaffForm","_error$response3","_error$response3$data","_error$response4","_error$response4$data","_error$response5","_error$response5$data","_error$response6","_error$response6$data","_error$response7","_error$response7$data","_error$response8","_error$response8$data","CCard","CRow","size","defaultValue","GenericTable","filter","column","toLowerCase","OnDeleteItem","user","code","removeItem","openEditModal","delUserId","openAssignModal","GlobalLoader"],"sourceRoot":""}