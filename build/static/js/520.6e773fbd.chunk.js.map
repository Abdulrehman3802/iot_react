{"version":3,"file":"static/js/520.6e773fbd.chunk.js","mappings":"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","sources":["views/forms/add-staff-form/add-staff-form.js","views/pages/Staff/Users/user.js"],"sourcesContent":["// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllRolesData } from \"src/hooks/useUsers\";\nimport { useMutation } from \"react-query\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddStaffForm = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const { mutate: Roles } = useMutation(getAllRolesData);\n  const [UserData, setUserdata] = useState([]);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    roleid: 0,\n  });\n  useEffect(() => {\n    //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        address: data.address,\n        phonenumber: data.phonenumber,\n        roleid: data.roleid,\n      }));\n    }\n  }, [data]);\n  function getAllRoles() {\n    // // //debugger\n    Roles(\"\", {\n      onSuccess: (data) => {\n        setUserdata(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const parsedValue = name === \"roleid\" ? parseInt(value, 10) : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  useEffect(() => {\n    if (!data) {\n      getAllRoles();\n    }\n  }, [darkMode]);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Role\n        </CFormLabel>\n        <CFormSelect\n          name=\"roleid\"\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility.\"\n          id=\"validationFacility\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.roleid}\n          onChange={handleInputChange}\n          disabled={data ? true : false}\n          required\n          // eslint-disable-next-line react/prop-types\n        >\n          <option>Select Role</option>\n          {UserData?.map((item) => {\n            return (\n              <option key={item.roleid} value={item.roleid}>\n                {item.name}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Phone Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhonenumber\"\n        >\n          Phone Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Phonenumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Phone Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Staff \" : \"Add Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddStaffForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      roleid: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default AddStaffForm;\n","// /* eslint-disable prettier/prettier */\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  useAllFacilitiesData,\n  addFacility,\n  EditFacility,\n  deleteFacility,\n  getAllFacilitiesData,\n} from \"src/hooks/useFacilities\";\nimport {\n  getAllFacilitiesStaffData,\n  addFacilityStaff,\n  EditFacilityStaff,\n} from \"src/hooks/useFacilitiesStaff\";\nimport AddFacilityStaff from \"src/views/forms/add-facility-staff-form/add-facility-staff\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport {\n  getAllUsersData,\n  addUser,\n  deleteUsers,\n  EditUser,\n} from \"src/hooks/useUsers\";\nimport AddStaffForm from \"src/views/forms/add-staff-form/add-staff-form\";\nconst columns = [\n  { key: \"rolename\", label: \"Role\" },\n  { key: \"firstname\", label: \"Name\" },\n  // { key: 'userroles[0].roles.name', label: 'Role' },\n  { key: \"email\", label: \"Email\" },\n  { key: \"phonenumber\", label: \"Contact Number\" },\n  { key: \"address\", label: \"Address\" },\n];\nconst Users = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: UserAdd } = useMutation(addUser);\n  const { mutate: facilityStaffAdd } = useMutation(addFacilityStaff);\n\n  const { mutate: userEdit } = useMutation(EditUser);\n  const { mutate: facilityEdit } = useMutation(EditFacility);\n  const [usersData, setUsersData] = useState([]);\n  const { mutate: Users } = useMutation(getAllUsersData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteUserById = useMutation(deleteUsers);\n  const [deluserid, setDeluserId] = useState(true);\n\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes a Fecility by its ID.\n   * @param {number} facilityId - The ID of the Facility to be deleted.\n   */\n  const deleteFacilities = (user) => {\n    //debugger\n    showLoader();\n    deleteUserById.mutate(user.userid, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"User deleted Successfully\",\n        }));\n\n        getAllUsers();\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n\n  function getAllUsers() {\n    // //debugger\n    Users(\"\", {\n      onSuccess: (data) => {\n        // // //debugger\n        setUsersData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n\n  useEffect(() => {\n    getAllUsers();\n  }, []);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        // //debugger\n        UserAdd(handler, {\n          onSuccess: () => {\n            // //debugger\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"User Created Successfully\",\n            }));\n            // if (\n            //   localStorage.getItem('OrganizationId') === null ||\n            //   localStorage.getItem('OrganizationId') === undefined\n            // ) {\n            getAllUsers();\n            // } else {\n            //   facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n            // }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        //debugger\n        userEdit(\n          { handler, editData },\n\n          {\n            onSuccess: () => {\n              //debugger\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"User Edited Successfully\",\n              }));\n\n              getAllUsers();\n            },\n            onError: (error) => {\n              //debugger\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data?.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Staff\" : \"Edit Staff\"}\n        content={\n          isAddMode ? (\n            <AddStaffForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddStaffForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Users\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Users\n            </CButton>\n          </CCol>\n        </CRow>\n        {usersData ? (\n          <GenericTable\n            columns={columns}\n            OnDeleteItem={deleteFacilities}\n            data={usersData}\n            openEditModal={openEditModal}\n            delUserId={deluserid}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Users;\n"],"names":["_ref","closeModal","saveHandler","data","dispatch","useLoader","Roles","useMutation","getAllRolesData","mutate","_useState","useState","_useState2","_slicedToArray","UserData","setUserdata","_useState3","_useState4","validated","setValidated","_useState5","firstname","lastname","email","address","phonenumber","roleid","_useState6","formData","setFormData","useEffect","handleInputChange","e","_e$target","target","name","value","type","checked","parsedValue","parseInt","_objectSpread","_defineProperty","_useGlobalInfo","useGlobalInfo","darkMode","setDarkMode","onSuccess","onError","error","_jsxs","CForm","className","noValidate","onSubmit","event","form","currentTarget","preventDefault","checkValidity","stopPropagation","console","log","children","CCol","md","_jsx","CFormLabel","id","concat","htmlFor","CFormSelect","feedbackInvalid","onChange","disabled","required","map","item","CInputGroup","CInputGroupText","CFormInput","CIcon","icon","cilPaperPlane","alt","_e$target2","inputEmail","isValid","test","cilLocationPin","cilPhone","xs","CButton","color","columns","key","label","showLoader","hideLoader","UserAdd","addUser","userEdit","addFacilityStaff","EditUser","EditFacility","usersData","setUsersData","Users","getAllUsersData","isModalOpen","setIsModalOpen","editData","setEditData","_useState7","_useState8","isAddMode","setIsAddMode","setShowToast","deleteUserById","deleteUsers","_useState9","_useState10","deluserid","navigate","useNavigate","getAllUsers","handler","setTimeout","show","title","content","_error$response","_error$response$data","response","_error$response2","_error$response2$data","_useGlobalInfo2","_Fragment","GenericModal","AddStaffForm","isOpen","onClose","CCard","CRow","onClick","GenericTable","OnDeleteItem","user","userid","code","localStorage","removeItem","openEditModal","delUserId","GlobalLoader"],"sourceRoot":""}