{"version":3,"file":"static/js/313.a74e964d.chunk.js","mappings":"qJAsBA,IAjBqB,WACnB,OACEA,EAAAA,EAAAA,KAAA,OACEC,UAAU,yDACVC,MAAO,CAAEC,OAAQ,SAAUC,UAE3BJ,EAAAA,EAAAA,KAACK,EAAAA,EAAe,CACdC,KAAM,IACNC,UAAW,IACXC,MAAO,IACPC,MAAM,UACNC,eAAe,yBAIvB,C,8LCHA,EAZoB,SAACC,GACnB,IAAMC,EAAcC,aAAaC,QAAQ,eAIzC,OAFeC,EAAAA,EAAAA,IAA4BH,EAAaD,EAAMK,WAAYL,EAAMM,aAGvEjB,EAAAA,EAAAA,KAACW,EAAMO,UAAS,KAEhBlB,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAACC,GAAG,SAASC,SAAO,GAExC,E,WCHMC,EAAiBC,EAAAA,MAAW,kBAAM,8BAAiD,IAUnFC,EAAQD,EAAAA,MAAW,kBAAM,8BAAwC,IAMjEE,EAAiBF,EAAAA,MAAW,kBAAM,8BAAuD,IA+F/F,EA9Fe,CACb,CAAEG,KAAM,IAAKC,OAAO,EAAMC,KAAM,QA0BhC,CACEF,KAAM,SACNE,KAAM,QACNC,QAASC,EAAAA,SAEX,CACEJ,KAAM,mBACNE,KAAM,iBACNC,QAASP,GAYX,CACEI,KAAM,uCACNE,KAAM,qBACNC,QAASE,EAAAA,GAiBX,CACEL,KAAM,SACNE,KAAM,QACNC,QAASL,GAiBX,CACEE,KAAM,oBACNE,KAAM,iBACNC,QAASJ,I,yLC/FPO,EAAa,WACjB,IAAQC,GAAcC,EAAAA,EAAAA,KAAdD,UAERE,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEtC,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,SACG6B,GACCjC,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,KAEbxC,EAAAA,EAAAA,KAACyC,EAAAA,GAAU,CACTC,GAAG,kBACHzC,UAAS,yBAAA0C,OAA2BN,EAAW,uBAAyB,IACxEnC,MAAO,CAAE0C,SAAU,SACnBC,IAAE,EAAAzC,UAEFJ,EAAAA,EAAAA,KAAC8C,EAAAA,SAAQ,CAACC,UAAU/C,EAAAA,EAAAA,KAACgD,EAAAA,GAAQ,CAACvC,MAAM,YAAaL,UAC/C6C,EAAAA,EAAAA,MAACC,EAAAA,GAAM,CAAA9C,SAAA,CACJ+C,EAAOC,KAAI,SAACC,EAAOC,GAClB,OACED,EAAMxB,UACJ7B,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CAEJ7B,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,KAAMyB,EAAMzB,KACZC,SAAS7B,EAAAA,EAAAA,KAACqD,EAAMxB,QAAO,KAJlByB,EAQb,KACAtD,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CAAC7B,KAAK,IAAIG,SAAS7B,EAAAA,EAAAA,KAACmB,EAAAA,GAAQ,CAACC,GAAG,YAAYC,SAAO,OACzDrB,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJ7B,KAAK,aACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWuC,EAAAA,QACXzC,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAInB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJ7B,KAAK,iBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWyC,EAAAA,QACX3C,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAInB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJ7B,KAAK,cACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW0C,EAAAA,QACX5C,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAInB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACJ7B,KAAK,cACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW2C,EAAAA,QACX7C,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIjB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACN7B,KAAK,WACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW4C,EAAAA,QACX9C,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,oBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW6C,EAAAA,QACX/C,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,iBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW8C,EAAAA,QACXhD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,oBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAW+C,EAAAA,QACXjD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,wBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWgD,EAAAA,QACXlD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,mBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWiD,EAAAA,QACXnD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,WACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWkD,EAAAA,QACXpD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIjB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACN7B,KAAK,uBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWmD,EAAAA,QACXrD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,SAIlB1D,EAAAA,EAAAA,KAACuD,EAAAA,GAAK,CACL7B,KAAK,gBACLG,SACE7B,EAAAA,EAAAA,KAACwD,EAAW,CACVtC,UAAWoD,EAAAA,QAEXtD,WAAY0C,EAAAA,GACZzC,WAAY,CAACyC,EAAAA,gBAUjC,EAEA,EAAenC,EAAAA,KAAWS,G,6EClB1B,EA5I0B,SAAHuC,GAAyC,IAAnCC,EAASD,EAATC,UAAWC,EAAgBF,EAAhBE,iBActC,IAAMC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAElD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAYF5C,IAV6BpB,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,KAEgC3C,EAAAA,EAAAA,MAA1BC,EAAQF,EAARE,SACF+C,GADuBjD,EAAXG,YACUzB,aAAaC,QAAQ,qBAC3CuE,GAAWC,EAAAA,EAAAA,MAIjB,OACErC,EAAAA,EAAAA,MAACsC,EAAAA,GAAS,CAACC,QAAQ,WAAUpF,SAAA,EAC3BJ,EAAAA,EAAAA,KAACyF,EAAAA,GAAe,CAACC,UAAU,aAAazF,UAAU,OAAO0F,OAAO,EAAMvF,SAClEqE,IAAoBzE,EAAAA,EAAAA,KAAC4F,EAAAA,GAAO,CAACC,IAAKpB,EAAkBnE,KAAK,QACxD8E,GAA+C,cAAxBA,IACtBpF,EAAAA,EAAAA,KAAC4F,EAAAA,GAAO,CAACC,IAAKT,EAAqB9E,KAAK,SACpCN,EAAAA,EAAAA,KAAC4F,EAAAA,GAAO,CAACC,I,k5OAAcvF,KAAK,UAEtCN,EAAAA,EAAAA,KAAC8F,EAAAA,GAAa,CACZ7F,UAAS,SAAA0C,OAAWN,EAAW,gBAAkB,IACjDqD,UAAU,aAAYtF,UA8DtB6C,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAAA3F,SAAA,CACb4E,IAAuBH,IAC5B5B,EAAAA,EAAAA,MAAA,OAAK+C,QA7EW,WAChBxB,GACF,EA2E0BpE,SAAA,EACtBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAMC,EAAAA,EACNlG,UAAU,OACVC,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,YAEpCT,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,SAAUL,SAAC,iBAI/C6C,EAAAA,EAAAA,MAAA,OAAK+C,QA7Hb,WACEnF,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBxF,aAAawF,WAAW,eACxBxF,aAAawF,WAAW,oBACxBxF,aAAawF,WAAW,oBACxBxF,aAAawF,WAAW,kBAGxBhB,EAAS,SACX,EAiHoCjF,SAAA,EAC1BJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAMI,EAAAA,EACNrG,UAAU,OACVC,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,YAEpCT,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,SAAUL,SAAC,uBAM/D,E,kGCNA,EA/IiB,SAAHmE,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KACnCC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAERC,IAD0BC,EAAAA,EAAAA,aAAYC,EAAAA,IAA9BC,QACwBC,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAE5CO,GAFeF,EAAA,GAAaA,EAAA,IAEMD,EAAAA,EAAAA,WAAS,IAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1CE,EAASD,EAAA,GAChBE,GAD8BF,EAAA,IACEJ,EAAAA,EAAAA,UAAS,CACvCO,iBAAkBzG,aAAaC,QAAQ,oBACvCyG,KAAM,QACNC,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAHKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAI5BG,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,GAAY,iBAAO,CACjBE,UAAWnB,EAAKmB,UAChBC,SAAUpB,EAAKoB,SACfC,MAAOrB,EAAKqB,MACZC,QAAStB,EAAKsB,QACdC,YAAavB,EAAKuB,YAClBC,OAAQxB,EAAKwB,OACd,GAEL,GAAG,CAACxB,IACJ,IA6CAtE,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAGlB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAzBiB,SAACC,GACPA,EAAMC,cACnBD,EAAME,iBAjDiB7B,EAAS,CAAE8B,KAAM,gBA2DtChC,EAAYiB,GAEZlB,GAEJ,EAS2BnG,SAAA,EAIvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sBAAqBxI,SAC9B,iBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAIhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,OAELoH,SA1Ee,SAACC,GACxB,IAAM1B,EAAO0B,EAAEC,OAAOC,MAAM,IAAM,KAClCzB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IACXF,KAAMA,IAEV,EAqEU8B,gBAAgB,yBAChB3G,GAAG,qBACH4G,UAAQ,WAadtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SACd,eAMT,EC2YA,EA3ekB,WAAO,IAADqJ,EAChBC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMF,OAAO,IAC/ClF,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAChDiJ,GAAoB3H,EAAAA,EAAAA,KAApB2H,gBACArD,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFrB,GAAWC,EAAAA,EAAAA,MACX0E,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EACrD0B,GAAaC,EAAAA,EAAAA,MACnBxD,GAAgDI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAArDyD,EAAgBpD,EAAA,GAAEqD,EAAmBrD,EAAA,GAC5BsD,GAAa1D,EAAAA,EAAAA,aAAY2D,EAAAA,IAAjCzD,OACQ0D,GAAc5D,EAAAA,EAAAA,aAAY6D,EAAAA,IAAlC3D,OACFjC,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAEI2F,GAAuB3J,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,IAEI4F,GAAmB5J,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAEI6F,EAAO/J,aAAaC,QAAQ,SAC9B+J,EAAO,GACPhG,EACFgG,EAAO,aACE7F,EACT6F,EAAO,qBACEH,EACTG,EAAO,iBACEF,IACTE,EAAO,oBAET,IAAAC,GAQI1I,EAAAA,EAAAA,KAPF2I,EAAYD,EAAZC,aACAC,EAAeF,EAAfE,gBACAC,EAAeH,EAAfG,gBACAC,EAAkBJ,EAAlBI,mBAGAC,GAFWL,EAAXM,YAEcN,EAAdK,gBAiDIE,GAAcC,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMuB,WAAW,IAC5CE,GAAoB3E,EAAAA,EAAAA,aAAY4E,EAAAA,IAAxC1E,OA6BR,IAAgB2E,GAAkB7E,EAAAA,EAAAA,aAAY8E,EAAAA,IAAtC5E,OACR,SAAS6E,EAAoBC,GAC3B5B,IACAyB,EAAcG,EAAY,CACxBC,UAAW,SAACpF,GACVwD,IACAe,EAAgBvE,EAAKA,KACvB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgB+B,GAAepF,EAAAA,EAAAA,aAAYqF,EAAAA,IAAnCnF,OAaR,IAAgBoF,IAAoBtF,EAAAA,EAAAA,aAAYuF,EAAAA,IAAxCrF,OAaR,IAAgBsF,IAAoBxF,EAAAA,EAAAA,aAAYyF,EAAAA,IAAxCvF,OAwBR,IAAgBwF,IAAmB1F,EAAAA,EAAAA,aAAY2F,EAAAA,IAAvCzF,OACR,SAAS0F,GAAqBZ,GAC5B5B,IACAsC,GAAeV,EAAY,CACzBC,UAAW,SAACpF,GACVwD,IACAiB,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgBwC,IAAwB7F,EAAAA,EAAAA,aAAY8F,EAAAA,IAA5C5F,OAaR,IAAAI,IAAgDH,EAAAA,EAAAA,UAAS,MAAKI,IAAAF,EAAAA,EAAAA,GAAAC,GAAA,GAAvDzC,GAAgB0C,GAAA,GAAEwF,GAAmBxF,GAAA,GACtCyF,GAAU/L,aAAaC,QAAQ,oBACrB+L,IAAejG,EAAAA,EAAAA,aAAYkG,EAAAA,IAAnChG,OACR,SAASiG,GAASnB,GAEhB5B,IACA6C,GAAWjB,EAAY,CACrBC,UAAW,SAACpF,GAEVwD,IACA0C,GAAoBlG,GAChBmG,IAAuB,cAAZA,IAYrB,SAAwBhB,GAEtB5B,IACAgD,GAAepB,EAAY,CACzBC,UAAW,SAACpF,GAEVwD,IACA0C,GAAoBlG,EAAKA,KAAKwG,MAC9BC,QAAQC,IAAI1G,EACd,EACAqF,QAAS,SAACC,GAER9B,GACF,GAEJ,CA1BQmD,CAAe3G,EAGnB,EACAqF,QAAS,SAACC,GAER9B,GACF,GAEJ,CACA,IAAgB+C,IAAmBpG,EAAAA,EAAAA,aAAYyG,EAAAA,IAAvCvG,QAiBRa,EAAAA,EAAAA,YAAU,WAGRqC,IACInF,GA/JJ0G,EAAgB,GAAI,CAClBM,UAAW,SAACpF,GACVwD,IACAI,EAAoB5D,GACpBmD,EAAQnD,EAAKA,KACf,EACAqF,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,GACF,SAmJ6CsD,IAA3C1M,aAAaC,QAAQ,mBACsB,OAA3CD,aAAaC,QAAQ,mBAErB6K,EAAoB9K,aAAaC,QAAQ,wBAGFyM,IAAvC1M,aAAaC,QAAQ,eACkB,OAAvCD,aAAaC,QAAQ,eAErB0L,GAAqB3L,aAAaC,QAAQ,gBAEnCkE,GA1JXsF,EAAS,GAAI,CACXuB,UAAW,SAACpF,GACVwD,IACAe,EAAgBvE,EAAKA,KACvB,EACAqF,QAAS,SAACC,GAAW,SAwJoBwB,IAAvC1M,aAAaC,QAAQ,eACkB,OAAvCD,aAAaC,QAAQ,eAErB0L,GAAqB3L,aAAaC,QAAQ,gBAEnC4J,EApGXF,EAAU,GAAI,CACZqB,UAAW,SAACpF,GAEVwD,IACAiB,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GAAW,IAkGrB9B,GAEJ,GAAG,IAEH,IAAAuD,IAAkCpL,EAAAA,EAAAA,KAA1BC,GAAQmL,GAARnL,SAAUC,GAAWkL,GAAXlL,YAoDlB,IAAA+E,IAAsCN,EAAAA,EAAAA,WAAS,GAAMS,IAAAP,EAAAA,EAAAA,GAAAI,GAAA,GAA9CoG,GAAWjG,GAAA,GAAEkG,GAAclG,GAAA,GAC5BjB,GAAa,WACjBmH,IAAe,EACjB,EAIA,OACEzK,EAAAA,EAAAA,MAAC0K,EAAAA,GAAO,CACN1N,UAAS,QAAA0C,OAAUN,GAAW,cAAgB,IAC9CuL,SAAS,SAAQxN,SAAA,EAEjBJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAO,WACPC,SACE/N,EAAAA,EAAAA,KAACgO,EAAQ,CACPzH,WAAYA,GACZC,YAhCV,SAAqByH,GAEnBlB,GAASkB,EACX,EA8BUC,UAAWR,KAGfS,OAAQV,GACRW,QAAS7H,MAEXtD,EAAAA,EAAAA,MAACR,EAAAA,GAAU,CAAC4L,OAAK,EAAAjO,SAAA,EACfJ,EAAAA,EAAAA,KAACsO,EAAAA,GAAc,CACbrO,UAAU,OACV+F,QAAS,kBAAMkE,EAAW,CAAE1B,KAAM,MAAO6C,aAAcA,GAAc,EAACjL,UAEtEJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJhG,UAAS,KAAA0C,OAAON,GAAW,YAAc,IACzC6D,KAAMqI,EAAAA,EACNjO,KAAK,UAGTN,EAAAA,EAAAA,KAACwO,EAAAA,GAAY,CAACvO,UAAU,YAAYmB,GAAG,IAAGhB,UACxCJ,EAAAA,EAAAA,KAAA,KAAGyO,KAAK,IAAGrO,UACTJ,EAAAA,EAAAA,KAAA,OACE6F,IAAK6I,EACLC,IAAI,OACJzO,MAAO,CACL0O,MAAO,QACPzO,OAAQ,OACR0O,gBAAiB,sBAKzB5L,EAAAA,EAAAA,MAAC6L,EAAAA,GAAU,CAAC7O,UAAU,iCAAgCG,SAAA,CACnDyE,IAhGiC,CAAC,kBACDkK,SAASrF,EAASsF,YAgGlDhP,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACP6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,eACX2G,SA1VmB,SAACX,GAChC0B,EAAgB,IAChBlJ,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBAExB,IAAMuF,EAAavD,EAAMa,OAAOgG,MAChClE,EAAgB,IAChBE,EAAmB,IACnBrK,aAAasO,QAAQ,iBAAkBvD,GAEpB,wBAAfA,IACFD,EAAoBC,GA+IxB,SAA8BA,GAC5B5B,IACAyC,GAAoBb,EAAY,CAC9BC,UAAW,SAACpF,GACVwD,IACAiB,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAzJImF,CAAqBxD,GA4FzB,SAA6BA,GAC3B5B,IACAkC,GAAgBN,EAAY,CAC1BC,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAtGIoF,CAAoBzD,GAKxB,EAyUcsD,MAAOrO,aAAaC,QAAQ,kBAAkBV,SAAA,EAE9CJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACS,OAAhBgK,QAAgB,IAAhBA,GAAsB,QAANX,EAAhBW,EAAkB3D,YAAI,IAAAgD,OAAN,EAAhBA,EAAwBrG,KAAI,SAACkM,GAC5B,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,SAILvK,IAhH6B,CAClC,WACA,wBACA,cACA,iBACA,uBACA,aACA,gBACA,UAEkC+J,SAASrF,EAASsF,YAuG9ChP,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACP6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,WACX2G,SA1Ve,SAACX,GAC5B,IAAMuD,EAAavD,EAAMa,OAAOgG,MAChCrO,aAAasO,QAAQ,aAAcvD,GACnC/K,aAAawF,WAAW,gBACxB6E,EAAmB,IAGA,oBAAfU,IACFY,GAAqBZ,GAyFzB,SAA6BA,GAC3B5B,IACAoC,GAAgBR,EAAY,CAC1BC,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAnGIwF,CAAoB7D,GAKxB,EA6UcsD,MAAOrO,aAAaC,QAAQ,cAAcV,SAAA,EAE1CJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oBACK,OAAZ2K,QAAY,IAAZA,OAAY,EAAZA,EAAc3H,KAAI,SAACkM,GAClB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKI,WAAWtP,SAClDkP,EAAK1N,MADK0N,EAAKI,WAItB,SAILhF,IAtH+B,CACpC,WACA,wBACA,oBACA,cACA,cACA,iBACA,uBACA,aACA,gBACA,UAEoCqE,SAASrF,EAASsF,YA2GhDhP,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACP6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,aACX2G,SA9ViB,SAACX,GAC9B,IAAMuD,EAAavD,EAAMa,OAAOgG,MAEb,sBAAftD,GAoDN,SAA0BA,GACxB5B,IACAgC,EAAWJ,EAAY,CACrBC,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CA9DI0F,CAAiB/D,GAGnB/K,aAAasO,QAAQ,eAAgBvD,GACrC7B,EAAgB6B,EAClB,EAsVcsD,MAAOrO,aAAaC,QAAQ,gBAAgBV,SAAA,EAE5CJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,sBACQ,OAAf6K,QAAe,IAAfA,OAAe,EAAfA,EAAiB7H,KAAI,SAACkM,GACrB,OACEtP,EAAAA,EAAAA,KAAA,UAAgCkP,MAAOI,EAAKM,aAAaxP,SACtDkP,EAAKO,gBADKP,EAAKM,aAItB,UAIN5P,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACPJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN9G,GAAE,GAAAC,OAAKN,GAAW,cAAgB,IAClC2D,QAnKW,WACrB1D,IAAaD,GACf,EAiKoCjC,SACzB,sBAKL6C,EAAAA,EAAAA,MAAC6L,EAAAA,GAAU,CAAC5O,MAAO,CAAE4P,QAAS,SAAU1P,SAAA,EACtCJ,EAAAA,EAAAA,KAAA,MACEC,UAAS,OAAA0C,OAASN,GAAW,iBAAmB,mBAAoBjC,SAEnEyK,KAEH7K,EAAAA,EAAAA,KAAA,KACEC,UAAS,OAAA0C,OAASN,GAAW,iBAAmB,mBAAoBjC,SAEnEwK,QAQL5K,EAAAA,EAAAA,KAAC8O,EAAAA,GAAU,CAAC7O,UAAU,OAAMG,UAC1BJ,EAAAA,EAAAA,KAAC+P,EAAiB,CAChBxJ,WAAYA,GACZ/B,UAtIQ,WAChBkJ,IAAe,EACjB,EAqIUjJ,iBAAkBA,YAM9B,E,iGC1hBauL,GAAgB,SAAHzL,GAAmB,IAAb0L,EAAK1L,EAAL0L,MACxBvG,GAAWC,EAAAA,EAAAA,MACXuG,EAAU,SAACtO,EAAMsE,EAAMiK,GAC3B,OACElN,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,CACG8F,GAAQA,EACRtE,GAAQA,EACRuO,IACCnQ,EAAAA,EAAAA,KAACoQ,EAAAA,GAAM,CAAC3P,MAAO0P,EAAM1P,MAAOR,UAAU,UAASG,SAC5C+P,EAAME,SAKjB,EAEMC,EAAU,SAAChB,EAAMiB,GACrB,IAAQrP,EAA0CoO,EAA1CpO,UAAWU,EAA+B0N,EAA/B1N,KAAMuO,EAAyBb,EAAzBa,MAAOjK,EAAkBoJ,EAAlBpJ,KAASsK,GAAIC,EAAAA,EAAAA,GAAKnB,EAAIoB,IAChDC,EAAYzP,EAClB,OACE0P,EAAAA,EAAAA,eAACD,GAASvH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHoH,EAAKpP,KACPoP,EAAKP,OAAS,CACb/O,UAAW2P,EAAAA,KACZ,IACHC,IAAKP,GACDC,GAEHN,EAAQtO,EAAMsE,EAAMiK,GAG3B,EACMY,EAAW,SAAXA,EAAYzB,EAAMiB,GAAW,IAADS,EACxB9P,EAAuCoO,EAAvCpO,UAAWU,EAA4B0N,EAA5B1N,KAAMsE,EAAsBoJ,EAAtBpJ,KAAM9E,EAAgBkO,EAAhBlO,GAAOoP,GAAIC,EAAAA,EAAAA,GAAKnB,EAAI2B,IAC7CN,EAAYzP,EAClB,OACElB,EAAAA,EAAAA,KAAC2Q,GAASvH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACR9F,IAAK4N,OAAOX,GAEZY,QAASjB,EAAQtO,EAAMsE,GACvBkL,QAAS1H,EAASsF,SAASqC,WAAWjQ,IAClCoP,GAAI,IAAApQ,SAEG,QAFH4Q,EAEP1B,EAAKW,aAAK,IAAAe,OAAA,EAAVA,EAAY5N,KAAI,SAACkM,EAAMiB,GAAK,OAC3BjB,EAAKW,MAAQc,EAASzB,EAAMiB,GAASD,EAAQhB,EAAMiB,EAAM,MANtDA,EAUX,EAEA,OACEvQ,EAAAA,EAAAA,KAACuB,EAAAA,SAAc,CAAAnB,SACZ6P,GACCA,EAAM7M,KAAI,SAACkM,EAAMiB,GAAK,OAAMjB,EAAKW,MAAQc,EAASzB,EAAMiB,GAASD,EAAQhB,EAAMiB,EAAM,KAG7F,E,6IC/BMe,IAFkB3M,KAAKC,MAAM/D,aAAaC,QAAQ,gBAE3C,CACX,CACEI,UAAW+N,EAAAA,GACXrN,KAAM,YACNR,GAAI,aACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMqL,GAAAA,EAAaC,gBAAgB,aAChD5Q,YAAa,CAAC,GAAD+B,OAAIwC,EAAAA,GAAO,KAAAxC,OAAIoC,EAAAA,MAE9B,CACE7D,UAAWuQ,EAAAA,GACX7P,KAAM,QACNsE,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwL,GAAAA,EAAWF,gBAAgB,aAC9CvB,MAAO,CACL,CACE/O,UAAW+N,EAAAA,GACXrN,KAAM,gBACNR,GAAI,iBACJ8E,MACElG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMyL,GAAAA,EAAoBH,gBAAgB,kBAEnD5Q,YAAa,CAAC,GAAD+B,OAAImC,EAAAA,GAAa,KAAAnC,OAAIoC,EAAAA,MAEpC,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,aACNR,GAAI,cACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwL,GAAAA,EAAWF,gBAAgB,kBAC9C5Q,YAAa,CAAC,GAAD+B,OAAIsC,EAAAA,GAAS,KAAAtC,OAAIoC,EAAAA,MAEhC,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,aACNR,GAAI,cACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,GAAAA,EAAaJ,gBAAgB,kBAChD5Q,YAAa,CAAC,GAAD+B,OAAIuC,EAAAA,GAAW,KAAAvC,OAAIoC,EAAAA,MAElC,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,aACNR,GAAI,WACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM2L,GAAAA,EAAYL,gBAAgB,kBAC/C5Q,YAAa,CAAC,GAAD+B,OAAIwC,EAAAA,GAAO,KAAAxC,OAAIoC,EAAAA,QAuClC,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,QACNR,GAAI,SACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwL,GAAAA,EAAWF,gBAAgB,aAC9C5Q,YAAa,CAAC,GAAD+B,OAAIsC,EAAAA,GAAS,KAAAtC,OAAIoC,EAAAA,MAEhC,CACE7D,UAAWuQ,EAAAA,GACX7P,KAAM,eACNsE,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM4L,GAAAA,EAAUN,gBAAgB,aAC7CvB,MAAO,CACL,CACE/O,UAAW+N,EAAAA,GACXrN,KAAM,uBACNR,GAAI,wBACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM6L,GAAAA,EAAkBP,gBAAgB,kBACrD5Q,YAAa,CAAC,GAAD+B,OAAImC,EAAAA,GAAa,KAAAnC,OAAIoC,EAAAA,MAEpC,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,oBACNR,GAAI,mBACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM8L,GAAAA,EAASR,gBAAgB,kBAC5C5Q,YAAa,CAAC,GAAD+B,OAAIsP,EAAAA,GAAO,KAAAtP,OAAIoC,EAAAA,MAE9B,CACE7D,UAAW+N,EAAAA,GACXrN,KAAM,WACNR,GAAI,WACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM8L,GAAAA,EAASR,gBAAgB,kBAC5C5Q,YAAa,CAAC,GAAD+B,OAAImC,EAAAA,GAAa,KAAAnC,OAAIoC,EAAAA,QAIxC,CACE7D,UAAWuQ,EAAAA,GACX7P,KAAM,SACNsE,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMgM,GAAAA,EAAeV,gBAAgB,aAClD5Q,YAAa,CAAC,GAAD+B,OAAImC,EAAAA,GAAa,KAAAnC,OAAIoC,EAAAA,KAClCkL,MAAO,CACL,CACE/O,UAAW+N,EAAAA,GACXrN,KAAM,mBACNR,GAAI,uBACJ8E,MAAMlG,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM6L,GAAAA,EAAkBP,gBAAgB,uBAyE7D,GA1CoB,WAClB,IAAA7K,GAA8CI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAnDjC,EAAesC,EAAA,GAAEmL,EAAkBnL,EAAA,GAC1CE,GAAsCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA3CkL,EAAWjL,EAAA,GAAEkL,EAAclL,EAAA,IAElCQ,EAAAA,EAAAA,YAAU,WAER,IAAM2K,EACJ3N,KAAKC,MAAM/D,aAAaC,QAAQ,iBAAmB,GACrDqR,EAAmBG,EACrB,GAAG,IAGH,IAAMC,GAAsBC,EAAAA,EAAAA,UAAQ,WAClC,OAAOlB,GACJlO,KAAI,SAACkM,GACJ,IACGA,EAAK1O,aACN6R,EAAAA,GAAqBC,WAAC,EAAD,CAAChO,GAAe/B,QAAAgQ,EAAAA,GAAAA,GAAKrD,EAAK1O,eAC/C,CACA,GAAI0O,EAAKW,MAAO,CACd,IAAM2C,EAAWtD,EAAKW,MAAM4C,QAC1B,SAACC,GAAO,OACLA,EAAQlS,aACT6R,EAAAA,GAAqBC,WAAC,EAAD,CAAChO,GAAe/B,QAAAgQ,EAAAA,GAAAA,GAAKG,EAAQlS,cAAY,IAElE,OAAAwI,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAAYkG,GAAI,IAAEW,MAAO2C,GAC3B,CACA,OAAOtD,CACT,CACA,OAAO,IACT,IACCuD,OAAOE,QACZ,GAAG,CAACrO,EAAiB4M,KAOrB,OAJA3J,EAAAA,EAAAA,YAAU,WACR0K,EAAeE,EACjB,GAAG,CAACA,IAEGH,CACT,ECnIMY,GAAa,WACjB,IAAMtM,GAAWyD,EAAAA,EAAAA,MACX8I,GAAa3H,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMoJ,iBAAiB,IAC3D7H,GAAcC,EAAAA,EAAAA,KAAY,SAACxB,GAAK,OAAKA,EAAMuB,WAAW,IAC5DlJ,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SACQzB,GADauB,EAAXG,aACcsE,EAAAA,EAAAA,aAAYuM,EAAAA,IAApCrM,QACFsL,EAAcgB,MAEpBzL,EAAAA,EAAAA,YAAU,WACR/G,EAAY,GAAI,CACdiL,UAAW,SAACpF,GACV5F,aAAasO,QAAQ,cAAexK,KAAK0O,UAAU5M,EAAK7F,aAC1D,EACAkL,QAAS,SAACC,GACRmB,QAAQC,IAAIpB,EACd,GAEJ,GAAG,IACH,IAAMrH,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAMF,OACE9B,EAAAA,EAAAA,MAACqQ,EAAAA,GAAQ,CACP1F,SAAS,QACTqF,WAAYA,EACZ7B,QAAS/F,EACTkI,gBAAiB,SAACnC,GAChB1K,EAAS,CAAE8B,KAAM,MAAO6C,YAAa+F,GACvC,EACAnR,UAAS,iBAAA0C,OAAmBN,EAAW,eAAiB,IAAKjC,SAAA,EAE7DJ,EAAAA,EAAAA,KAACwT,EAAAA,GAAa,CACZvT,UAAS,kCAAA0C,OACPN,EAAW,eAAiB,IAE9BjB,GAAG,IAAGhB,UAEVJ,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEkG,SAAU,QAAShG,SAChC4E,IAAuBH,IAC1B7E,EAAAA,EAAAA,KAAA,QAAAI,SACGS,aAAaC,QAAQ,2BAOpBd,EAAAA,EAAAA,KAACyT,EAAAA,GAAW,CAAArT,UACVJ,EAAAA,EAAAA,KAAC0T,GAAAA,EAAS,CAAAtT,UAERJ,EAAAA,EAAAA,KAACgQ,GAAa,CAACC,MAAOmC,UAMhC,EAIA,GAAe7Q,EAAAA,KAAWyR,I,wBC5KpBW,GAAc,SAAChT,GACnB,IAAQP,EAAmBO,EAAnBP,SAAUqO,EAAS9N,EAAT8N,KAEZmF,EAAK,gCAAAjR,OAAmC8L,GAE9C,OACExL,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,UAASG,SAAA,EACtB6C,EAAAA,EAAAA,MAAC4Q,EAAAA,GAAI,CAACrO,QAAQ,OAAMpF,SAAA,EAClBJ,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACP6C,EAAAA,EAAAA,MAAC6Q,EAAAA,GAAQ,CAACrF,KAAK,IAAIsF,QAAM,EAAA3T,SAAA,EACvBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM8N,GAAAA,EAAc/T,UAAU,SAAS,gBAIlDD,EAAAA,EAAAA,KAACiP,EAAAA,GAAQ,CAAA7O,UACP6C,EAAAA,EAAAA,MAAC6Q,EAAAA,GAAQ,CAACrF,KAAMmF,EAAO1K,OAAO,SAAQ9I,SAAA,EACpCJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM+N,GAAAA,EAAShU,UAAU,SAAS,gBAK/CD,EAAAA,EAAAA,KAACkU,EAAAA,GAAW,CAACjU,UAAU,iBAAgBG,UACrCJ,EAAAA,EAAAA,KAACmU,EAAAA,GAAQ,CAAClU,UAAU,cAAcmR,SAAO,EAAAhR,SACtCA,QAKX,EAOA,GAAemB,EAAAA,KAAWoS,G,wGCrCb9F,EAAe,SAAHtJ,GAA6C,IAAvCuJ,EAAKvJ,EAALuJ,MAAOC,EAAOxJ,EAAPwJ,QAASK,EAAO7J,EAAP6J,QAASD,EAAM5J,EAAN4J,OACtDhM,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACmR,EAAAA,GAAM,CAAChD,QAASjD,EAAQC,QAASA,EAAQhO,SAAA,EACxCJ,EAAAA,EAAAA,KAACqU,EAAAA,GAAY,CAACC,aAAW,EAACrU,UAAS,eAAA0C,OAAiBN,EAAW,aAAe,IAAKjC,UACjFJ,EAAAA,EAAAA,KAACuU,EAAAA,GAAW,CAAC7R,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAE0N,OAEzD9N,EAAAA,EAAAA,KAACwU,EAAAA,GAAU,CAACvU,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IAAKjC,SACvE2N,MAsBT,C,wDCjCO,IAAM0G,EACb,iE,iOCHO,IACM1P,EAAQ,OAQRD,EAAgB,eAChBG,EAAY,WACZC,EAAc,aACdC,EAAU,SACV8M,EAAU,SAIVlR,EAA8B,SAAC2T,EAAgB1T,EAAYC,GAGtE,OAD0B,OAAdyT,QAAc,IAAdA,OAAc,EAAdA,EAAgB3F,SAAS,GAADpM,OAAI3B,EAAU,KAAA2B,OAAI1B,GAExD,EAEawR,EAAwB,SAACiC,EAAgBC,GAGpD,OAD0B,OAAdD,QAAc,IAAdA,OAAc,EAAdA,EAAgB3F,SAAS,GAADpM,OAAIgS,GAE1C,C,uECzBMC,EAAyB,SAACC,IAC9BC,EAAAA,EAAAA,GAAaD,EACf,C,yGCFME,EAAgBC,EAAAA,EAAMC,OAAO,CACjCC,QAAST,EAAAA,EACTU,QAAS,IACTC,QAAS,CACP,eAAgB,sBAKdN,EAAe,SAACD,GAChBA,EACFE,EAAcM,SAASD,QAAQE,OAAsB,cAAC,UAAA3S,OAAakS,UAE5DE,EAAcM,SAASD,QAAQE,OAAsB,aAEhE,C,yYCdaC,EAAS,eAAAhR,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAO,IAAAC,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACdlB,EAAAA,EAAcmB,KAAK,aAAc,CACtDpO,MAAO8N,EAAQ9N,MACfqO,SAAUP,EAAQO,WACjB,KAAD,EAHU,OAGVN,EAAAE,EAAAK,KAHM3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAIL5P,EAAKA,MAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACjB,gBANqBY,GAAA,OAAAhS,EAAAmO,MAAA,KAAA8D,UAAA,KAOTrD,EAAkB,eAAAsD,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,IAAA,IAAAC,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACsB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,WAAW,KAAD,EAAvC,OAAuCF,EAAAC,EAAAR,KAA3C3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,kBAJ8B,OAAAD,EAAA/D,MAAA,KAAA8D,UAAA,KAKlBM,EAAe,eAAAC,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACW,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,eAAgBN,GAAS,KAAD,EAAtD,OAAsDqB,EAAAC,EAAAd,KAA1D3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAJ2BG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KAKfhL,EAAmB,eAAA4L,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,IAAA,IAAAC,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACqB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,gBAAgB,KAAD,EAA5C,OAA4CS,EAAAC,EAAAnB,KAAhD3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SACL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,kBAJ+B,OAAAD,EAAA1E,MAAA,KAAA8D,UAAA,KAMnB9K,EAAiB,eAAA8L,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO/U,GAAE,IAAAgV,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACc,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,qBAADlU,OAAsBD,IAAM,KAAD,EAAvD,OAAuDgV,EAAAC,EAAAvB,KAA3D3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAJ6BG,GAAA,OAAAJ,EAAA9E,MAAA,KAAA8D,UAAA,KAKjBqB,EAAgB,eAAAC,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAO,IAAAoC,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACU,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,gBAADvV,OACxBiT,EAAQuC,SAAS5I,YACjCqG,EAAQ3H,SACR,KAAD,EAHW,OAGX+J,EAAAC,EAAA7B,KAHO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAIL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBAP4BK,GAAA,OAAAN,EAAApF,MAAA,KAAA8D,UAAA,KAShBjK,EAAkB,eAAA8L,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,EAAO5V,GAAE,IAAA6V,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACa,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU0X,EAAAvC,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uBAADlU,OAAwBD,IAAM,KAAD,EAAzD,OAAyD6V,EAAAC,EAAApC,KAA7D3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SACL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,gBAJ8BG,GAAA,OAAAJ,EAAA3F,MAAA,KAAA8D,UAAA,KAKlB9J,EAAgB,eAAAgM,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAOjW,GAAE,IAAAkW,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OACe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uBAADlU,OAAwBD,IAAM,KAAD,EAAzD,OAAyDkW,EAAAC,EAAAzC,KAA7D3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SACL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBAJ4BG,GAAA,OAAAJ,EAAAhG,MAAA,KAAA8D,UAAA,KAYhBuC,EAAkB,eAAAC,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOvW,GAAE,IAAAwW,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACa,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUqY,EAAAlD,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,gBAADzW,OAAiBD,IAAM,KAAD,EAArD,OAAqDwW,EAAAC,EAAA/C,KAAzD3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SACL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBAJ8BI,GAAA,OAAAL,EAAAtG,MAAA,KAAA8D,UAAA,KAKlB8C,EAAa,eAAAC,GAAA/D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8D,EAAO5D,GAAO,IAAA6D,EAAAhT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,cAAAyD,EAAAzD,KAAA,EAElBlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8D6D,EAAAC,EAAAtD,KAAlE3P,EAAIgT,EAAJhT,KAAIiT,EAAArD,OAAA,SACL5P,GAAI,wBAAAiT,EAAApD,OAAA,GAAAkD,EAAA,KACZ,gBAJyBG,GAAA,OAAAJ,EAAA7G,MAAA,KAAA8D,UAAA,KAMboD,EAAc,eAAAC,GAAArE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoE,EAAOlE,GAAO,IAAAmE,EAAAtT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,cAAA+D,EAAA/D,KAAA,EACnBlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8DmE,EAAAC,EAAA5D,KAAlE3P,EAAIsT,EAAJtT,KAAIuT,EAAA3D,OAAA,SACL5P,GAAI,wBAAAuT,EAAA1D,OAAA,GAAAwD,EAAA,KACZ,gBAH0BG,GAAA,OAAAJ,EAAAnH,MAAA,KAAA8D,UAAA,KAYd1J,EAAU,eAAAoN,GAAA1E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyE,EAAOvE,GAAO,IAAAnO,EAAA2S,EAAA3T,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,OAKgB,OAJhDxO,EAAW,IAAI6S,UACZC,OAAO,OAAQ3E,EAAQrO,MAChCE,EAAS8S,OAAO,mBAAoB3E,EAAQtO,mBAE5CsN,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUuZ,EAAArE,KAAA,EAAAqE,EAAApE,KAAA,EAG7BlB,EAAAA,EAAcmB,KAAK,sBAAuBzO,EAAU,CACzE2N,QAAS,CACP,eAAgB,yBAEjB,KAAD,EAJU,OAIVgF,EAAAC,EAAAjE,KAJM3P,EAAI2T,EAAJ3T,KAAI4T,EAAAhE,OAAA,SAKL5P,GAAI,QAEmC,MAFnC4T,EAAArE,KAAA,GAAAqE,EAAAG,GAAAH,EAAA,SAEXnN,QAAQnB,MAAM,wBAAuBsO,EAAAG,IAASH,EAAAG,GAAA,yBAAAH,EAAA/D,OAAA,GAAA6D,EAAA,mBAGjD,gBAlBsBM,GAAA,OAAAP,EAAAxH,MAAA,KAAA8D,UAAA,KAqBVnJ,EAAe,eAAAqN,GAAAlF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiF,EAAO/E,GAAO,IAAAgF,EAAAnU,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,OAEW,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+Z,EAAA5E,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,gBAADvV,OACxB9B,aAAaC,QAAQ,mBACrC,CACEmM,KAAK2I,IAEP,KAAD,EALW,OAKXgF,EAAAC,EAAAzE,KALO3P,EAAImU,EAAJnU,KAAIoU,EAAAxE,OAAA,SAML5P,GAAI,wBAAAoU,EAAAvE,OAAA,GAAAqE,EAAA,KACZ,gBAV2BG,GAAA,OAAAJ,EAAAhI,MAAA,KAAA8D,UAAA,I,4LC5Ff/L,EAAqB,eAAAlG,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,cAAc,KAAD,EAA1C,OAA0ChB,EAAAE,EAAAK,KAA9C3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBAJiC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAiBrBuE,EAAgB,eAAAtE,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,cAADzW,OAAeD,IAAM,KAAD,EAAnD,OAAmDiU,EAAAC,EAAAR,KAAvD3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ4BH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAMhBwE,EAAa,eAAAjE,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACa,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,aAAcN,GAAS,KAAD,EAApD,OAAoDqB,EAAAC,EAAAd,KAAxD3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAJyBG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KAKbyE,EAAc,eAAA7D,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACY,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,cAADvV,OAC1BiT,EAAQuC,SAASvI,cAC/BgG,EAAQ3H,SACR,KAAD,EAHW,OAGXqJ,EAAAC,EAAAnB,KAHO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAIL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAP0BO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,I,4RCjCd0E,EAAiB,eAAA3W,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACsB,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASiV,EAAAE,KAAA,EAC9BlB,EAAAA,EAAc8B,IAAI,UAAS,OAAtC,OAAsChB,EAAAE,EAAAK,KAA1C3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBAJ6B,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAKvB,SAAS2E,IACd,OAAOC,EAAAA,EAAAA,UAAS,CAAC,SAAUF,EAC7B,CAEO,IAAMjP,EAAiB,eAAAwK,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACa,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAS8V,EAAAX,KAAA,EAC9BlB,EAAAA,EAAc8B,IAAI,mBAADlU,OAAoBD,IAAK,OAArD,OAAqDiU,EAAAC,EAAAR,KAAzD3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ6BH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAKjBnK,EAAoB,eAAA0K,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACU,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASoW,EAAAjB,KAAA,EAC9BlB,EAAAA,EAAc8B,IAAI,mBAADlU,OAAoBD,IAAK,OAArD,OAAqDuU,EAAAC,EAAAd,KAAzD3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAJgCG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KAKpBrK,EAAoB,eAAAiL,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAO3U,GAAE,IAAA4U,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACU,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASyW,EAAAtB,KAAA,EAC9BlB,EAAAA,EAAc8B,IAAI,mBAADlU,OAAoBD,IAAK,OAArD,OAAqD4U,EAAAC,EAAAnB,KAAzD3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SACL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAJgCO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,KAYpB6E,EAAY,eAAA7D,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO/U,GAAE,IAAAgV,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACkB,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAS6W,EAAA1B,KAAA,EAC9BlB,EAAAA,EAAcqE,OAAO,UAADzW,OAAWD,IAAK,OAA/C,OAA+CgV,EAAAC,EAAAvB,KAAnD3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAJwBW,GAAA,OAAAZ,EAAA9E,MAAA,KAAA8D,UAAA,KAKZ8E,EAAS,eAAAxD,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAO,IAAAoC,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACgB,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASmX,EAAAhC,KAAA,EAC9BlB,EAAAA,EAAcmB,KAAK,SAAUN,GAAQ,OAAhD,OAAgDoC,EAAAC,EAAA7B,KAApD3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SACL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBAJqBU,GAAA,OAAAX,EAAApF,MAAA,KAAA8D,UAAA,KAKT+E,EAAU,eAAAlD,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,EAAO1C,GAAO,IAAA2C,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACe,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAS0X,EAAAvC,KAAA,EAC9BlB,EAAAA,EAAcmD,MAAM,UAADvV,OAAWiT,EAAQuC,SAASqD,UAAY5F,EAAQ3H,SAAQ,OAAtF,OAAsFsK,EAAAC,EAAApC,KAA1F3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SACL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,gBAJsBQ,GAAA,OAAAT,EAAA3F,MAAA,KAAA8D,UAAA,I,oWCzCViF,EAAwB,eAAAlX,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjT,GAAE,IAAAmT,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,mCAADlU,OACHD,IACnC,KAAD,EAFW,OAEXmT,EAAAE,EAAAK,KAFO3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAGL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,gBANoCY,GAAA,OAAAhS,EAAAmO,MAAA,KAAA8D,UAAA,KAOxBkF,EAAc,eAAAjF,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACiB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,+BAADlU,OAAgCD,IAAM,KAAD,EAAjE,OAAiEiU,EAAAC,EAAAR,KAArE3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ0BS,GAAA,OAAAV,EAAA/D,MAAA,KAAA8D,UAAA,KAKdmF,EAAsB,eAAA5E,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACS,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yCAADlU,OAA0CD,IAAM,KAAD,EAA3E,OAA2EuU,EAAAC,EAAAd,KAA/E3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAJkCY,GAAA,OAAAb,EAAArE,MAAA,KAAA8D,UAAA,KAKtBoF,EAAsB,eAAAxE,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAO3U,GAAE,IAAA4U,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACS,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yCAADlU,OAA0CD,IAAM,KAAD,EAA3E,OAA2E4U,EAAAC,EAAAnB,KAA/E3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SACL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAJkCe,GAAA,OAAAhB,EAAA1E,MAAA,KAAA8D,UAAA,KAKtBqF,EAAsB,eAAArE,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO/U,GAAE,IAAAgV,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACS,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yCAADlU,OAA0CD,IAAM,KAAD,EAA3E,OAA2EgV,EAAAC,EAAAvB,KAA/E3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAJkCgB,GAAA,OAAAjB,EAAA9E,MAAA,KAAA8D,UAAA,KAYtBsF,EAAkB,eAAAhE,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOrV,GAAE,IAAAsV,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACa,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,iCAADvV,OACPD,IACjC,KAAD,EAFW,OAEXsV,EAAAC,EAAA7B,KAFO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAGL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBAN8Be,GAAA,OAAAhB,EAAApF,MAAA,KAAA8D,UAAA,KAWlBuF,EAAe,eAAA1D,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,EAAO1C,GAAO,IAAA2C,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,cAAAuC,EAAAvC,KAAA,EACpBlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8D2C,EAAAC,EAAApC,KAAlE3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SACL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,gBAH2Be,GAAA,OAAAhB,EAAA3F,MAAA,KAAA8D,UAAA,KAIfwF,EAAgB,eAAAtD,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAO/C,GAAO,IAAAgD,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OAEU,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,wBAADvV,OAChBiT,EAAQuC,SAAS8D,UACzCrG,EAAQ3H,SACR,KAAD,EAHW,OAGX2K,EAAAC,EAAAzC,KAHO3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SAIL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBAR4BgB,GAAA,OAAAjB,EAAAhG,MAAA,KAAA8D,UAAA,KAUhB0F,EAAsB,eAAAlD,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOrD,GAAO,IAAAsD,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,cAAAkD,EAAAlD,KAAA,EAC3BlB,EAAAA,EAAcmB,KAAK,4DAExCN,GACA,KAAD,EAHW,OAGXsD,EAAAC,EAAA/C,KAHO3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SAIL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBANkCgB,GAAA,OAAAjB,EAAAtG,MAAA,KAAA8D,UAAA,KAQtB2F,EAA0B,eAAA5C,GAAA/D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8D,EAAO9W,GAAE,IAAA+W,EAAAhT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,OAEK,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU4Y,EAAAzD,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,oCAADlU,OACFD,IACpC,KAAD,EAFW,OAEX+W,EAAAC,EAAAtD,KAFO3P,EAAIgT,EAAJhT,KAAIiT,EAAArD,OAAA,SAGL5P,GAAI,wBAAAiT,EAAApD,OAAA,GAAAkD,EAAA,KACZ,gBAPsCiB,GAAA,OAAAlB,EAAA7G,MAAA,KAAA8D,UAAA,KAS1B4F,EAA2B,eAAAlC,GAAA1E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoE,EAAAD,GAAA,IAAA5L,EAAA8L,EAAAtT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OAEa,OAFJhI,EAAO4L,EAAP5L,QAAW4L,EAAFnX,IAE3DkS,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUkZ,EAAA/D,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,sCAEzCjK,GACA,KAAD,EAHW,OAGX8L,EAAAC,EAAA5D,KAHO3P,EAAIsT,EAAJtT,KAAIuT,EAAA3D,OAAA,SAIL5P,GAAI,wBAAAuT,EAAA1D,OAAA,GAAAwD,EAAA,KACZ,gBARuCgB,GAAA,OAAAZ,EAAAxH,MAAA,KAAA8D,UAAA,I,iLC7E3BjM,EAAoB,eAAAhG,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASiV,EAAAE,KAAA,EAC9BlB,EAAAA,EAAc8B,IAAI,YAAW,OAAxC,OAAwChB,EAAAE,EAAAK,KAA5C3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBAJgC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAapB6F,EAAc,eAAA5F,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACgB,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAS8V,EAAAX,KAAA,EAC9BlB,EAAAA,EAAcqE,OAAO,YAADzW,OAAaD,IAAK,OAAjD,OAAiDiU,EAAAC,EAAAR,KAArD3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ0BH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAKd8F,EAAW,eAAAvF,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACc,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASoW,EAAAjB,KAAA,EAC9BlB,EAAAA,EAAcmB,KAAK,WAAY,CACpDqG,cAAe3G,EAAQ2G,cACvB3a,KAAMgU,EAAQhU,KACd2N,WAAYiN,OAAO5G,EAAQrG,YAC3BzH,MAAO8N,EAAQ9N,MACf2U,mBAAoB7G,EAAQ6G,mBAC5BC,YAAa9G,EAAQ8G,YACrBC,SAAU/G,EAAQ+G,SAClBC,SAAUhH,EAAQgH,SAClB7U,QAAS6N,EAAQ7N,QACjB8U,OAAQjH,EAAQiH,OAChBC,KAAMlH,EAAQkH,KACdC,UAAWnH,EAAQmH,SACnBC,UAAWpH,EAAQoH,SACnBC,WAAYrH,EAAQqH,UACpBC,iBAAiB,IACjB,OAhBU,OAgBVjG,EAAAC,EAAAd,KAhBM3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAiBL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBApBuBG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KAqBX2G,EAAY,eAAA/F,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACa,OAArDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAASyW,EAAAtB,KAAA,EAC9BlB,EAAAA,EAAcmD,MAAM,YAADvV,OAC5BiT,EAAQuC,SAASzI,YAC7BkG,EAAQ3H,SAkBT,OApBW,OAoBXqJ,EAAAC,EAAAnB,KApBO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAqBL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAxBwBO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,I,4OCtCZ4G,EAAoB,eAAA7Y,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACoB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,6BAA6B,KAAD,EAAzD,OAAyDhB,EAAAE,EAAAK,KAA7D3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,EAAKA,MAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACjB,kBAJgC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAKpB6G,EAAa,eAAA5G,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,IAAA,IAAAC,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OAC2B,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,iCAAiC,KAAD,EAA7D,OAA6DF,EAAAC,EAAAR,KAAjE3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,kBAJyB,OAAAD,EAAA/D,MAAA,KAAA8D,UAAA,KAKb8G,EAA0B,eAAAvG,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACK,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,mCAADlU,OACHD,IACnC,KAAD,EAFW,OAEXuU,EAAAC,EAAAd,KAFO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAGL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBANsCT,GAAA,OAAAQ,EAAArE,MAAA,KAAA8D,UAAA,KAmBhC,IAAM+G,EAAwB,eAAAnG,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAO3U,GAAE,IAAA4U,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,qBAADvV,OAAsBD,IAAM,KAAD,EAAzD,OAAyD4U,EAAAC,EAAAnB,KAA7D3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SACL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAJoCF,GAAA,OAAAC,EAAA1E,MAAA,KAAA8D,UAAA,KAKxBgH,EAAqB,eAAAhG,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO7B,GAAO,IAAA8B,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACK,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8D8B,EAAAC,EAAAvB,KAAlE3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAJiCG,GAAA,OAAAJ,EAAA9E,MAAA,KAAA8D,UAAA,KAKrBiH,EAAsB,eAAA3F,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAO,IAAAoC,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OAEI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,yBAADvV,OACfiT,EAAQ3H,QAAQvL,IACzCkT,EAAQ3H,SACR,KAAD,EAHW,OAGX+J,EAAAC,EAAA7B,KAHO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAIL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBARkCK,GAAA,OAAAN,EAAApF,MAAA,KAAA8D,UAAA,I,iaCxCtBkH,EAAyB,eAAAnZ,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yBAAyB,KAAD,EAArD,OAAqDhB,EAAAE,EAAAK,KAAzD3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBAJqC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAKzBmH,EAAuB,eAAAlH,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,IAAA,IAAAC,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACiB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uBAAuB,KAAD,EAAnD,OAAmDF,EAAAC,EAAAR,KAAvD3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,kBAJmC,OAAAD,EAAA/D,MAAA,KAAA8D,UAAA,KAKvBoH,EAA8B,eAAA7G,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACC,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yBAADlU,OAA0BD,IAAM,KAAD,EAA3D,OAA2DuU,EAAAC,EAAAd,KAA/D3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAJ0CT,GAAA,OAAAQ,EAAArE,MAAA,KAAA8D,UAAA,KAK9BqH,EAA4B,eAAAzG,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAO3U,GAAE,IAAA4U,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uBAADlU,OAAwBD,IAAM,KAAD,EAAzD,OAAyD4U,EAAAC,EAAAnB,KAA7D3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SACL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAJwCF,GAAA,OAAAC,EAAA1E,MAAA,KAAA8D,UAAA,KAM5B3P,EAAe,eAAA2Q,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,IAAA,IAAAC,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACyB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,SAAS,KAAD,EAArC,OAAqCa,EAAAC,EAAAvB,KAAzC3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,kBAJ2B,OAAAD,EAAA9E,MAAA,KAAA8D,UAAA,KAKfsH,EAAO,eAAAhG,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAO,IAAAoC,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACmB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,cAAeN,GAAS,KAAD,EAArD,OAAqDoC,EAAAC,EAAA7B,KAAzD3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SACL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBAJmBH,GAAA,OAAAE,EAAApF,MAAA,KAAA8D,UAAA,KAMPuH,EAAQ,eAAA1F,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,EAAO1C,GAAO,IAAA2C,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACkB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU0X,EAAAvC,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,QAADvV,OAChCiT,EAAQuC,SAAS6F,QACzBpI,EAAQ3H,SACR,KAAD,EAHW,OAGXsK,EAAAC,EAAApC,KAHO3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SAIL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,gBAPoBF,GAAA,OAAAC,EAAA3F,MAAA,KAAA8D,UAAA,KAQRyH,EAAW,eAAAvF,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAOqF,GAAM,IAAApF,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OACgB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,QAADzW,OAASqb,IAAU,KAAD,EAAjD,OAAiDpF,EAAAC,EAAAzC,KAArD3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SACL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBAJuBF,GAAA,OAAAC,EAAAhG,MAAA,KAAA8D,UAAA,KAKX0H,EAAkB,eAAAlF,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOrD,GAAO,IAAAsD,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACQ,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUqY,EAAAlD,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8DsD,EAAAC,EAAA/C,KAAlE3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SACL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBAJ8BH,GAAA,OAAAE,EAAAtG,MAAA,KAAA8D,UAAA,KAKlB2H,EAAoB,eAAA5E,GAAA/D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8D,EAAO5D,GAAO,IAAA6D,EAAAhT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,OACM,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU4Y,EAAAzD,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,yBAA0BN,GAAS,KAAD,EAAhE,OAAgE6D,EAAAC,EAAAtD,KAApE3P,EAAIgT,EAAJhT,KAAIiT,EAAArD,OAAA,SACL5P,GAAI,wBAAAiT,EAAApD,OAAA,GAAAkD,EAAA,KACZ,gBAJgCH,GAAA,OAAAE,EAAA7G,MAAA,KAAA8D,UAAA,KAKpB4H,EAAgB,eAAAvE,GAAArE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoE,EAAOlE,GAAO,IAAAmE,EAAAtT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OACU,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUkZ,EAAA/D,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,qBAAsBN,GAAS,KAAD,EAA5D,OAA4DmE,EAAAC,EAAA5D,KAAhE3P,EAAIsT,EAAJtT,KAAIuT,EAAA3D,OAAA,SACL5P,GAAI,wBAAAuT,EAAA1D,OAAA,GAAAwD,EAAA,KACZ,gBAJ4BH,GAAA,OAAAE,EAAAnH,MAAA,KAAA8D,UAAA,KAKhB6H,EAAoB,eAAAnE,GAAA1E,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAyE,EAAOmE,GAAM,IAAAlE,EAAA3T,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAuE,GAAA,cAAAA,EAAArE,KAAAqE,EAAApE,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUuZ,EAAApE,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,yCAADzW,OACA2b,EAAON,OAAM,gBAAArb,OAAe2b,EAAO5O,aAC5E,KAAD,EAFW,OAEX0K,EAAAC,EAAAjE,KAFO3P,EAAI2T,EAAJ3T,KAAI4T,EAAAhE,OAAA,SAGL5P,GAAI,wBAAA4T,EAAA/D,OAAA,GAAA6D,EAAA,KACZ,gBANgCF,GAAA,OAAAC,EAAAxH,MAAA,KAAA8D,UAAA,KAOpB+H,EAAsB,eAAA7D,GAAAlF,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiF,EAAO2D,GAAM,IAAA1D,EAAAnU,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+E,GAAA,cAAAA,EAAA7E,KAAA6E,EAAA5E,MAAA,OACK,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+Z,EAAA5E,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,2CAADzW,OACE2b,EAAON,OAAM,kBAAArb,OAAiB2b,EAAO1O,eAChF,KAAD,EAFW,OAEXgL,EAAAC,EAAAzE,KAFO3P,EAAImU,EAAJnU,KAAIoU,EAAAxE,OAAA,SAGL5P,GAAI,wBAAAoU,EAAAvE,OAAA,GAAAqE,EAAA,KACZ,gBANkCF,GAAA,OAAAC,EAAAhI,MAAA,KAAA8D,UAAA,KAOtBgI,EAAkB,eAAAC,GAAAjJ,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgJ,EAAOJ,GAAM,IAAAK,EAAAlY,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA8I,GAAA,cAAAA,EAAA5I,KAAA4I,EAAA3I,MAAA,OACS,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8d,EAAA3I,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,uCAADzW,OACF2b,EAAON,OAAM,cAAArb,OAAa2b,EAAO9C,WACxE,KAAD,EAFW,OAEXmD,EAAAC,EAAAxI,KAFO3P,EAAIkY,EAAJlY,KAAImY,EAAAvI,OAAA,SAGL5P,GAAI,wBAAAmY,EAAAtI,OAAA,GAAAoI,EAAA,KACZ,gBAN8B5D,GAAA,OAAA2D,EAAA/L,MAAA,KAAA8D,UAAA,I,4BC3EzB3M,GAAeoL,E,SAAAA,KAAO,SAAC4J,GAAG,MAAM,CACpCpY,KAAM,GACNmD,QAAS,SAACkV,GAAO,OAAKD,GAAI,SAAC/U,GAAK,MAAM,CAAErD,KAAM,CAACqY,GAAU,GAAE,EAC5D,IAED,K,0KCsFA,MAvFA,SAAkBva,GAAWA,EAARwa,SAAmC,IAAzBC,EAAWza,EAAXya,YAAaC,EAAO1a,EAAP0a,QAsD1CC,EArDsB,WACpB,IAAKF,EACH,MAAO,CACLG,eAAgB,CACdC,MAAO,CACL5W,KAAM,OACNrI,OAAQ,KAEVkf,MAAO,CACLC,WAAY,KAGhBC,cAAe,IAInB,IAAQC,EAAeR,EAAfQ,WAGFC,GAAc,IAAIC,MAAOC,cAAcC,MAAM,KAAK,GAGlDC,EAAqBb,EAAYS,IAAgB,GA2BvD,MAAO,CAAEN,eAlBc,CACrBC,MAAO,CACL5W,KAAM,OACNrI,OAAQ,KAEVkf,MAAO,CACLC,WAbeO,EAAmBzc,KAAI,SAAC0c,GACzC,IAAMC,EAAO,IAAIL,KAAKI,EAAQE,mBAC9B,MAAM,GAANrd,OAAUod,EAAKE,WAAU,KAAAtd,QAAKod,EAAKG,aAAe,GAAK,IAAM,IAAMH,EAAKG,aAC1E,MAsByBX,cAPH,CACpB,CACE3d,KAAM4d,EACN/Y,KAjBaoZ,EAAmBzc,KAAI,SAAC0c,GAAO,OAAKK,WAAWL,EAAQM,QAAQ,MAsBlF,CAG0CC,GAAlClB,EAAcD,EAAdC,eAAgBI,EAAaL,EAAbK,cAExB,OACEvf,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAUG,UACvBJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAgBG,SAC5B6e,GACCjf,EAAAA,EAAAA,KAACsgB,EAAAA,EAAQ,CAACvM,QAAM,EAACwM,UAAW,CAAEC,KAAM,MAEpCvd,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWG,UACxBJ,EAAAA,EAAAA,KAAA,KAAGE,MAAO,CAACO,MAAM,SAASL,SAAa,OAAX4e,QAAW,IAAXA,OAAW,EAAXA,EAAaQ,gBAE3Cxf,EAAAA,EAAAA,KAAA,OAAK0C,GAAG,QAAOtC,UACbJ,EAAAA,EAAAA,KAACygB,EAAAA,EAAc,CACbC,QAASvB,EACTwB,OAAQpB,EACR/W,KAAK,OACLrI,OAAQ,cAQxB,E,sBCxEe,SAASmE,EAASC,GAAM,IAADqc,GAAAC,EAAAA,EAAAA,GAAAtc,GACpC,IACMuc,GAAgC,QAAdF,GADPjX,EAAAA,EAAAA,MACgBG,aAAK,IAAA8W,OAAA,EAAdA,EAAgBE,kBAAmB,CAAC,EAC5Dna,GAAkCI,EAAAA,EAAAA,UAAS,IAAI2Y,MAAO1Y,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA/Coa,EAAS/Z,EAAA,GAAEga,EAAYha,EAAA,GAC9BE,GAA8BH,EAAAA,EAAAA,UAAS,IAAI2Y,MAAOvY,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA3C+Z,EAAO9Z,EAAA,GAAE+Z,EAAU/Z,EAAA,GACpBga,GAAO7b,EAAAA,EAAAA,MACP8b,EAAc,SAAH3K,GAAA,IAAMvH,EAAKuH,EAALvH,MAAOlJ,EAAOyQ,EAAPzQ,QAAO,OACnChG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcG,UAC3BJ,EAAAA,EAAAA,KAAA,SAAOwI,KAAK,OAAO0G,MAAOA,EAAOlJ,QAASA,EAASqb,YAAY,mBAE3D,EAORha,GAAqCN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA5Bia,GAAF9Z,EAAA,GAAgBA,EAAA,IACjC+Z,GAA8Bxa,EAAAA,EAAAA,WAAS,GAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAArCtC,EAAOuC,EAAA,GAAEC,EAAUD,EAAA,GAC1BE,GAAoC3a,EAAAA,EAAAA,YAAU4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAvCE,EAAUD,EAAA,GAAeA,EAAA,IAChCha,EAAAA,EAAAA,YAAU,WASaoZ,EAAUpB,cACZsB,EAAQtB,cAgB3B8B,GAAW,GACXH,EAJkB,CAChB,EAIJ,GAAG,CAACP,EAAWE,IAEf,IASA9e,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAClB,OACEtC,EAAAA,EAAAA,KAAA,OAAAI,UACE6C,EAAAA,EAAAA,MAAA,OAAK/C,MAAO,CAAE2hB,cAAe,SAAUC,QAAS,CAAEC,KAAM,OAAQrZ,GAAI,SAAWtI,SAAA,EAC7EJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAACwY,EAAE,KAAKhc,QAbI,WACxBmb,EAAK,aAOP,EAKiD/gB,SAAC,UAG5CJ,EAAAA,EAAAA,KAAA,QAAMoI,SAtDS,SAACa,GACpBA,EAAEV,gBACJ,EAoDmCnI,UAC3BJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CACHhiB,UAAU,mCACVC,MAAO,CAAE4P,QAAS,QAASoS,IAAK,QAAS9hB,UAEzC6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,aAAYG,SAAA,EACzB6C,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAA,KAAGE,MAAO,CAAEiiB,WAAY,QAAUzf,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,2BAI7EJ,EAAAA,EAAAA,KAACoiB,IAAU,CACTniB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtDggB,SAAUtB,EACV/X,SAAU,SAAC+W,GAAI,OAAKiB,EAAajB,EAAK,EACtCne,KAAK,YACL0gB,WAAW,aACXC,gBAAgB,oBAChBC,aAAaxiB,EAAAA,EAAAA,KAACohB,EAAW,UAG7Bne,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAA,KAAGE,MAAO,CAAEiiB,WAAY,QAAUzf,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,0BAI7EJ,EAAAA,EAAAA,KAACoiB,IAAU,CACTniB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtDggB,SAAUpB,EACVjY,SAAU,SAAC+W,GAAI,OAAKmB,EAAWnB,EAAK,EACpCne,KAAK,UACL0gB,WAAW,aACXC,gBAAgB,kBAChBC,aAAaxiB,EAAAA,EAAAA,KAACohB,EAAW,iBAMnCphB,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACyiB,EAAS,CAAC1D,SAAU6C,EAAY5C,YAAa8B,EAAiB7B,QAASA,UAKlF,C,sVCrGA,IACA,EAAe,IAA0B,4D,sBCpBnCyD,GAAQC,EAAAA,EAAAA,OACZ,SAAApe,GAA2E,IAAxEqe,EAAQre,EAARqe,SAAUC,EAAQte,EAARse,SAAUC,EAAYve,EAAZue,aAAcC,EAAWxe,EAAXwe,YAAaC,EAAKze,EAALye,MAAOC,EAAU1e,EAAV0e,WAMjDC,GAJmBC,KAAKC,IAC5BD,KAAKE,IAAIP,EAAcF,GACvBC,GAGiB,OAAjBC,EACI,GACCA,EAAeF,IAAaC,EAAWD,IAC9CzgB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAoElB,OACEW,EAAAA,EAAAA,MAAA,OACE/C,MAAO,CACL4P,QAAS,OACT+R,cAAe,SACfyB,WAAY,UACZljB,SAAA,EAEF6C,EAAAA,EAAAA,MAAA,OAAK/C,MAAO,CAAEqjB,YAAa,QAASnjB,SAAA,CACjC6iB,EAAW,IAAED,EAAO,QAEvBhjB,EAAAA,EAAAA,KAAA,WACAA,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACwjB,EAAAA,EAAU,CACT9gB,GAAG,eACH+gB,WAAY,GACZC,OAAQ,CAAC,UAAW,WACpBC,SAAU,GACVC,QAASV,EACTW,YAAY,UACZC,SAAS,EACTC,UAAW,IACXC,gBAAiB,IACjB9jB,MAAO,CAAEC,OAAQ,OAAQyO,MAAO,aAGpC3L,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,OAAMG,SAAA,EACnB6C,EAAAA,EAAAA,MAAA,OACEhD,UAAU,kBACVC,MAAO,CAAEgiB,IAAK,QACdxf,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAA,EAExC6C,EAAAA,EAAAA,MAAA,QAAA7C,SAAA,CACGwiB,EAAS,KAAC5iB,EAAAA,EAAAA,KAAA,QAAAI,SAAM,eAEnB6C,EAAAA,EAAAA,MAAA,QAAA7C,SAAA,CACG0iB,EAAa,KAAC9iB,EAAAA,EAAAA,KAAA,QAAAI,SAAM,eAEvB6C,EAAAA,EAAAA,MAAA,QAAA7C,SAAA,CACGyiB,EAAS,KAAC7iB,EAAAA,EAAAA,KAAA,QAAAI,SAAM,kBAGrBJ,EAAAA,EAAAA,KAAA,OACEE,MAAO,CACL+jB,UAAW,MACXxjB,MAAOyjB,MAAMpB,GAAgB,MAAQ,SACrC1iB,SAnFV,SAA2B+jB,EAAaC,GACtC,IAAMC,EACJD,EAASE,MAAM,EAAG,IAAIjjB,QAAQ,IAAK,KAAO,IAC5C+iB,EAAW,IAAI1E,KAAK2E,GACpBF,EAAc,IAAIzE,KAAKyE,GAEvB,IAAMI,GAAiBL,MAAME,EAASI,WAChCC,GAAoBP,MAAMC,EAAYK,WAE5C,IAAKD,IAAkBE,EACrB,OAAOzkB,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEO,MAAO,OAAQL,SAAC,YAGxC,IAAMskB,EAAiBP,EAAcC,EAC/BO,EAAUxB,KAAKyB,MAAMF,EAAiB,KACtCG,EAAU1B,KAAKyB,MAAMD,EAAU,IAC/BG,EAAQ3B,KAAKyB,MAAMC,EAAU,IAC7BE,EAAO5B,KAAKyB,MAAME,EAAQ,IAE1BE,EAAU,SAAC9V,EAAO+V,GAAI,SAAAtiB,OACvBuM,EAAK,KAAAvM,OAAIsiB,GAAItiB,OAAGuM,EAAQ,EAAI,IAAM,GAAE,SAEzC,OAAI6V,EAAO,GACF/kB,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEO,MAAO,OAAQL,SAAE4kB,EAAQD,EAAM,SAC5CD,EAAQ,GACV9kB,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEO,MAAO,OAAQL,SAAE4kB,EAAQF,EAAO,UAC7CD,EAAU,GAEjB7kB,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEO,MAAO,OAAQL,SAAE4kB,EAAQH,EAAS,aAIjD7kB,EAAAA,EAAAA,KAAA,QAAME,MAAO,CAAEO,MAAO,OAAQL,SAAE4kB,EAAQL,EAAS,WAGvD,CAmDSO,CAAkB,IAAIxF,KAAQqD,UAKzC,IAGFL,EAAMyC,YAAc,QAEpB,Q,yECnIMzgB,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAqB3CskB,IApBkBrkB,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,KAEyBhE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAE2B,eAAAR,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjT,GAAE,IAAAmT,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EACjClB,EAAAA,EAAc8B,IAAI,oCAADlU,OACAD,IACpC,KAAD,EAFS,OAETmT,EAAAE,EAAAK,KAFK3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAoCH5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,gBAxC4BY,GAAA,OAAAhS,EAAAmO,MAAA,KAAA8D,UAAA,MA0ChB6O,EAAa,eAAA5O,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOd,GAAO,IAAAe,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OAEa,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,iBAExCN,GAIA,KAAD,EANW,OAMXe,EAAAC,EAAAR,KANO3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SAOL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAXyBS,GAAA,OAAAV,EAAA/D,MAAA,KAAA8D,UAAA,KAab8O,EAAU,eAAAvO,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEgB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,uBAAwBN,GAAS,KAAD,EAA9D,OAA8DqB,EAAAC,EAAAd,KAAlE3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SACL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBALsBY,GAAA,OAAAb,EAAArE,MAAA,KAAA8D,UAAA,KAMV+O,EAAoB,eAAAnO,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,EAASlT,GAAE,IAAA4U,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,eACjC1I,IAAfqI,EAAQlT,GAAgB,CAAA6U,EAAAtB,KAAA,QAC4B,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,4BAADvT,OACXiT,EAAQlT,IACpCkT,EAAQA,SACR,KAAD,EAHW,OAGX0B,EAAAC,EAAAnB,KAHO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAIL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KAEd,gBATgCe,EAAAK,GAAA,OAAArB,EAAA1E,MAAA,KAAA8D,UAAA,KAUpBgP,EAAe,eAAA1N,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAAD,GAAA,IAAAiO,EAAA7P,EAAA8B,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OAEyB,OAFhBwP,EAAWjO,EAAXiO,YAAgB7P,GAAOnF,EAAAA,EAAAA,GAAA+G,EAAA9G,IAE7DkE,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,uBAADvT,OAChB8iB,GACvB7P,GACA,KAAD,EAHW,OAGX8B,EAAAC,EAAAvB,KAHO3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SAIL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAR2BqB,GAAA,OAAAhB,EAAApF,MAAA,KAAA8D,UAAA,KCyQ5B,EApVc,SAAHjS,GACAA,EAATmhB,UAQK,IAADC,EAPJC,EAAUrhB,EAAVqhB,WACAC,EAAKthB,EAALshB,MACAC,EAAWvhB,EAAXuhB,YAEAC,GADUxhB,EAAVyhB,WACWzhB,EAAXwhB,aACAE,EAAM1hB,EAAN0hB,OACAC,EAAY3hB,EAAZ2hB,aAEgBC,GAAgBvf,EAAAA,EAAAA,aAAYwe,GAApCte,OACQsf,GAAgBxf,EAAAA,EAAAA,aAAY4e,GAApC1e,OACRH,GAAsCI,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA5B0f,GAAFrf,EAAA,GAAgBA,EAAA,IAClCE,GAAoCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAzCof,EAAUnf,EAAA,GAAEof,EAAapf,EAAA,GAChCE,GAAwCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAhDmf,EAAYhf,EAAA,GAAEif,EAAejf,EAAA,GAC9B9C,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,KAEyBhE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAEF,SAAS2hB,EAAkBhkB,GAEzByjB,EAAYzjB,EAAI,CACdmJ,UAAW,SAACpF,GAEV4f,EAAe5f,EAAKA,MACpB8f,EAAc9f,EAAKA,KACrB,EACAqF,QAAS,SAACC,GACR,GAGN,CAiBA,IAAM4a,EAAkB,SAACrX,GAEvB,IACMsX,GADc,IAAIlH,MACUC,eAnBpC,SAA4B/J,EAAStG,GAEnC8W,EAAYxQ,EAAS,CACnB/J,UAAW,SAACpF,GACV,IAAMogB,EAAY,CAChB/F,gBAAiBra,EAAKA,KACtB6I,KAAMA,GAER6R,EAAK,gBAAiB,CAAErX,MAAO+c,GAEjC,EACA/a,QAAS,SAACC,GACR,GAGN,CAaE+a,CAPgB,CACdC,aAAczX,EAAKyX,aACnBtB,YAAanW,EAAKmW,YAClB1E,UAAW6F,EACX3F,QAAS2F,GAGiBtX,EAE9B,EACuBzO,aAAaC,QAAQ,mBAC5C6G,EAAAA,EAAAA,YAAU,WACR,IAAMqf,EAAY,WAChB,GAAIniB,EAAwB,CAE1B,IAAMoiB,EAAQpmB,aAAaC,QAAQ,kBAEvB,OAAVmmB,QACU1Z,IAAV0Z,GACU,wBAAVA,IAEAR,GAAgB,GAChBC,EAAkBO,GAClBR,GAAgB,GAEpB,KAAO,CACL,IAAMQ,EAAQpmB,aAAaC,QAAQ,kBACrB,OAAVmmB,IACFR,GAAgB,GAChBC,EAAkBO,GAClBR,GAAgB,GAEpB,CACF,EAEAO,IAEA,IAAME,EAAaC,YAAYH,EAAW,KAE1C,OAAO,kBAAMI,cAAcF,EAAY,CACzC,GAAG,CAACriB,KACJ8C,EAAAA,EAAAA,YAAU,WACR,IAAMsf,EAAQpmB,aAAaC,QAAQ,kBAEnC,GACY,OAAVmmB,QACU1Z,IAAV0Z,GACU,wBAAVA,EACA,CACA,IAAMI,EAAM,IAAIC,YAAY,GAAD3kB,OAAI8R,EAAAA,EAAQ,QAAA9R,OAAOskB,IA2B9C,OAzBAI,EAAIE,UAAY,SAAClf,GACf,IAAMmf,EAAoB7iB,KAAKC,MAAMyD,EAAM5B,MAE3C4f,GAAe,SAACoB,GACd,IAAMC,EAAqBD,EAAgBrkB,KAAI,SAACukB,GAC9C,OACEA,EAAOlC,cAAgB+B,EAAkBI,cACzCD,EAAOE,WAAaL,EAAkBK,UAEtCze,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACKue,GAAM,IACTzY,MAAOsY,EAAkBtY,MACzB4Y,gBAAiBN,EAAkBM,gBACnCC,aAAcP,EAAkBO,eAI7BJ,CACT,IAGA,OAFAza,QAAQC,IAAIua,GACZnB,EAAcmB,GACPA,CACT,GACF,EAEO,WACLL,EAAIW,OACN,CACF,CACF,GAAG,IAEH,IAAIC,EAAc,EACdC,EAAa,EACbC,EAAQ,EACRC,EAAiB,GACjBC,EAAiB,GACjBC,EAAY,GACN,OAAVhC,QAAU,IAAVA,GAAAA,EAAYiC,SAAQ,SAACjZ,GAED,QAAZ,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,UACD,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QAAY,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMsT,YAAgB,OAAJtT,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QAAY,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMuT,YAErDoF,IACAG,EAAeI,KAAKlZ,IACK,QAAZ,OAAJA,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QACfgZ,IACAG,EAAeG,KAAKlZ,KAEpB6Y,IACAG,EAAUE,KAAKlZ,GAEnB,IAEAwW,EAAYmC,GACZrC,EAAWsC,GACXrC,EAAMsC,GACN,IAAIM,EAAenC,EAEjBmC,EADEvC,EACakC,EACNrC,EACMsC,EACNpC,EACMqC,EAEAhC,EAEjB,IAAMnF,GAAO7b,EAAAA,EAAAA,MACbnD,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAClB,OACEtC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,WAAWC,MAAO,CAAE0O,MAAO,SAAUxO,UAClDJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CAAChiB,UAAU,8CAA6CG,SAC1DomB,GACCvjB,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACGuS,EAAAA,EAAAA,GAAI+V,MAAM,IAAItlB,KAAI,SAACulB,EAAGpY,GAAK,OAC1BvQ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAEHmgB,GAAG,KACHlgB,GAAG,IACH7F,GAAG,IACH5C,UAAS,IAAA0C,OACPN,EAAW,uBAAyB,yBACnCjC,UAEHJ,EAAAA,EAAAA,KAAC6oB,EAAAA,GAAK,CAAAzoB,UACJJ,EAAAA,EAAAA,KAAC8oB,EAAAA,GAAS,CAAA1oB,UACRJ,EAAAA,EAAAA,KAACsgB,EAAAA,EAAQ,CAACvM,QAAM,EAACwM,UAAW,CAAEC,KAAM,UAVnCjQ,EAaA,KAETvQ,EAAAA,EAAAA,KAAA,aAGU,QAFT2lB,EAEH8C,SAAY,IAAA9C,OAAA,EAAZA,EAAcviB,KAAI,SAACkM,EAAMiB,GAAK,OAC5BvQ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAEHmgB,GAAG,KACH3oB,UAAS,IAAA0C,OACPN,EAAW,uBAAyB,yBAEtCnC,MAAO,CACL6oB,OAAQ,sCACRC,aAAc,MACdlH,QAAS,IACTlT,MAAO,OACPzO,OAAQ,QACRC,UAEF6C,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ3oB,MAAO,CAAE+oB,OAAQ,WACjBhpB,UAAS,IAAA0C,OACPN,EAAW,uBAAyB,yBAEtC2D,QAAS,kBAAM2gB,EAAgBrX,EAAK,EAAClP,SAAA,EAErC6C,EAAAA,EAAAA,MAACimB,EAAAA,GAAW,CACVjpB,UAAU,wDACVyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCnC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAE1BJ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,MAAKG,SACX,OAAJkP,QAAI,IAAJA,GAAAA,EAAMkQ,WAAalQ,EAAKkQ,WAAalQ,EAAKyP,YAE7C9b,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACxI,UAAU,UAASG,SAAA,EACvBJ,EAAAA,EAAAA,KAAA,OACE6F,IAAKsjB,EACLxa,IAAI,UACJzO,MAAO,CACL0O,MAAO,OACPzO,OAAQ,OACRipB,WAAY,UAGhBppB,EAAAA,EAAAA,KAAA,OACEE,MAAO,CACLO,MAAO6O,EAAKyY,aAAe,IAAM,MAAQ,SAE3CrlB,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAEvCkP,EAAKyY,sBAIZ/nB,EAAAA,EAAAA,KAAC8oB,EAAAA,GAAS,CACR5oB,MAAO,CACL2O,gBACkB,QAAZ,OAAJS,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,OACF,sBACI,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QAAY,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMsT,YAChB,OAAJtT,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,QAAY,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMuT,UACpB,qBACA,uBACNziB,UAEFJ,EAAAA,EAAAA,KAAC0iB,EAAK,CACJO,WAAgB,OAAJ3T,QAAI,IAAJA,OAAI,EAAJA,EAAM+Z,WAClBrG,MAAW,OAAJ1T,QAAI,IAAJA,OAAI,EAAJA,EAAMmW,YACb/iB,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCugB,SAAc,OAAJtT,QAAI,IAAJA,OAAI,EAAJA,EAAMsT,SAChBC,SAAc,OAAJvT,QAAI,IAAJA,OAAI,EAAJA,EAAMuT,SAChBC,aAAcoB,MAAU,OAAJ5U,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,OAAS,EAAQ,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,MAC7C6T,YACkB,QAAZ,OAAJzT,QAAI,IAAJA,OAAI,EAAJA,EAAMJ,OAAqB,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMwY,gBAAkB,WAnElDvX,EAoHA,OAMnB,E,oBChGA,G,SAnLoB,SAAHhM,GAAUA,EAAJwb,KAASxb,EAAH+kB,IAAiB,IAAZ7iB,EAAIlC,EAAJkC,KAChCtE,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SACRsE,GAD6BxE,EAAXG,aACkByE,EAAAA,EAAAA,UAASN,GAAQ,KAAGO,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAjD2f,EAAUtf,EAAA,GAAEuf,EAAavf,EAAA,IAGhCW,EAAAA,EAAAA,YAAU,WAEJlB,GACF8f,EAAc9f,EAElB,GAAG,CAACA,IAEJ,IAoDM8iB,GAAW5W,EAAAA,EAAAA,GAAO,IAAI6W,IAAIlD,EAAWljB,KAAI,SAACqmB,GAAM,OAAKA,EAAO1J,IAAI,MAChE2J,GAAe/W,EAAAA,EAAAA,GAChB,IAAI6W,IACLlD,EAAWqD,SAAQ,SAACF,GAAM,OACxBA,EAAOG,SAASxmB,KAAI,SAAC0c,GAAO,OAAKA,EAAQ+J,QAAQ,GAAC,MAKlDC,EAAc,IAAIC,IA4BxB,OA1BAzD,EAAWiC,SAAQ,SAACkB,GAClB,IAAMzG,EAAQyG,EAAOO,OACfxK,EAAaiK,EAAOQ,YACpBnZ,EAAG,GAAAnO,OAAMqgB,EAAK,KAAArgB,OAAI6c,GAElB0K,EAAWJ,EAAYjT,IAAI/F,IAAQ,CACvCkS,MAAAA,EACAxD,WAAAA,EACA0K,SAAU,IAGZR,EAAgBnB,SAAQ,SAACsB,GACvB,IAAMM,EAAmBV,EAAOG,SAC7B/W,QAAO,SAACiN,GAAO,OAAKA,EAAQ+J,WAAaA,CAAQ,IACjDzmB,KAAI,SAAC0c,GAAO,MAAM,CACjBM,QAASN,EAAQM,QACjByJ,SAAU/J,EAAQ+J,SAClBzG,IAAKqG,EAAOrG,IACZC,IAAKoG,EAAOpG,IACb,IACH6G,EAASA,SAAS1B,KAAK2B,EACzB,IAEAL,EAAYjL,IAAI/N,EAAKoZ,EACvB,KAGElqB,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,UACE6C,EAAAA,EAAAA,MAAA,SAAOhD,UAAU,0BAAyBG,SAAA,EACxC6C,EAAAA,EAAAA,MAAA,SAAA7C,SAAA,EACE6C,EAAAA,EAAAA,MAAA,MAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,gBAC5CmpB,EAAYnmB,KAAI,SAACgnB,GAAU,OAC1BpqB,EAAAA,EAAAA,KAAA,MACE0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAEnCgoB,QAASX,EAAgBY,OAAOlqB,SAE/BgqB,GAHIA,EAIF,QAGTnnB,EAAAA,EAAAA,MAAA,MAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,SACCupB,EAAYnmB,KAAI,kBACfsmB,EAAgBtmB,KAAI,SAACymB,GAAQ,OAC3B7pB,EAAAA,EAAAA,KAAA,MAAAI,SAAA,GAAAuC,OAAuBknB,EAAQ,QAAtBA,EAAiC,GAC1C,WAIR7pB,EAAAA,EAAAA,KAAA,SAAAI,UACGuS,EAAAA,EAAAA,GAAImX,EAAYS,UAAUnnB,KAAI,SAAAqT,GAAA,IAAGuM,EAAKvM,EAALuM,MAAOxD,EAAU/I,EAAV+I,WAAY0K,EAAQzT,EAARyT,SAAQ,OAC3DjnB,EAAAA,EAAAA,MAAA,MAAA7C,SAAA,EACE6C,EAAAA,EAAAA,MAAA,MAAIP,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAA,CACzCof,EAAW,IAAEwD,KAEfkH,EAASM,OAAOpnB,KAAI,SAAC0c,EAASvP,GAE7B,IAAQ6P,EAAgCN,EAAhCM,QAAmBgD,GAAatD,EAAvB+J,SAAuB/J,EAAbsD,KAAKC,EAAQvD,EAARuD,IAIhC,OAA4B,IAAxBlD,WAAWC,IAEXpgB,EAAAA,EAAAA,KAAA,MAEEE,MAAO,CACL2O,gBAAiB,YACjBka,OAAQ,oBACRjH,QAAS,OACT1hB,SACH,OAED,GAAAuC,OARUqgB,EAAK,KAAArgB,OAAI6c,EAAU,KAAA7c,OAAI4N,KAanCvQ,EAAAA,EAAAA,KAAA,MAEEE,MAAO,CACL2O,gBACEsR,WAAWC,GAAWD,WAAWkD,IACjClD,WAAWC,GAAWD,WAAWiD,GAC7B,UACA,UACN2F,OAAQ,oBACRjH,QAAS,OACT1hB,SAEDggB,GAAO,GAAAzd,OAXAqgB,EAAK,KAAArgB,OAAI6c,EAAU,KAAA7c,OAAI4N,GAcrC,MAAE,GAAA5N,OAzCQqgB,EAAK,KAAArgB,OAAI6c,GA0ChB,MAED,QAKhB,G,WC8BA,MAjRA,WACE,IAAM9a,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAiBF4B,IAf2B5F,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,KAEgCgC,EAAAA,EAAAA,UAAS,IAAI2Y,OAAO1Y,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA/Coa,EAAS/Z,EAAA,GAAEga,EAAYha,EAAA,GAC9BE,GAAsBH,EAAAA,EAAAA,UAAS,GAAEI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1BoiB,EAAGniB,EAAA,GAAEsjB,EAAMtjB,EAAA,GAClBE,GAAwBN,EAAAA,EAAAA,UAAS,IAAGS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA7BZ,EAAIe,EAAA,GAAEkjB,EAAOljB,EAAA,GACpB+Z,GAA8Bxa,EAAAA,EAAAA,UAAS,IAAGya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAnCoJ,EAAOnJ,EAAA,GAAEoJ,EAAUpJ,EAAA,GAC1BE,GAAkC3a,EAAAA,EAAAA,UAAS,IAAG4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAvCmJ,EAASlJ,EAAA,GAAEmJ,EAAYnJ,EAAA,GAK9Bxf,GAFa4e,EAAUpB,eAEWvd,EAAAA,EAAAA,MAA1BC,EAAQF,EAARE,SACQ0oB,GADa5oB,EAAXG,aACasE,EAAAA,EAAAA,aAAY0e,GAAnCxe,QACQkkB,GAAqBpkB,EAAAA,EAAAA,aAAY2e,GAAzCze,OASR,SAASmkB,EAA0BrV,EAASlT,GAO1CsoB,EALqB,CACnBpV,QAAAA,EACAlT,GAAAA,GAG6B,CAC7BmJ,UAAW,SAACpF,GAAU,IAADykB,EAAAC,EAAAC,EAEnBV,EAAiB,QAAVQ,EAACzkB,EAAKA,YAAI,IAAAykB,OAAA,EAATA,EAAWG,aACnBP,EAAsB,QAAVK,EAAC1kB,EAAKA,YAAI,IAAA0kB,OAAA,EAATA,EAAWN,WACxBD,EAAoB,QAAVQ,EAAC3kB,EAAKA,YAAI,IAAA2kB,OAAA,EAATA,EAAWT,QACxB,EACA7e,QAAS,SAACC,GAAW,GAEzB,EAEApE,EAAAA,EAAAA,YAAU,WACR,IAAMqf,EAAY,WA3BpB,IAAyBpb,EACvBmf,EAAWnf,EAAY,CACrBC,UAAW,SAACpF,GACV,EAEFqF,QAAS,SAACC,GAAW,GAwBvB,EACAib,IAEA,IAAME,EAAaC,YAAYH,EAAW,KAE1C,OAAO,kBAAMI,cAAcF,EAAY,CACzC,GAAG,KACHvf,EAAAA,EAAAA,YAAU,WACR,IAAMiO,EAAU,CACdmP,KAAMuE,EACNvI,UAAWA,EAAUpB,cACrB2L,UAAW,IAEb,GAAIzmB,EAAwB,CAE1B,IAAMoiB,EAAQpmB,aAAaC,QAAQ,kBAEvB,OAAVmmB,QACU1Z,IAAV0Z,GACU,wBAAVA,GAGAgE,EAA0BrV,EAASqR,EAEvC,MAEEgE,EACErV,EACA/U,aAAaC,QAAQ,kBAG3B,GAAG,CAACigB,EAAWuI,EAAKzkB,IACpB,IAmBA0mB,GAA8CxkB,EAAAA,EAAAA,UAAS,IAAGykB,GAAAvkB,EAAAA,EAAAA,GAAAskB,EAAA,GAAnDE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GA2B1C,OACEvoB,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,yBAAA0C,OACPN,EAAW,uBAAyB,IAEtCnC,MAAO,CACL+jB,UAAW,OACX+E,aAAc,MACdlH,QAAS,OACTiH,OAAQ,uCACR3oB,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,uBAC7CJ,EAAAA,EAAAA,KAAA,QAAMC,UAAU,SAAQG,UACtB6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,qBAAoBG,SAAA,EACjC6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,6CAA4CG,SAAA,EACzDJ,EAAAA,EAAAA,KAAA,SACE4I,QAAQ,aACRlG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SACzC,mBAGDJ,EAAAA,EAAAA,KAACoiB,IAAU,CACTniB,UAAS,oBAAA0C,OAAsBN,EAAW,cAAgB,IAC1DggB,SAAUtB,EACVnf,KAAK,YACL0gB,WAAW,aACXC,gBAAgB,gBAChBvZ,SA1EmB,SAAC+W,GAC9BiB,EAAajB,GAMbkL,EALgB,CACdlG,KAAMuE,EACNvI,UAAWhB,EAAKJ,eAIpB,QAsEQ1c,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,SAAQG,SAAA,EACrBJ,EAAAA,EAAAA,KAAA,SACE4I,QAAQ,aACRlG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCnC,MAAO,CAAEqjB,YAAa,OAAQ6F,WAAY,QAAShpB,SACpD,oBAGDJ,EAAAA,EAAAA,KAAC2rB,EAAAA,GAAM,CACLC,SAAO,EACP3rB,UAAS,eAAA0C,OAAiBN,EAAW,cAAgB,IACrD6M,MAAOuc,EAAgBroB,KAAI,SAAC2jB,GAAY,IAAA8E,EAAA,MAAM,CAC5CC,MAEC,QAFID,EAAElB,EAAQoB,MACb,SAACtC,GAAM,OAAKA,EAAO1C,eAAiBA,CAAY,WACjD,IAAA8E,OAAA,EAFMA,EAEJ5B,YACH/a,MAAO6X,EACR,IACDrG,QAASiK,EAAQvnB,KAAI,SAACqmB,GAAM,MAAM,CAChCqC,MAAOrC,EAAOQ,YACd/a,MAAOua,EAAO1C,aACf,IACD/d,SA/EoB,SAACgjB,GAE/B,IAAMC,EAAwBD,EAAgB5oB,KAAI,SAACqmB,GAAM,OAAKA,EAAOva,KAAK,IAC1Ewc,EAAmBO,EACrB,EA4EYC,OAAQ,CACNC,UAAW,SAACC,GAAQ,OAAAhjB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACfgjB,GAAQ,IACXxd,MAAO,KAAG,MAKhB5O,EAAAA,EAAAA,KAAA,UACEgG,QApFS,SAACiD,GACpBA,EAAEV,iBAEF,IAAMqN,EAAU,CACdmP,KAAMuE,EACNvI,UAAWA,EAAUpB,cACrB2L,UAAWG,GAIXR,EACErV,EAFA/Q,EAGAhE,aAAaC,QAAQ,kBAKrBD,aAAaC,QAAQ,kBAG3B,EAiEYZ,MAAO,CACL0O,MAAO,QACPzO,OAAQ,OACRksB,YAAa,YACbC,kBAAmB,YACnBtD,aAAc,MACduD,UAAW,uCACXnD,WAAY,OACZnF,UAAW,OACX7jB,SACH,YAID6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,SAASC,MAAO,CAAEqjB,YAAa,OAAQnjB,SAAA,EACpDJ,EAAAA,EAAAA,KAAA,SACE4I,QAAQ,aACRlG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCnC,MAAO,CAAEqjB,YAAa,OAAQ6F,WAAY,QAAShpB,SACpD,UAGDJ,EAAAA,EAAAA,KAAA,UACEC,UAAS,eAAA0C,OAAiBN,EAAW,cAAgB,IACrD6M,MAAOoa,EACPppB,MAAO,CAAE0O,MAAO,QAChB5F,SA/Ha,SAACC,GAC1B,IAAMujB,EAAchQ,OAAOvT,EAAEC,OAAOgG,OACpCub,EAAO+B,GAMPvB,EALgB,CACdlG,KAAMyH,EACNzL,UAAWA,EAAUpB,eAIzB,EAsH2Cvf,SAE5B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAGgD,KAAI,SAAC8L,GAAK,OAC/BlP,EAAAA,EAAAA,KAAA,UAAoBkP,MAAOA,EAAM9O,SAC9B8O,GADUA,EAEJ,UAIflP,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAeC,MAAO,CAAEkpB,WAAY,OAAQhpB,SAClD,OAANqsB,aAAM,IAANA,YAAM,EAANA,OAAQC,QAAQ7B,GAAWznB,KAC1B,SAAAmB,GAAA,IAAAkS,GAAAxP,EAAAA,EAAAA,GAAA1C,EAAA,GAAgBooB,GAAFlW,EAAA,GAAeA,EAAA,WAC3BzW,EAAAA,EAAAA,KAAA,UAEES,MAAM,UACNR,UAAU,iBACVC,MAAO,CACL0O,MAAO,OACPzO,OAAQ,OACRksB,YAAa,YACbC,kBAAmB,YACnBtD,aAAc,MACduD,UAAW,wCAEbvmB,QAAS,SAACiD,GAAC,OAAKA,EAAEV,gBAAgB,EAACnI,SAElCusB,GAbIA,EAcE,eAQrB3sB,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAAyBG,UACtCJ,EAAAA,EAAAA,KAAC4sB,EAAW,CAAC7M,KAAMgB,EAAWuI,IAAKA,EAAK7iB,KAAMA,QAItD,ECjQA,G,SAlCoB,SAAHlC,GAA+B,IAAzB3C,EAAI2C,EAAJ3C,KAAMirB,EAAKtoB,EAALsoB,MAAO3mB,EAAI3B,EAAJ2B,KAC5B+gB,EAAQpmB,aAAaC,QAAQ,kBACnCqB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SACFyqB,GADuB3qB,EAAXG,aACD8G,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACX6d,GAAmB,wBAAVA,GAAmC,CAAErY,MAAO,QAAS,CAAF,GAChEme,WAAY,aAGd,OACE/sB,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,UAWE6C,EAAAA,EAAAA,MAAA,OACEhD,UAAU,yCACVC,MAAO4sB,EACPpqB,GAAE,GAAAC,OAAKN,EAAW,aAAe,eAAgBjC,SAAA,EAEjDJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMA,EAAMyI,IAAI,WACvB3O,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAEysB,KAC9C7sB,EAAAA,EAAAA,KAAA,YACAA,EAAAA,EAAAA,KAAA,KAAG0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAEwB,QAIrD,G,WCqJA,ICwWA,EA7ekB,WAChB,IAAQ8E,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGFuD,IAFmB7H,EAAAA,EAAAA,KAAjB4qB,aAEW,WAAH,OAAStmB,EAAS,CAAE8B,KAAM,eAAiB,GAC3CykB,GAAkBrmB,EAAAA,EAAAA,aAAYye,GAAtCve,OACFpC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAEI2F,GAAuB3J,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,IAOF4B,IALyB5F,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,KAE+CgC,EAAAA,EAAAA,UAAS,IAAEC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAArDumB,EAAiBlmB,EAAA,GAAEmmB,EAAmBnmB,EAAA,GAC7CE,GAA0CH,EAAAA,EAAAA,UAAS,GAAEI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA9CkmB,EAAajmB,EAAA,GAAEkmB,EAAgBlmB,EAAA,GACtCE,GAA8CN,EAAAA,EAAAA,UAAS,GAAES,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAlDimB,EAAe9lB,EAAA,GAAE+lB,EAAkB/lB,EAAA,GAC1C+Z,GAAsCxa,EAAAA,EAAAA,UAAS,GAAEya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAA1CiM,EAAWhM,EAAA,GAAEiM,EAAcjM,EAAA,GAClCE,GAA0D3a,EAAAA,EAAAA,UAAS,GAAE4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAA9DgM,EAAqB/L,EAAA,GAAEgM,EAAwBhM,EAAA,GACtD4J,GAAsDxkB,EAAAA,EAAAA,UAAS,GAAEykB,GAAAvkB,EAAAA,EAAAA,GAAAskB,EAAA,GAA1DqC,EAAmBpC,EAAA,GAAEqC,GAAsBrC,EAAA,GAC5CsC,GAAQjtB,aAAaC,QAAQ,kBAC7BitB,GAAQltB,aAAaC,QAAQ,cAC7BktB,GAAQntB,aAAaC,QAAQ,gBAEnCgK,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAElB,SAAS2rB,GAAcvrB,EAAIwrB,GACzB,IAAMtY,GAAOuY,EAAAA,EAAAA,GAAA,GACVD,EAAS1R,OAAO9Z,IAGnB0rB,YAAW,WACTnB,EAAcrX,EAAS,CACrB/J,UAAW,SAACwiB,GAAS,IAADC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAClBxB,EAAmC,QAAhBmB,EAACD,EAAI5nB,KAAKmoB,cAAM,IAAAN,OAAA,EAAfA,EAAiBO,mBACrCxB,EAAgC,QAAhBkB,EAACF,EAAI5nB,KAAKmoB,cAAM,IAAAL,OAAA,EAAfA,EAAiBO,eAClCvB,EAAkC,QAAhBiB,EAACH,EAAI5nB,KAAKmoB,cAAM,IAAAJ,OAAA,EAAfA,EAAiBO,iBACpCtB,EAA8B,QAAhBgB,EAACJ,EAAI5nB,KAAKmoB,cAAM,IAAAH,OAAA,EAAfA,EAAiBO,aAChCrB,EAAwC,QAAhBe,EAACL,EAAI5nB,KAAKmoB,cAAM,IAAAF,OAAA,EAAfA,EAAiBO,uBAC1CpB,GAAsC,QAAhBc,EAACN,EAAI5nB,KAAKmoB,cAAM,IAAAD,OAAA,EAAfA,EAAiBO,qBACxCjlB,GACF,EACA6B,QAAS,SAACC,GACRshB,EAAiB,GACjBE,EAAmB,GACnBE,EAAe,GACfE,EAAyB,GACzBE,GAAuB,GACvB5jB,GACF,GAEJ,GAAG,EACL,CACA,IAAAklB,IAAgCpoB,EAAAA,EAAAA,UAAS,GAAEqoB,IAAAnoB,EAAAA,EAAAA,GAAAkoB,GAAA,GAApCE,GAAQD,GAAA,GAAEtJ,GAAWsJ,GAAA,GAC5BE,IAA8BvoB,EAAAA,EAAAA,UAAS,GAAEwoB,IAAAtoB,EAAAA,EAAAA,GAAAqoB,GAAA,GAAlCE,GAAOD,GAAA,GAAE3J,GAAU2J,GAAA,GAC1BE,IAAoB1oB,EAAAA,EAAAA,UAAS,GAAE2oB,IAAAzoB,EAAAA,EAAAA,GAAAwoB,GAAA,GAAxBE,GAAED,GAAA,GAAE7J,GAAK6J,GAAA,GAChBE,IAA4B7oB,EAAAA,EAAAA,UAAS,GAAE8oB,IAAA5oB,EAAAA,EAAAA,GAAA2oB,GAAA,GAAhCE,GAAMD,GAAA,GAAEnK,GAASmK,GAAA,GACxBE,IAAwChpB,EAAAA,EAAAA,WAAS,GAAMipB,IAAA/oB,EAAAA,EAAAA,GAAA8oB,GAAA,GAAhD7J,GAAY8J,GAAA,GAAEC,GAAeD,GAAA,GACpCE,IAAsCnpB,EAAAA,EAAAA,WAAS,GAAMopB,IAAAlpB,EAAAA,EAAAA,GAAAipB,GAAA,GAA9CnK,GAAWoK,GAAA,GAAEC,GAAcD,GAAA,GAClCE,IAA4BtpB,EAAAA,EAAAA,WAAS,GAAMupB,IAAArpB,EAAAA,EAAAA,GAAAopB,GAAA,GAApCpK,GAAMqK,GAAA,GAAEC,GAASD,GAAA,GACxBE,IAAoCzpB,EAAAA,EAAAA,WAAS,GAAM0pB,IAAAxpB,EAAAA,EAAAA,GAAAupB,GAAA,GAA5CxK,GAAUyK,GAAA,GAAeA,GAAA,GAiEhC,OAjCA9oB,EAAAA,EAAAA,YAAU,WACR,IAAI+oB,EAAaC,EACjB,GACY,OAAV3C,SACUzgB,IAAVygB,IACU,sBAAVA,GAEA0C,EAAc1C,GACd2C,EAAa,oBACR,GACK,OAAV5C,SACUxgB,IAAVwgB,IACU,oBAAVA,GAEA2C,EAAc3C,GACd4C,EAAa,kBACR,GAAc,OAAV7C,SAA4BvgB,IAAVugB,GAAqB,CAChD,GAAc,wBAAVA,GAMF,YADAG,KAJAyC,EAAc5C,GACd6C,EAAa,YAMjB,MAEoBpjB,IAAhBmjB,QAA4CnjB,IAAfojB,EAC/B1C,GAAcyC,EAAaC,GAE3B1C,IAEJ,GAAG,CAACD,GAAOD,GAAOD,MAEhB7qB,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,CAEGyE,EACEhE,aAAaC,QAAQ,mBACuB,wBAA3CD,aAAaC,QAAQ,wBACsByM,IAA3C1M,aAAaC,QAAQ,mBACtBD,aAAaC,QAAQ,eACmB,oBAAvCD,aAAaC,QAAQ,eACtBD,aAAaC,QAAQ,iBACqB,sBAAzCD,aAAaC,QAAQ,iBACrBmC,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACE6C,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,wBAG7CJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,yCAK/C6C,EAAAA,EAAAA,MAAA,OACE/C,MAAO,CACL+jB,UAAW,OACX2M,aAAc,OACdnwB,MAAO,SACPL,SAAA,EAEFJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,cAC7CJ,EAAAA,EAAAA,KAAA,UACEE,MAAO,CAAE8oB,aAAc,MAAOlH,QAAS,OACvC9b,QAhFW,WACvBuqB,IAAU,GACVH,IAAe,GACfH,IAAgB,EAClB,EA4EwC7vB,SAC3B,qBAKH6C,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACE6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAChiB,UAAU,wBAAuBG,SAAA,EAErC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHC,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,kBACHsD,QAnGY,WAC1BiqB,IAAgB,GAChBG,IAAe,GACfG,IAAU,EACZ,EA+F6CnwB,SAAA,EAE7BJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM2qB,EAAAA,EACNliB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAC/CivB,MAEHrvB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,mBAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,qBACHtC,SAAA,EAEAJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM6qB,EAAAA,EACNpiB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAC/C0vB,MAEH9vB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,iBAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,oBACHsD,QAzJM,WACpBuqB,IAAU,GACVH,IAAe,GACfH,IAAgB,EAClB,EAqJuC7vB,SAAA,EAEvBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM8qB,EAAAA,EACNriB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAAEuvB,MACpD3vB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,cAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,mBACHsD,QAxKW,WACzBoqB,IAAe,GACfH,IAAgB,GAChBM,IAAU,EACZ,EAoK4CnwB,SAAA,EAE5BJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM+qB,EAAAA,EACNtiB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAC/CovB,MAEHxvB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,kBAGPJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CAAA7hB,UACHJ,EAAAA,EAAAA,KAACkxB,EAAK,CACJxL,UAAWA,GACXE,WAAYA,GACZC,MAAOA,GACPC,YAAaA,GACbI,aAAcA,GACdH,YAAaA,GACbE,OAAQA,GACRD,WAAYA,WAKlBhmB,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,UAIEJ,EAAAA,EAAAA,KAACmxB,EAAS,YAMlB,MAKAluB,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACE6C,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,wBAC7CJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,yCAK/CJ,EAAAA,EAAAA,KAAA,OACEE,MAAO,CAAE+jB,UAAW,OAAQ2M,aAAc,OAAQnwB,MAAO,SAAUL,UAEnEJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,gBAE/C6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAChiB,UAAU,wBAAuBG,SAAA,EAErC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAG7F,GAAI,EAAG5C,UAAU,cAAcyC,GAAG,kBAAiBtC,SAAA,EAC9DJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM2qB,EAAAA,EACNliB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAC/CivB,MAEHrvB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,mBAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,qBAAoBtC,SAAA,EAEvBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM6qB,EAAAA,EACNpiB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAAE0vB,MACpD9vB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,iBAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,oBAAmBtC,SAAA,EAEtBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM8qB,EAAAA,EACNriB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAAEuvB,MACpD3vB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,cAIP6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CACHmgB,GAAI,EACJlgB,GAAI,EACJ7F,GAAI,EACJ5C,UAAU,cACVyC,GAAG,mBAAkBtC,SAAA,EAErBJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJC,KAAM+qB,EAAAA,EACNtiB,IAAI,OACJrO,KAAK,KACLJ,MAAO,CAAEkpB,WAAY,WAEvBnmB,EAAAA,EAAAA,MAAC6tB,EAAAA,GAAS,CAAC5wB,MAAO,CAAEO,MAAO,WAAYL,SAAA,EACrCJ,EAAAA,EAAAA,KAAA,MAAIE,MAAO,CAAEkG,SAAU,OAAQ3F,MAAO,WAAYL,SAC/CovB,MAEHxvB,EAAAA,EAAAA,KAAA,KAAAI,SAAG,kBAGPJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CAAA7hB,UACHJ,EAAAA,EAAAA,KAACkxB,EAAK,CACJxL,UAAWA,GACXE,WAAYA,GACZC,MAAOA,GACPC,YAAaA,GACbI,aAAcA,GACdH,YAAaA,GACbE,OAAQA,GACRD,WAAYA,WAIlBhmB,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,UAIEJ,EAAAA,EAAAA,KAACmxB,EAAS,YAMlBnxB,EAAAA,EAAAA,KAAA,OACEE,MAAO,CACLO,MAAO,QACPwjB,UAAW,QACX7jB,UAEFJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CACHhiB,UAAU,OACVC,MAAO,CACL4P,QAAS,OACTwT,WAAY,SACZ8N,eAAgB,eAChBvP,cAAe,SACfwP,SAAU,QACVjxB,UAEF6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,mBAAkBG,SAAA,CAC9ByE,KACGipB,IAAmB,wBAAVA,MACT9tB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,gBACLsE,KAAMyL,EAAAA,EACNkb,MAAOK,IAGZloB,KAAwB+oB,IAAmB,oBAAVA,MAChC/tB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,aACLsE,KAAMwL,EAAAA,EACNmb,MAAOO,KAGXptB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,WACLsE,KAAM2L,EAAAA,EACNgb,MAAOW,IAER9iB,KACGsjB,IAAmB,sBAAVA,MACThuB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,eACLsE,KAAM0L,EAAAA,EACNib,MAAOS,KAKbttB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,oBACLsE,KAAM4L,EAAAA,EACN+a,MAAOe,IAGR/oB,KACGipB,IAAmB,wBAAVA,MACT9tB,EAAAA,EAAAA,KAACsxB,EAAW,CACV1vB,KAAK,sBACLsE,KAAM6L,EAAAA,EACN8a,MAAOa,aA8BzB,C,6NC7KA,IA7TwB,SAAHnpB,GAA2C,IAADgtB,EAAAC,EAApCjrB,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC1CC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGRC,IAF6BwU,EAAAA,EAAAA,MAArB1U,MACSnB,EAAAA,EAAAA,OACoByB,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1C8qB,EAAUzqB,EAAA,GAAEmE,EAAcnE,EAAA,GAE3BtC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAiBFmC,IAf2BnG,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,KAE4DgC,EAAAA,EAAAA,WAAS,IAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAC7EG,GAD6BF,EAAA,GAA6BA,EAAA,IACxBJ,EAAAA,EAAAA,WAAS,IAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1CD,EAASI,EAAA,GAAEkqB,EAAYlqB,EAAA,GACxBsmB,EAAQjtB,aAAaC,QAAQ,kBAC7B6wB,EAAiB9wB,aAAaC,QAAQ,kBAE5CygB,GAAgCxa,EAAAA,EAAAA,YAAUya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAnCqQ,EAAQpQ,EAAA,GAAEqQ,EAAWrQ,EAAA,GAC5BE,GAAgC3a,EAAAA,EAAAA,UAAS,CACvC6gB,aAAc,GACdkK,WAAY,GACZtW,SAAUoW,EACVriB,WAAYiN,OAAOsR,KAEnBnM,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GANKja,EAAQka,EAAA,GAAEja,EAAWia,EAAA,IAO5Bha,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,EAAY,CACV6H,WAAY9I,EAAK8I,WACjBqY,aAAcnhB,EAAKmhB,aACnBkK,WAAYrrB,EAAKqrB,WACjBtW,SAAU/U,EAAK+U,UAIrB,GAAG,CAAC/U,IACJ,IAAAsrB,GACEnrB,EAAAA,EAAAA,aAAY8U,EAAAA,IADEgL,EAAiBqL,EAAzBjrB,OAAiCwf,EAAUyL,EAAhBtrB,KAGnBuF,GAAepF,EAAAA,EAAAA,aAAYsU,EAAAA,IAAnCpU,OASR,IAAgBkrB,GAAmBprB,EAAAA,EAAAA,aAAYqF,EAAAA,IAAvCnF,OAaR,IAAgBmrB,GAAsBrrB,EAAAA,EAAAA,aAAYuF,EAAAA,IAA1CrF,OAaR,IAAgBorB,GAAsBtrB,EAAAA,EAAAA,aAAYyF,EAAAA,IAA1CvF,QAaRa,EAAAA,EAAAA,YAAU,WACJ9C,EAEF6hB,EAAkBoH,EAAO,CACvBjiB,UAAW,SAACpF,GACV,EAEFqF,QAAS,SAACC,GAAW,IAEblH,GAEV6hB,EAAkBiL,EAAgB,CAChC9lB,UAAW,SAACpF,GACV,EAEFqF,QAAS,SAACC,GAAW,GAG3B,GAAG,KACHpE,EAAAA,EAAAA,YAAU,WACR,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,cAClCksB,EAAensB,aAAaC,QAAQ,gBAEtCksB,GAAiC,sBAAjBA,EA5DpBgF,EA8DmBhF,EA9DQ,CACzBnhB,UAAW,SAACpF,GAEV0E,EAAe1E,EACjB,EACAqF,QAAS,SAACC,GACR,IAyDOomB,GAA6B,oBAAfA,EAvC3B,SAA0BvmB,GAExBsmB,EAAkBtmB,EAAY,CAC5BC,UAAW,SAACpF,GAEV0E,EAAe1E,EACjB,EACAqF,QAAS,SAACC,GACR,GAGN,CA8BIqmB,CAAiBD,GACRR,GAAqC,wBAAnBA,EAvD/B,SAA0B/lB,GAExBqmB,EAAkBrmB,EAAY,CAC5BC,UAAW,SAACpF,GAEV0E,EAAe1E,EACjB,EACAqF,QAAS,SAACC,GACR,GAGN,CA8CIsmB,CAAiBV,GA9EnB3lB,EAAW,GAAI,CACbH,UAAW,SAACpF,GACV0E,EAAe1E,EACjB,EACAqF,QAAS,SAACC,GAAW,GA+EzB,GAAG,CACDlL,aAAaC,QAAQ,kBACrBD,aAAaC,QAAQ,cACrBD,aAAaC,QAAQ,kBAGvB,IAGMwxB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,IAE5C,EA6BA/M,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAClB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAjCiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACCb,EAASirB,oBAC7BrqB,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAnKcjsB,EAAS,CAAE8B,KAAM,gBAqKtChC,EAAYiB,GACZY,EAAME,iBAENhC,IAEJ,EAe2BnG,SAAA,EAwBvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,gBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,mBAAiB,6BACjBxpB,gBAAgB,kCAChBzH,KAAK,eACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASmgB,aAChBllB,GAAG,qBACHsG,SAAUspB,EACVQ,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,mBACG,OAAVkmB,QAAU,IAAVA,GAAgB,QAANiL,EAAVjL,EAAY7f,YAAI,IAAA8qB,OAAN,EAAVA,EAAkBnuB,KAAI,SAACkM,EAAMiB,GAC5B,OACEvQ,EAAAA,EAAAA,KAAA,UAAQkP,MAAOI,EAAKsY,aAAaxnB,SAC9BkP,EAAKsY,cAD+BrX,EAI3C,WAIJtN,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,uBAAsBxI,SAC/B,kBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,oBAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,aACLsN,MAAOzH,EAASqqB,WAChB9oB,SAAUspB,EACVjpB,gBAAgB,2BAChB3G,GAAG,uBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,4BAA2BxI,SACpC,0BAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV5yB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBT,KAAK,kBACLsN,MAAO0iB,EACPvoB,gBAAgB,yCAChB3G,GAAG,4BACHsG,SAzGmB,SAACC,GAC1B,IAAM8pB,EAAmBC,SAAS/pB,EAAEC,OAAOgG,MAAO,KAAO,EACzD2iB,EAAYkB,GACZrrB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IACX+T,SAAUuX,IAEd,EAmGQzpB,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,qBACG,OAAVqxB,QAAU,IAAVA,GAAgB,QAAND,EAAVC,EAAYhrB,YAAI,IAAA+qB,OAAN,EAAVA,EAAkBpuB,KAAI,SAACkM,GACtB,OACEtP,EAAAA,EAAAA,KAAA,UAA4BkP,MAAOI,EAAKkM,SAASpb,SAC9CkP,EAAK2T,YADK3T,EAAKkM,SAItB,WAKJxb,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,qBAAuB,0BAKzC,C,qOCqpBA,IAr+B8B,SAAHlC,GAA8B,IAAxBkC,EAAIlC,EAAJkC,KAAM6f,EAAU/hB,EAAV+hB,WACrB2M,GAA2BrsB,EAAAA,EAAAA,aACzCsV,EAAAA,IADMpV,OAGQosB,GAA4BtsB,EAAAA,EAAAA,aAC1CwV,EAAAA,IADMtV,OAGRH,GAA8CI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAC1DO,GADsBF,EAAA,GAAoBA,EAAA,IACRD,EAAAA,EAAAA,WAAS,IAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1CE,EAASD,EAAA,GAChBE,GAD8BF,EAAA,IACcJ,EAAAA,EAAAA,WAAS,IAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAApD8rB,EAAc3rB,EAAA,GAAE4rB,EAAiB5rB,EAAA,GACxC+Z,GAA4Cxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAApD8R,EAAc7R,EAAA,GAAE8R,EAAiB9R,EAAA,GACxCE,GAAoC3a,EAAAA,EAAAA,WAAS,GAAM4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAA5C6R,EAAU5R,EAAA,GAAE6R,EAAa7R,EAAA,GAChC4J,GAA8CxkB,EAAAA,EAAAA,WAAS,GAAMykB,GAAAvkB,EAAAA,EAAAA,GAAAskB,EAAA,GAAtDkI,EAAejI,EAAA,GAAEkI,EAAkBlI,EAAA,GAClC9kB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACAitB,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aAEF1pB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EACrDuW,EAAWle,aAAaC,QAAQ,YAChC8wB,EAAW/wB,aAAaC,QAAQ,YAEtCquB,GAA8BpoB,EAAAA,EAAAA,UAAS,CACrC8gB,SAAU,OACVjmB,KAAM,GACNgyB,SAAU,EACVC,SAAU,EACV5O,KAAM,GACN6O,YAAa,cACblC,SAAUpV,OAAOoV,GACjB7S,SAAUvC,OAAOuC,GACjBgV,QAAQ,EACRC,WAAW,IACX5E,GAAAnoB,EAAAA,EAAAA,GAAAkoB,EAAA,GAXK8E,EAAO7E,EAAA,GAAE8E,EAAU9E,EAAA,GAY1BE,GAA8BvoB,EAAAA,EAAAA,UAAS,CACrC8gB,SAAU,QACVjmB,KAAM,GACNiyB,SAAU,EACVD,SAAU,EACV3O,KAAM,GACN6O,YAAa,GACblC,SAAUpV,OAAOoV,GACjB7S,SAAUvC,OAAOuC,GACjBgV,QAAQ,EACRC,WAAW,IACXzE,GAAAtoB,EAAAA,EAAAA,GAAAqoB,EAAA,GAXK6E,EAAO5E,EAAA,GAAE6E,EAAU7E,EAAA,GAY1BE,GAAsB1oB,EAAAA,EAAAA,UAAS,CAC7B8gB,SAAU,MACVjmB,KAAM,GACNgyB,SAAU,EACVC,SAAU,EACV5O,KAAM,GACN6O,YAAa,GACblC,SAAUpV,OAAOoV,GACjB7S,SAAUvC,OAAOuC,GACjBgV,QAAQ,EACRC,WAAW,IACXtE,GAAAzoB,EAAAA,EAAAA,GAAAwoB,EAAA,GAXK4E,GAAG3E,EAAA,GAAE4E,GAAM5E,EAAA,GAYlBE,IAAgC7oB,EAAAA,EAAAA,UAAS,CACvC8gB,SAAU,WACVjmB,KAAM,GACNgyB,SAAU,EACVC,SAAU,EACV5O,KAAM,GACN6O,YAAa,GACblC,SAAUpV,OAAOoV,GACjB7S,SAAUvC,OAAOuC,GACjBgV,QAAQ,EACRC,WAAW,IACXnE,IAAA5oB,EAAAA,EAAAA,GAAA2oB,GAAA,GAXK2E,GAAQ1E,GAAA,GAAE2E,GAAW3E,GAAA,IA0E5BloB,EAAAA,EAAAA,YAAU,WACR,GAAIlB,EAAM,CACR,IAAMguB,EAAc,CAClBC,KAAM,UACNC,MAAO,UACPN,IAAK,MACLE,SAAU,YAENK,EAAoB,CACxBhzB,KAAM,GACNgyB,SAAU,GACVC,SAAU,GACV5O,KAAM,GACN6O,YAAa,GACblC,SAAU,GAEViD,WAAW,EACXb,WAAW,GAGMvH,OAAOqI,KAAKL,GAAarxB,KAAI,SAACykB,GAC/C,IAAMvY,EAAO7I,EAAKslB,MAAK,SAACzc,GAAI,OAAKA,EAAKuY,WAAaA,CAAQ,IAE3D,GAAIvY,EAAM,CASJA,EANFylB,aAMEzlB,EALF0lB,aAKE1lB,EAJF2lB,WAIE3lB,EAHF4lB,WAGE5lB,EAFFsiB,SALF,IAMKphB,GAAIC,EAAAA,EAAAA,GACLnB,EAAIoB,GACR,OAAAtH,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEye,SAAUA,GACP+M,GACApkB,EAEP,CACE,OAAApH,EAAAA,EAAAA,GAAA,CACEye,SAAUA,GACP+M,EAGT,IAEWrM,SAAQ,SAACjZ,GAClB,IAAM6lB,EAAeV,EAAYnlB,EAAKuY,UACtC,GAAIsN,EACF,OAAQA,GACN,IAAK,UACHjB,EAAW5kB,GACX,MACF,IAAK,UACH8kB,EAAW9kB,GACX,MACF,IAAK,MACHglB,GAAOhlB,GACP,MACF,IAAK,WACHklB,GAAYllB,GAMpB,GACF,CACF,GAAG,CAAC7I,KACJkB,EAAAA,EAAAA,YAAU,WACJlB,GACFA,EAAK8hB,SAAQ,SAACkB,GACZ,OAAQA,EAAO5B,UACb,IAAK,OACHuL,EAAkB3J,EAAOuK,WACzB,MACF,IAAK,QACHV,EAAkB7J,EAAOuK,WACzB,MACF,IAAK,MACHR,EAAc/J,EAAOuK,WACrB,MACF,IAAK,WACHN,EAAmBjK,EAAOuK,WAKhC,GAEJ,GAAG,CAACvtB,IAEJ,IAAAspB,IAAgChpB,EAAAA,EAAAA,UAAS,IAAGipB,IAAA/oB,EAAAA,EAAAA,GAAA8oB,GAAA,GAA3BroB,IAAFsoB,GAAA,GAAaA,GAAA,IAatBoF,GAAsB,SAACnsB,GAC3B,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAa+pB,EAAPC,QAG3B,GAAc,KAAVtjB,EAAJ,CASA,IAAMmmB,EACM,aAATzzB,GAAgC,aAATA,GAAiC,aAAT4G,EAI5C0G,EAHA,gBAAgBomB,KAAKpmB,IAClBA,EACDA,EAIHgV,MAAMmR,IAAyB,aAATzzB,GAAgC,aAATA,GAChDsyB,GAAW,SAACqB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOyzB,GAAW,GAdvB,MALEnB,GAAW,SAACqB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOsN,GAAK,GAoBnB,EAEMsmB,GAAsB,SAACvsB,GAC3B,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAaitB,EAAPjD,QAE3B,GAAc,KAAVtjB,EAAJ,CAQA,IAAMmmB,EACM,aAATzzB,GAAgC,aAATA,GAAiC,aAAT4G,EAI5C0G,EAHA,gBAAgBomB,KAAKpmB,IAClBA,EACDA,EAGHgV,MAAMmR,IAAyB,aAATzzB,GAAgC,aAATA,GAChDwyB,GAAW,SAACmB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOyzB,GAAW,GAZvB,MALEjB,GAAW,SAACmB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GAChBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOsN,GAAK,GAkBnB,EAEMwmB,GAAkB,SAACzsB,GACvB,IAAA0sB,EAAuC1sB,EAAEC,OAAjCtH,EAAI+zB,EAAJ/zB,KAAMsN,EAAKymB,EAALzmB,MAAO1G,EAAImtB,EAAJntB,KAAamtB,EAAPnD,QAE3B,GAAc,KAAVtjB,EAAJ,CAQA,IAAMmmB,EACM,aAATzzB,GAAgC,aAATA,GAAiC,aAAT4G,EAI5C0G,EAHA,gBAAgBomB,KAAKpmB,IAClBA,EACDA,EAGHgV,MAAMmR,IAAyB,aAATzzB,GAAgC,aAATA,GAChD0yB,IAAO,SAACiB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOyzB,GAAW,GAZvB,MALEf,IAAO,SAACiB,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACZmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOsN,GAAK,GAkBnB,EAEM0mB,GAAuB,SAAC3sB,GAC5B,IAAA4sB,EAAuC5sB,EAAEC,OAAjCtH,EAAIi0B,EAAJj0B,KAAMsN,EAAK2mB,EAAL3mB,MAAO1G,EAAIqtB,EAAJrtB,KAAaqtB,EAAPrD,QAE3B,GAAc,KAAVtjB,EAAJ,CAQA,IAAMmmB,EACM,aAATzzB,GAAgC,aAATA,GAAiC,aAAT4G,EAI5C0G,EAHA,gBAAgBomB,KAAKpmB,IAClBA,EACDA,EAGHgV,MAAMmR,IAAyB,aAATzzB,GAAgC,aAATA,GAChD4yB,IAAY,SAACe,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOyzB,GAAW,GAZvB,MALEb,IAAY,SAACe,GAAS,OAAAnsB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACjBmsB,GAAS,IAAApH,EAAAA,EAAAA,GAAA,GACXvsB,EAAOsN,GAAK,GAkBnB,EAEA,SAAS1I,GAAYyH,GAvUIvH,EAAS,CAAE8B,KAAM,gBAyUxC4lB,YAAW,WAET,GAAI3nB,EAAM,CACR,IAAM/D,EAAK4jB,EAAWrK,SACtBiX,EACE,CAAEjlB,QAAAA,EAASvL,GAAAA,GACX,CACEmJ,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,kDACV,GACH,EACAjC,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuBloB,MAChCrN,MAAO,UACR,GACH,GAGN,MACEwyB,EAAuBhlB,EAAS,CAC9BpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,wCACV,GACH,EACAjC,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAuC,EAAAC,EAAA,MAAO,CAClBL,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVmqB,EAALnqB,EAAOkqB,gBAAQ,IAAAC,GAAM,QAANC,EAAfD,EAAiBzvB,YAAI,IAAA0vB,OAAhB,EAALA,EAAuBroB,MAChCrN,MAAO,UACR,GACH,GAGN,GAAG,EACL,CAEA,IAAM4E,IAAWC,EAAAA,EAAAA,MACX8wB,GAAe,WACnB/wB,GAAS,mBACX,EA+DAyF,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAClB,OACEtC,EAAAA,EAAAA,KAAC6oB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,GAAW,uBAAyB,IACnCjC,UAEH6C,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,2BACVkI,YAAU,EACVf,UAAWA,EACXgB,SA/Ce,SAACC,GACpBA,EAAME,iBACN,IAAM8tB,EAAkB,GAGlBC,EAAkB,SAAChnB,GAAI,OAAAlG,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACxBkG,GAAI,IACP0kB,WAAW,GAAI,EAGbb,GACFkD,EAAgB7N,KAAK8N,EAAgBrC,IAEnCZ,GACFgD,EAAgB7N,KAAK8N,EAAgBnC,IAEnCZ,GACF8C,EAAgB7N,KAAK8N,EAAgBjC,KAEnCZ,GACF4C,EAAgB7N,KAAK8N,EAAgB/B,KAMrC7sB,GAAY2uB,GACZ7vB,GAAY6vB,GACZD,IAMJ,EAa6Bh2B,SAAA,EAGvBJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,kBACHopB,MAAM,gBACN7rB,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtD2G,SAAU,SAACC,GAAC,OA/PiBupB,EA+PgBvpB,EAAEC,OAAOspB,aA9P5DY,EAAkBZ,GADgB,IAACA,CA+PiC,EAC9DA,QAASW,KAGXlwB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDmG,KAAK,OACL6Y,YAAY,oBACZzf,KAAK,OACLsN,MAAO+kB,EAAQryB,KACfoH,SAAUosB,GACV/rB,gBAAgB,mBAChB3G,GAAG,cACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAO+kB,EAAQL,SACf5qB,SAAUosB,GACV/rB,gBAAgB,4BAChB3G,GAAG,UACH4G,UAAQ,QAKZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDmG,KAAK,OACL6Y,YAAY,sBACZzf,KAAK,WACLsN,MAAO+kB,EAAQJ,SACf7qB,SAAUosB,GACV/rB,gBAAgB,4BAChB3G,GAAG,UACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV5yB,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,yBACXK,GAAG,WACHd,KAAK,OACLsN,MAAO+kB,EAAQhP,KACfjc,SAAUosB,GACV/rB,gBAAgB,mBAChBC,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,2BACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,WAAU9O,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,QAClBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,cAItBJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,UACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACT1I,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,yBACRkjB,MAAM,yBAIV7oB,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CAAA9H,SAAA,EACJJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,iBAGDJ,EAAAA,EAAAA,KAACw2B,EAAAA,GAAa,CACZv2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAG,kBACH8d,KAAM,EACN5e,KAAK,cACLsN,MAAO+kB,EAAQH,YACf9qB,SAAUosB,GACV/T,YAAY,0BAIhBrhB,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,kBACHzC,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDypB,MAAM,gBACN9iB,SAAU,SAACC,GAAC,OApXiBupB,EAoXgBvpB,EAAEC,OAAOspB,aAnX5Dc,EAAkBd,GADgB,IAACA,CAoXiC,EAC9DA,QAASa,KAGXpwB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,oBACZzf,KAAK,OACLsN,MAAOilB,EAAQvyB,KACfoH,SAAUwsB,GACVnsB,gBAAgB,mBAChB3G,GAAG,cACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOilB,EAAQP,SACf5qB,SAAUwsB,GACVnsB,gBAAgB,4BAChB3G,GAAG,gBACH4G,UAAQ,QAKZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOilB,EAAQN,SACf7qB,SAAUwsB,GACVnsB,gBAAgB,4BAChB3G,GAAG,gBACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,aAAW,yBACXnwB,GAAG,cACHd,KAAK,OACL3B,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD6M,MAAOilB,EAAQlP,KACfjc,SAAUwsB,GACVnsB,gBAAgB,mBAChBC,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,2BACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,WAAU9O,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,QAClBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,cAItB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,4BAEV5I,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACTt2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDo0B,SAAO,EACP/zB,GAAG,mBACHd,KAAK,SACL4wB,QAAS2B,EAAQJ,OACjB/qB,SAAUwsB,GACV1J,MAAM,0BAIV7oB,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CAAA9H,SAAA,EACJJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,iBAGDJ,EAAAA,EAAAA,KAACw2B,EAAAA,GAAa,CACZ9zB,GAAG,kBACHzC,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDme,KAAM,EACN5e,KAAK,cACLsN,MAAOilB,EAAQL,YACf9qB,SAAUwsB,GACVnU,YAAY,0BAIhBrhB,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,cACHzC,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDypB,OACE7oB,EAAAA,EAAAA,MAAA,QAAA7C,SAAA,CAAM,MACFJ,EAAAA,EAAAA,KAAA,OAAAI,SAAK,SAGX4I,SAAU,SAACC,GAAC,OAnfaupB,EAmfgBvpB,EAAEC,OAAOspB,aAlfxDgB,EAAchB,GADgB,IAACA,CAmfiC,EAC1DA,QAASe,KAGXtwB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,oBACZzf,KAAK,OACLsN,MAAOmlB,GAAIzyB,KACXoH,SAAU0sB,GACVrsB,gBAAgB,mBAChB3G,GAAG,UACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOmlB,GAAIT,SACX5qB,SAAU0sB,GACVrsB,gBAAgB,4BAChB3G,GAAG,gBACH4G,UAAQ,QAKZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOmlB,GAAIR,SACX7qB,SAAU0sB,GACVrsB,gBAAgB,4BAChB3G,GAAG,gBACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,aAAW,yBACX5yB,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtDK,GAAG,UACHd,KAAK,OACLsN,MAAOmlB,GAAIpP,KACXjc,SAAU0sB,GACVrsB,gBAAgB,mBAChBC,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,2BACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,WAAU9O,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,QAClBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,cAItB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,4BAEV5I,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACTE,SAAO,EACPx2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAG,eACHd,KAAK,SACL4wB,QAAS6B,GAAIN,OACb/qB,SAAU0sB,GACV5J,MAAM,0BAIV7oB,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CAAA9H,SAAA,EACJJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,iBAGDJ,EAAAA,EAAAA,KAACw2B,EAAAA,GAAa,CACZv2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAG,cACH8d,KAAM,EACN5e,KAAK,cACLsN,MAAOmlB,GAAIP,YACX9qB,SAAU0sB,GACVrU,YAAY,0BAIhBrhB,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,mBACHzC,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDypB,MAAM,WACN9iB,SAAU,SAACC,GAAC,OA/mBkBupB,EA+mBgBvpB,EAAEC,OAAOspB,aA9mB7DkB,EAAmBlB,GADgB,IAACA,CA+mBiC,EAC/DA,QAASiB,KAGXxwB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDmG,KAAK,OACL6Y,YAAY,oBACZzf,KAAK,OACLsN,MAAOqlB,GAAS3yB,KAChBoH,SAAU4sB,GACVvsB,gBAAgB,mBAChB3G,GAAG,eACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOqlB,GAASX,SAChB5qB,SAAU4sB,GACVvsB,gBAAgB,4BAChB3G,GAAG,cACH4G,UAAQ,QAKZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,gBAAexI,SACxB,UAGDJ,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDgf,YAAY,sBACZzf,KAAK,WACLsN,MAAOqlB,GAASV,SAChB7qB,SAAU4sB,GACVvsB,gBAAgB,4BAChB3G,GAAG,cACH4G,UAAQ,QAIZrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,WAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,aAAW,yBACXnwB,GAAG,eACHd,KAAK,OACL3B,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD6M,MAAOqlB,GAAStP,KAChBjc,SAAU4sB,GACVvsB,gBAAgB,mBAChBC,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,2BACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,WAAU9O,SAAC,cACzBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,QAClBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAM,IAAG9O,SAAC,cAItB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,SAAA,EACbJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,4BAEV5I,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACTE,SAAO,EACPx2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAG,oBACHd,KAAK,SACL4wB,QAAS+B,GAASR,OAClB/qB,SAAU4sB,GACV9J,MAAM,0BAIV7oB,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CAAA9H,SAAA,EACJJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,iBAAgBxI,SACzB,iBAGDJ,EAAAA,EAAAA,KAACw2B,EAAAA,GAAa,CACZv2B,UAAS,iBAAA0C,OAAmBN,GAAW,aAAe,IACtDK,GAAG,mBACH8d,KAAM,EACN5e,KAAK,cACLsN,MAAOqlB,GAAST,YAChB9qB,SAAU4sB,GACVvU,YAAY,yBAId5a,EAME,MALFzG,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,UACbJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAChE,QAAQ,UAAUQ,QAASowB,GAAah2B,SAAC,YAOtDJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAG,OAAMnJ,UACbJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SAAC,oBAOjD,C,yPCv/Bas2B,EAAyB,eAAAnyB,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,yCAEvC,KAAD,EAFW,OAEXhB,EAAAE,EAAAK,KAFO3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAGL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBANqC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAQzBmgB,EAAkB,eAAAlgB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOd,GAAO,IAAAe,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACQ,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,8BAExCN,GACA,KAAD,EAHW,OAGXe,EAAAC,EAAAR,KAHO3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SAIL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAP8BH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAQlBogB,EAAmB,eAAA7f,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,mCAEzCtC,EAAQ3H,SACR,KAAD,EAHW,OAGXgJ,EAAAC,EAAAd,KAHO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAIL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAR+BG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KASnBqgB,EAAqB,eAAAzf,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACK,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,2CAADzW,OACEiT,EAAQoI,OAAM,kBAAArb,OAAiBiT,EAAQhG,eAClF,KAAD,EAFW,OAEX0H,EAAAC,EAAAnB,KAFO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAGL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBANiCO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,KAOrBsgB,EAAwB,eAAAtf,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,IAAA,IAAAC,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACgB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4CAEvC,KAAD,EAFW,OAEXa,EAAAC,EAAAvB,KAFO3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SAGL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,kBANoC,OAAAD,EAAA9E,MAAA,KAAA8D,UAAA,KAOxBugB,EAA2B,eAAAjf,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOrV,GAAE,IAAAsV,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OACVD,EAAE,yBAC9B,KAAD,EAFW,OAEXsV,EAAAC,EAAA7B,KAFO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAGL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBANuCK,GAAA,OAAAN,EAAApF,MAAA,KAAA8D,UAAA,KAc3BwgB,EAA2B,eAAAte,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAOjW,GAAE,IAAAkW,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OACI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OACVD,EAAE,yBAC9B,KAAD,EAFW,OAEXkW,EAAAC,EAAAzC,KAFO3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SAGL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBANuCG,GAAA,OAAAJ,EAAAhG,MAAA,KAAA8D,UAAA,KAQ3BygB,EAA4B,eAAAje,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOvW,GAAE,IAAAwW,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUqY,EAAAlD,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,0BAC1B,KAAD,EAFW,OAEXwW,EAAAC,EAAA/C,KAFO3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SAGL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBANwCI,GAAA,OAAAL,EAAAtG,MAAA,KAAA8D,UAAA,KAO5B0gB,EAA4B,eAAA3d,GAAA/D,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA8D,EAAO9W,GAAE,IAAA+W,EAAAhT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA4D,GAAA,cAAAA,EAAA1D,KAAA0D,EAAAzD,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU4Y,EAAAzD,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,0BAC1B,KAAD,EAFW,OAEX+W,EAAAC,EAAAtD,KAFO3P,EAAIgT,EAAJhT,KAAIiT,EAAArD,OAAA,SAGL5P,GAAI,wBAAAiT,EAAApD,OAAA,GAAAkD,EAAA,KACZ,gBANwCG,GAAA,OAAAJ,EAAA7G,MAAA,KAAA8D,UAAA,KAO5B2gB,EAA4B,eAAAtd,GAAArE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAoE,EAAOpX,GAAE,IAAAqX,EAAAtT,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAkE,GAAA,cAAAA,EAAAhE,KAAAgE,EAAA/D,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUkZ,EAAA/D,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,0BAC1B,KAAD,EAFW,OAEXqX,EAAAC,EAAA5D,KAFO3P,EAAIsT,EAAJtT,KAAIuT,EAAA3D,OAAA,SAGL5P,GAAI,wBAAAuT,EAAA1D,OAAA,GAAAwD,EAAA,KACZ,gBANwCG,GAAA,OAAAJ,EAAAnH,MAAA,KAAA8D,UAAA,K,2ECuRzC,EAvU2B,SAAHjS,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC7CC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGRC,IAFiBrB,EAAAA,EAAAA,OAEiByB,EAAAA,EAAAA,WAAS,IAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GACdwD,GAAc5D,EAAAA,EAAAA,aAAY6D,EAAAA,IAAlC3D,OACRI,GAA8CH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAjD+D,EAAe9D,EAAA,GAAE+D,EAAkB/D,EAAA,GAC1CE,GAAgCN,EAAAA,EAAAA,UAAS,CACvCa,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,YAAa,GACb4H,aAAc,GACdwnB,UAAU,IACV5vB,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GARKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAS5BG,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,GAAY,iBAAO,CACjBE,UAAWnB,EAAK4wB,MAAMzvB,UACtBC,SAAUpB,EAAK4wB,MAAMxvB,SACrBC,MAAOrB,EAAK4wB,MAAMvvB,MAClBC,QAAStB,EAAK4wB,MAAMtvB,QACpBC,YAAavB,EAAK4wB,MAAMrvB,YACxB4H,aAAcnJ,EAAKmJ,aACnBwnB,UAAU,EACVpZ,OAAQvX,EAAKuX,OACd,GAEL,GAAG,CAACvX,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QACrB6C,EAAuB,iBAATzzB,EAA0BoxB,SAAS9jB,EAAO,IAAMA,EAEpExH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,IAE5C,GAqBA1tB,EAAAA,EAAAA,YAAU,WAPR6C,EAAU,GAAI,CACZqB,UAAW,SAACpF,GACVyE,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GAAW,GAKzB,GAAG,IACH,IAiBA5J,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAxBiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAtEcjsB,EAAS,CAAE8B,KAAM,gBAwEtChC,EAAYiB,GACZyF,QAAQC,IAAI1F,GACZlB,IAEJ,EAQ2BnG,SAAA,EAEvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,6BAA4BxI,SACrC,2BAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,eACL,mBAAiB,6BACjByH,gBAAgB,kCAChB3G,GAAG,uBACHwM,MAAOzH,EAASmI,aAChB5G,SAAUspB,EACVryB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtDiH,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,sBACQ,OAAf6K,QAAe,IAAfA,OAAe,EAAfA,EAAiB7H,KAAI,SAACkM,GACrB,OACEtP,EAAAA,EAAAA,KAAA,UAAgCkP,MAAOI,EAAKM,aAAaxP,SACtDkP,EAAKO,gBADKP,EAAKM,aAItB,WAIJ3M,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sBAAqBxI,SAC9B,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAIhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAASG,UAChBoB,SAAUspB,EACVjpB,gBAAgB,yBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,eAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,WACLsN,MAAOzH,EAASI,SAChBmB,SAAUspB,EACVjpB,gBAAgB,wBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,kBAAiBxI,SAC1B,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMoxB,EAAAA,EAAe3oB,IAAI,aAElC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,QACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SAhJgB,SAACC,GACzB,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAMgqB,EAAOiD,EAAPjD,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,KAE1C,IAAMqoB,EAAatuB,EAAEC,OAAOgG,MAEtBsoB,EADa,kDACQlC,KAAKiC,GAEhC7F,EAAa8F,EACf,EAsIU,mBAAiB,4BACjBnuB,gBAAgB,qBAChB3G,GAAG,kBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,0BAAyBxI,SAClC,aAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMuxB,EAAAA,EAAgB9oB,IAAI,eAEnC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,UACLsN,MAAOzH,EAASM,QAChBiB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,8BAA6BxI,SACtC,oBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwxB,EAAAA,EAAU/oB,IAAI,qBAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,cACLsN,MAAOzH,EAASO,YAChBgB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,6BAChB3G,GAAG,qBACH4G,UAAQ,WAyCdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,cAGDJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,mBACHopB,MAAM,IACN0G,QAAS/qB,EAAS2vB,SAClBpuB,SAAU,SAACC,GACTvB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI3B,GAAQ,IAAE2vB,SAAUnuB,EAAEC,OAAOspB,UAChD,QAIJxyB,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SAEZqG,EAAO,yBAA2B,8BAK7C,E,WC/SMkxB,EAAU,CACd,CAAE7mB,IAAK,kBAAmBgb,MAAO,QACjC,CAAEhb,IAAK,6BAA8Bgb,MAAO,cAC5C,CAAEhb,IAAK,cAAegb,MAAO,iBAC7B,CAAEhb,IAAK,gBAAiBgb,MAAO,WAC/B,CAAEhb,IAAK,oBAAqBgb,MAAO,gBAigBrC,EA/fwB,WACtB,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACQkxB,GAAuBhxB,EAAAA,EAAAA,aAAY+vB,GAA3C7vB,OACQ+wB,GAAwBjxB,EAAAA,EAAAA,aAAYgwB,GAA5C9vB,OACFkD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3DrG,GAA8DC,EAAAA,EAAAA,KAAtDuxB,EAAYxxB,EAAZwxB,aAERhtB,GAFqCxE,EAAf8I,gBAAmC9I,EAAlB+I,oBACTtE,EAAAA,EAAAA,aAAY6D,EAAAA,IAAlC3D,QAC8CC,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA3DmxB,EAAmB9wB,EAAA,GAAE+wB,EAAsB/wB,EAAA,GAClCgxB,GAAoBpxB,EAAAA,EAAAA,aAAY8vB,GAAxC5vB,OACQmxB,GAAmBrxB,EAAAA,EAAAA,aAAYkwB,GAAvChwB,OACRI,GAAsCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA9CuG,EAAWtG,EAAA,GAAEuG,EAAcvG,EAAA,GAC5B+wB,GAA4BtxB,EAAAA,EAAAA,aAAYiwB,GAC9CxvB,GAAgCN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAnC8Q,EAAQ3Q,EAAA,GAAE2wB,EAAW3wB,EAAA,GAC5B+Z,GAAkCxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAA1C6W,EAAS5W,EAAA,GAAE6W,EAAY7W,EAAA,GAC9BE,GAA0C3a,EAAAA,EAAAA,WAAS,GAAK4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAjD4W,EAAa3W,EAAA,GACpB4J,IADsC5J,EAAA,IACE5a,EAAAA,EAAAA,UAAS,gBAAcykB,IAAAvkB,EAAAA,EAAAA,GAAAskB,GAAA,GAA1CgN,IAAF/M,GAAA,GAAiBA,GAAA,IAC9BnmB,IAAWC,EAAAA,EAAAA,MACXZ,GAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,IAAyB9D,EAAAA,EAAAA,IAC7B2D,GACAI,EAAAA,GACAC,EAAAA,IAEIC,IAAqBjE,EAAAA,EAAAA,IACzB2D,GACAO,EAAAA,GACAF,EAAAA,IAEI2F,IAAuB3J,EAAAA,EAAAA,IAC3B2D,GACAQ,EAAAA,GACAH,EAAAA,IAUIwB,KARmBxF,EAAAA,EAAAA,IACvB2D,GACAS,EAAAA,GACAJ,EAAAA,IAKiB,WACjB2I,GAAe,EACjB,GASA,SAAS8qB,KACPR,EAAgB,GAAI,CAClBnsB,UAAW,SAACpF,GACVsxB,EAAuBtxB,EAAKA,MAC5BwD,GACF,EACA6B,QAAS,SAACC,GAAW,GAEzB,CAUA,IAAgB0sB,IAA2B7xB,EAAAA,EAAAA,aACzCqwB,GADMnwB,OAGR,SAAS4xB,GAAyB9sB,GAChC6sB,GAAuB7sB,EAAY,CACjCC,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgB0uB,IAA2B/xB,EAAAA,EAAAA,aACzCswB,GADMpwB,OAGR,SAAS8xB,GAAyBhtB,GAChC+sB,GAAuB/sB,EAAY,CACjCC,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgB4uB,IAA2BjyB,EAAAA,EAAAA,aACzCuwB,GADMrwB,OAGR,SAASgyB,GAAyBltB,GAChCitB,GAAuBjtB,EAAY,CACjCC,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgB8uB,IAA0BnyB,EAAAA,EAAAA,aACxCmwB,GADMjwB,OAcR,IAAgBkyB,IAA0BpyB,EAAAA,EAAAA,aACxCmwB,GADMjwB,OAcR,IAAgBmyB,IAA0BryB,EAAAA,EAAAA,aACxCowB,GADMlwB,OAqDR,SAASN,GAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFR,EAAmB3pB,EAAS,CAC1BpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,wCACV,IAEDyqB,IACF,EACA1sB,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,IAGFo3B,EACE,CAAE5pB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,uCACV,IAEDyqB,IACF,EACA1sB,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,GAAS,WAEX4E,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACxBhG,MAAO,UACR,GACH,GAIR,GAAG,EACL,CACA,IAAMkxB,GAAiB9wB,aAAaC,QAAQ,kBACtCqxB,GAAatxB,aAAaC,QAAQ,cAClCksB,GAAensB,aAAaC,QAAQ,iBAuG1C6G,EAAAA,EAAAA,YAAU,WAGJ9C,QAGoB0I,IAAnBokB,IACoB,OAAnBA,IACmB,wBAAnBA,SACcpkB,IAAf4kB,IACgB,OAAfA,IACe,oBAAfA,SACgB5kB,IAAjByf,IACkB,OAAjBA,IACiB,sBAAjBA,IAIO2E,IAAmBQ,IAAenF,GAI3C2E,IACe,oBAAfQ,KACCnF,GAGD0L,GAAyBvG,IAEzBR,IACe,oBAAfQ,KACCnF,GAGD4L,GAAyBjH,IAEzBA,IACAQ,IACiB,sBAAjBnF,GAGA0L,GAAyBvG,IAEzBR,IACAQ,IACiB,sBAAjBnF,IAGA8L,GAAyB9L,IA5BzB4L,GAAyBjH,IAHzB6G,KAiCOxzB,GAEJmtB,IAA6B,oBAAfA,GAGPnF,IAAiC,sBAAjBA,GAGA,sBAAjBA,IAET8L,GAAyB9L,IAHzB0L,GAAyBvG,IAHzBqG,KAQO9tB,KAEJsiB,IAAiC,sBAAjBA,GAGO,sBAAjBA,IAET8L,GAAyB9L,IAHzBwL,KAMN,GAAG,CAAC7G,GAAgBQ,GAAYnF,KAEhC,IAAAliB,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,uBAAyB,wBAC5CrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACk5B,EAAkB,CACjB3yB,WAAYA,GACZC,YAAaA,MAGfxG,EAAAA,EAAAA,KAACk5B,EAAkB,CACjB3yB,WAAYA,GACZC,YAAaA,GACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,MAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,GAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAMpC,UAAU,OAAMG,SAAC,yBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,EAAGzI,UAAU,YAAWG,UAChC6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,aACX82B,aAAa,SACbnwB,SAxNa,SAACC,GACxB,IAAMmwB,EAAgBnwB,EAAEC,OAAOgG,MAE/BqpB,GAAgBa,GAEM,WAAlBA,OAEoB7rB,IAAnBokB,IACoB,OAAnBA,IACmB,wBAAnBA,SACcpkB,IAAf4kB,IACgB,OAAfA,IACe,oBAAfA,SACgB5kB,IAAjByf,IACkB,OAAjBA,IACiB,sBAAjBA,IAIO2E,IAAmBQ,IAAenF,GAGlC2E,IAAkBQ,KAAenF,GAE1C0L,GAAyBvG,IAChBR,IAAkBQ,IAAcnF,IAEzC8L,GAAyB9L,IANzB4L,GAAyBjH,IAHzB6G,KAWyB,UAAlBY,SAEa7rB,IAAnBokB,IACoB,OAAnBA,IACmB,wBAAnBA,SACcpkB,IAAf4kB,IACgB,OAAfA,IACe,oBAAfA,SACgB5kB,IAAjByf,IACkB,OAAjBA,IACiB,sBAAjBA,IAIO2E,IAAmBQ,IAAenF,GAGlC2E,IAAkBQ,KAAenF,GA3LhD,SAAiCphB,GAC/BmtB,GAAsBntB,EAAY,CAChCC,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAmLMovB,CAAwBlH,IACfR,IAAkBQ,IAAcnF,IAlK/C,SAAiCphB,GAC/BqtB,GAAsBrtB,EAAY,CAChCC,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CA0JMqvB,CAAwBtM,IAjL5BgM,GA2K4BrH,GA3KM,CAChC9lB,UAAW,SAACpF,GACVwD,IACA8tB,EAAuBtxB,EAAKA,KAC9B,EACAqF,QAAS,SAACC,GACR9B,GACF,IA3EFguB,EAAe,GAAI,CACjBpsB,UAAW,SAACpF,GACVsxB,EAAuBtxB,EAAKA,MAC5BwD,GACF,EACA6B,QAAS,SAACC,GAAW,IAmPzB,EAmKY3L,SAAA,EAEAJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,iBACRJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,YACRJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gBAGZJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,8BAKJ03B,GACC93B,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAMqxB,EACN0B,cAtTY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAmTU+rB,aArVgB,SAACzM,GACzBhjB,IACAkuB,EAA0BpxB,OAAOkmB,EAAc,CAC7CnhB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,wCACV,IAEwC,OAAvClN,aAAaC,QAAQ,oBACkByM,IAAvC1M,aAAaC,QAAQ,cAErB03B,KAEAE,GAAyB73B,aAAaC,QAAQ,eAEhDmJ,GACF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC9B,IACD9B,GACF,IAEFA,GACF,EAyTUquB,cAAeA,KAGjBt4B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,iQCzLA,EAjVuB,SAAH+B,GAA2C,IAADm1B,EAApCnzB,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KACzCC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGMizB,IAFGr0B,EAAAA,EAAAA,OAEY6V,EAAAA,EAAAA,MAArB1U,MACRE,GAAkCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GAC9BE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAC1CG,GADeF,EAAA,GAAaA,EAAA,IACIJ,EAAAA,EAAAA,UAAS,CACvCa,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,YAAa,GACbwT,SAAU,EACV4b,UAAU,KACV5vB,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GARKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAS5BG,EAAAA,EAAAA,YAAU,WACJlB,GAEFiB,GAAY,iBAAO,CACjBE,UAAWnB,EAAK4wB,MAAMzvB,UACtBC,SAAUpB,EAAK4wB,MAAMxvB,SACrBC,MAAOrB,EAAK4wB,MAAMvvB,MAClBC,QAAStB,EAAK4wB,MAAMtvB,QACpBC,YAAavB,EAAK4wB,MAAMrvB,YACxBwT,SAAU/U,EAAK4wB,MAAM7b,SACrB4b,UAAU,EACVpZ,OAAQvX,EAAKuX,OACd,GAEL,GAAG,CAACvX,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QACvB6C,EAAcnmB,EAEL,aAATtN,IAEFyzB,EAAcrC,SAAS9jB,EAAO,KAAO,GAGvCxH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,IAE5C,EA+BAlzB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAxBiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAjEcjsB,EAAS,CAAE8B,KAAM,gBAmEtChC,EAAYiB,GACZyF,QAAQC,IAAI1F,GACZlB,IAEJ,EAQ2BnG,SAAA,EAEvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,4BAA2BxI,SACpC,0BAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV5yB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBT,KAAK,WACLsN,MAAOzH,EAAS+T,SAChBnS,gBAAgB,yCAChB3G,GAAG,4BACHsG,SAAUspB,EACVhpB,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,qBACG,OAAVu5B,QAAU,IAAVA,GAAgB,QAAND,EAAVC,EAAYlzB,YAAI,IAAAizB,OAAN,EAAVA,EAAkBt2B,KAAI,SAACkM,GACtB,OACEtP,EAAAA,EAAAA,KAAA,UAA4BkP,MAAOI,EAAKkM,SAASpb,SAC9CkP,EAAK2T,YADK3T,EAAKkM,SAItB,WAIJvY,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sBAAqBxI,SAC9B,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAIhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAASG,UAChBoB,SAAUspB,EACVjpB,gBAAgB,yBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,eAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,WACLsN,MAAOzH,EAASI,SAChBmB,SAAUspB,EACVjpB,gBAAgB,wBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,kBAAiBxI,SAC1B,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMoxB,EAAAA,EAAe3oB,IAAI,aAElC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,QACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SArIgB,SAACC,GACzB,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAMgqB,EAAOiD,EAAPjD,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,KAE1C,IAAMqoB,EAAatuB,EAAEC,OAAOgG,MAEtBsoB,EADa,kDACQlC,KAAKiC,GAEhC7F,EAAa8F,EACf,EA2HU,mBAAiB,4BACjBnuB,gBAAgB,qBAChB3G,GAAG,kBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,0BAAyBxI,SAClC,aAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMuxB,EAAAA,EAAgB9oB,IAAI,eAEnC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,UACLsN,MAAOzH,EAASM,QAChBiB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,8BAA6BxI,SACtC,oBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwxB,EAAAA,EAAU/oB,IAAI,mBAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,cACLsN,MAAOzH,EAASO,YAChBgB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,6BAChB3G,GAAG,qBACH4G,UAAQ,WAyEdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SAEZqG,EAAO,qBAAuB,0BAKzC,E,4CCvVamzB,EAAqB,eAAAr1B,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACmB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,qCAAqC,KAAD,EAAjE,OAAiEhB,EAAAE,EAAAK,KAArE3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBAJiC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAMrBqjB,EAAc,eAAApjB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOd,GAAO,IAAAe,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACY,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,0BAA2BN,GAAS,KAAD,EAAjE,OAAiEe,EAAAC,EAAAR,KAArE3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ0BH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAKdsjB,EAAe,eAAA/iB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEW,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,+BAEzCtC,EAAQ3H,SACR,KAAD,EAHW,OAGXgJ,EAAAC,EAAAd,KAHO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAIL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAR2BG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KASfujB,EAAiB,eAAA3iB,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACS,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,uCAADzW,OACFiT,EAAQoI,OAAM,cAAArb,OAAaiT,EAAQ4F,WAC1E,KAAD,EAFW,OAEXlE,EAAAC,EAAAnB,KAFO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAGL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAN6BO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,KAQjBwjB,EAAoB,eAAAxiB,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,IAAA,IAAAC,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACoB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wCAEvC,KAAD,EAFW,OAEXa,EAAAC,EAAAvB,KAFO3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SAGL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,kBANgC,OAAAD,EAAA9E,MAAA,KAAA8D,UAAA,KAOpByjB,EAAuB,eAAAniB,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOrV,GAAE,IAAAsV,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACQ,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OACVD,EAAE,qBAC9B,KAAD,EAFW,OAEXsV,EAAAC,EAAA7B,KAFO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAGL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBANmCK,GAAA,OAAAN,EAAApF,MAAA,KAAA8D,UAAA,KAQvB0jB,EAAwB,eAAA7hB,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,EAAO5V,GAAE,IAAA6V,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU0X,EAAAvC,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,sBAC1B,KAAD,EAFW,OAEX6V,EAAAC,EAAApC,KAFO3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SAGL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,gBANoCG,GAAA,OAAAJ,EAAA3F,MAAA,KAAA8D,UAAA,KAOxB2jB,EAAwB,eAAAzhB,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAOjW,GAAE,IAAAkW,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,sBAC1B,KAAD,EAFW,OAEXkW,EAAAC,EAAAzC,KAFO3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SAGL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBANoCG,GAAA,OAAAJ,EAAAhG,MAAA,KAAA8D,UAAA,KAOxB4jB,EAAwB,eAAAphB,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOvW,GAAE,IAAAwW,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUqY,EAAAlD,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,sBAC1B,KAAD,EAFW,OAEXwW,EAAAC,EAAA/C,KAFO3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SAGL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBANoCI,GAAA,OAAAL,EAAAtG,MAAA,KAAA8D,UAAA,K,sBCvB/BmhB,EAAU,CACd,CAAE7mB,IAAK,kBAAmBgb,MAAO,QACjC,CAAEhb,IAAK,cAAegb,MAAO,SAC7B,CAAEhb,IAAK,oBAAqBgb,MAAO,kBACnC,CAAEhb,IAAK,gBAAiBgb,MAAO,WAC/B,CAAEhb,IAAK,qBAAsBgb,MAAO,WAyftC,EAvfqB,WACnB,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFirB,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,cAClCksB,EAAensB,aAAaC,QAAQ,gBACpCkJ,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3DrG,GAAsDC,EAAAA,EAAAA,KAA9CuxB,EAAYxxB,EAAZwxB,aAAcvoB,EAAWjJ,EAAXiJ,YACtBzE,GADiDxE,EAAdgJ,gBACGpE,EAAAA,EAAAA,WAAS,IAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCiR,EAAQhR,EAAA,GAAEgxB,EAAWhxB,EAAA,GAC5BE,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GACxBnC,GAAWC,EAAAA,EAAAA,MACjBic,GAA8Cxa,EAAAA,EAAAA,UAAS,IAAGya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAnD8Y,EAAe7Y,EAAA,GAAE8Y,EAAkB9Y,EAAA,GAC1B+Y,GAAgB3zB,EAAAA,EAAAA,aAAYgzB,GAApC9yB,OAEQ0zB,IADe5zB,EAAAA,EAAAA,aAAYozB,GAAnClzB,QAC2BF,EAAAA,EAAAA,aAAYizB,GAAvC/yB,QACQ2zB,GAAoB7zB,EAAAA,EAAAA,aAAYkzB,GAAxChzB,OACF4zB,GAAwB9zB,EAAAA,EAAAA,aAAYmzB,GAC1CrY,IAA0C3a,EAAAA,EAAAA,WAAS,GAAK4a,IAAA1a,EAAAA,EAAAA,GAAAya,GAAA,GAAjDiZ,GAAahZ,GAAA,GACpB4J,IADsC5J,GAAA,IACE5a,EAAAA,EAAAA,UAAS,gBAAcykB,IAAAvkB,EAAAA,EAAAA,GAAAskB,GAAA,GACzD7mB,IADa8mB,GAAA,GAAiBA,GAAA,GACZ7mB,KAAKC,MAAM/D,aAAaC,QAAQ,iBAClD+D,IAAyB9D,EAAAA,EAAAA,IAC7B2D,GACAI,EAAAA,GACAC,EAAAA,IAEIC,IAAqBjE,EAAAA,EAAAA,IACzB2D,GACAO,EAAAA,GACAF,EAAAA,IAEI2F,IAAuB3J,EAAAA,EAAAA,IAC3B2D,GACAQ,EAAAA,GACAH,EAAAA,IAEI4F,IAAmB5J,EAAAA,EAAAA,IACvB2D,GACAS,EAAAA,GACAJ,EAAAA,IAKIwB,GAAa,WACjBmH,GAAe,EACjB,GACmC9G,EAAAA,EAAAA,aAAYqF,EAAAA,IAAvCnF,OAuDR,SAAS8zB,KACPL,EAAY,GAAI,CACd1uB,UAAW,SAACpF,GACV6zB,EAAmB7zB,EAAKA,MACxBwD,GACF,EACA6B,QAAS,SAACC,GAAW,GAEzB,CAUA,IAAgB8uB,IAAuBj0B,EAAAA,EAAAA,aAAYszB,GAA3CpzB,OACR,SAASg0B,GAAqBlvB,GAC5BivB,GAAmBjvB,EAAY,CAC7BC,UAAW,SAACpF,GACVwD,IACAqwB,EAAmB7zB,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgB8wB,IAAuBn0B,EAAAA,EAAAA,aAAYuzB,GAA3CrzB,OACR,SAASk0B,GAAqBpvB,GAC5BmvB,GAAmBnvB,EAAY,CAC7BC,UAAW,SAACpF,GACVwD,IACAqwB,EAAmB7zB,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgBgxB,IAAuBr0B,EAAAA,EAAAA,aAAYwzB,GAA3CtzB,OACR,SAASo0B,GAAqBtvB,GAC5BqvB,GAAmBrvB,EAAY,CAC7BC,UAAW,SAACpF,GACVwD,IACAqwB,EAAmB7zB,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,EACsCrD,EAAAA,EAAAA,aAAYqzB,GAA1CnzB,OAkHR,SAASN,GAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EAEFoC,EAAevsB,EAAS,CACtBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,oCACV,SAGqBR,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAKF2E,QACgBpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,EAKF2E,GACAQ,SACkB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAGFkO,GAAqB/I,GACZR,GAAkBQ,GAAcnF,GAEzC8N,GAAqB9N,GAZrBgO,GAAqBrJ,GAXrBiJ,IAyBJ,EACA9uB,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,IAGFg6B,EACE,CAAExsB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,mCACV,SAGqBR,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAKF2E,QACgBpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,EAKF2E,GACAQ,SACkB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAGFkO,GAAqB/I,GACZR,GAAkBQ,GAAcnF,GAEzC8N,GAAqB9N,GAZrBgO,GAAqBrJ,GAXrBiJ,IAyBJ,EACA9uB,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,EAhOAkH,EAAAA,EAAAA,YAAU,WAEJ9C,QAGoB0I,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAKF2E,QACgBpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,QACgB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,EAKF2E,GACAQ,SACkB5kB,IAAjByf,GACkB,OAAjBA,GACiB,sBAAjBA,GAGFkO,GAAqB/I,GACZR,GAAkBQ,GAAcnF,GAEzC8N,GAAqB9N,GAZrBgO,GAAqBrJ,GAXrBiJ,KAyBO51B,GAGLmtB,GAA6B,oBAAfA,GACdnF,GAAiC,sBAAjBA,EAKlBA,GACAmF,GACiB,sBAAjBnF,EAGA8N,GAAqB9N,IAErBA,GACAmF,GACgB,qBAAhBnF,GAISmF,IADT+I,GAAqB/I,GAdrByI,KAoBOlwB,GAGJsiB,GAAiC,sBAAjBA,EAKnB8N,GAAqB9N,GAHrB4N,KAKOjwB,IAETiwB,IAEJ,GAAG,CACD/1B,GACAG,GACA0F,GACAC,GACAgnB,EACAQ,EACAnF,IAiKF,IAAAliB,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,sBAAwB,uBAC3CrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACm7B,EAAc,CAAC50B,WAAYA,GAAYC,YAAaA,MAErDxG,EAAAA,EAAAA,KAACm7B,EAAc,CACb50B,WAAYA,GACZC,YAAaA,GACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,MAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,GAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,uBAkBhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,6BAKJgL,GACCpL,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAM4zB,EACNZ,aA3aY,SAAC7H,GAErB5nB,IACA0wB,EAAsB5zB,OAAO8qB,EAAU,CACrC/lB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,oCACV,IAG0C,OAAzClN,aAAaC,QAAQ,sBACoByM,IAAzC1M,aAAaC,QAAQ,gBAErB85B,KAEAA,GAAkB/5B,aAAaC,QAAQ,iBAEzCmJ,GACF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC9B,IACD9B,GACF,IAEFA,GACF,EA6YUuvB,cA5YY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAyYUitB,cAAeA,MAGjB36B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,wNC9hBa44B,EAAyB,eAAA72B,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAE,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uCAEvC,KAAD,EAFW,OAEXhB,EAAAE,EAAAK,KAFO3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAGL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,kBANqC,OAAApR,EAAAmO,MAAA,KAAA8D,UAAA,KAOzB6kB,EAA4B,eAAA5kB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,wBAC1B,KAAD,EAFW,OAEXiU,EAAAC,EAAAR,KAFO3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SAGL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBANwCH,GAAA,OAAAE,EAAA/D,MAAA,KAAA8D,UAAA,KAO5B8kB,EAA4B,eAAAvkB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OACG,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,wBAADlU,OACdD,EAAE,wBAC1B,KAAD,EAFW,OAEXuU,EAAAC,EAAAd,KAFO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAGL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBANwCG,GAAA,OAAAJ,EAAArE,MAAA,KAAA8D,UAAA,KAQ5B+kB,EAAgB,eAAAnkB,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OACU,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,4BAExCN,GACA,KAAD,EAHW,OAGX0B,EAAAC,EAAAnB,KAHO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAIL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBAP4BO,GAAA,OAAAR,EAAA1E,MAAA,KAAA8D,UAAA,KAShBglB,EAAiB,eAAAhkB,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO7B,GAAO,IAAA8B,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OAES,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,iCAEzCtC,EAAQ3H,SACR,KAAD,EAHW,OAGXyJ,EAAAC,EAAAvB,KAHO3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SAIL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAR6BW,GAAA,OAAAZ,EAAA9E,MAAA,KAAA8D,UAAA,KAUjBilB,EAAmB,eAAA3jB,GAAAtC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAqC,EAAOnC,GAAO,IAAAoC,EAAAvR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAmC,GAAA,cAAAA,EAAAjC,KAAAiC,EAAAhC,MAAA,OACO,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUmX,EAAAhC,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,yCAADzW,OACAiT,EAAQoI,OAAM,gBAAArb,OAAeiT,EAAQlG,aAC9E,KAAD,EAFW,OAEXsI,EAAAC,EAAA7B,KAFO3P,EAAIuR,EAAJvR,KAAIwR,EAAA5B,OAAA,SAGL5P,GAAI,wBAAAwR,EAAA3B,OAAA,GAAAyB,EAAA,KACZ,gBAN+BU,GAAA,OAAAX,EAAApF,MAAA,KAAA8D,UAAA,KAQnBklB,EAAwB,eAAArjB,GAAA7C,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA4C,IAAA,IAAAC,EAAA9R,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACgB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU0X,EAAAvC,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,0CAEvC,KAAD,EAFW,OAEX0B,EAAAC,EAAApC,KAFO3P,EAAI8R,EAAJ9R,KAAI+R,EAAAnC,OAAA,SAGL5P,GAAI,wBAAA+R,EAAAlC,OAAA,GAAAgC,EAAA,KACZ,kBANoC,OAAAD,EAAA3F,MAAA,KAAA8D,UAAA,KAQxBmlB,EAA2B,eAAAjjB,GAAAlD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAiD,EAAOjW,GAAE,IAAAkW,EAAAnS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OACI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU+X,EAAA5C,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OACVD,EAAE,uBAC9B,KAAD,EAFW,OAEXkW,EAAAC,EAAAzC,KAFO3P,EAAImS,EAAJnS,KAAIoS,EAAAxC,OAAA,SAGL5P,GAAI,wBAAAoS,EAAAvC,OAAA,GAAAqC,EAAA,KACZ,gBANuCG,GAAA,OAAAJ,EAAAhG,MAAA,KAAA8D,UAAA,KAO3BolB,EAA2B,eAAA5iB,GAAAxD,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAuD,EAAOvW,GAAE,IAAAwW,EAAAzS,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUqY,EAAAlD,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OACVD,EAAE,uBAC9B,KAAD,EAFW,OAEXwW,EAAAC,EAAA/C,KAFO3P,EAAIyS,EAAJzS,KAAI0S,EAAA9C,OAAA,SAGL5P,GAAI,wBAAA0S,EAAA7C,OAAA,GAAA2C,EAAA,KACZ,gBANuCI,GAAA,OAAAL,EAAAtG,MAAA,KAAA8D,UAAA,K,iGCqQxC,EA1SyB,SAAHjS,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC3CC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGRC,IAFiBrB,EAAAA,EAAAA,OAEuByB,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA7CoE,EAAY/D,EAAA,GAAEgE,EAAehE,EAAA,GACpBsD,GAAa1D,EAAAA,EAAAA,aAAY2D,EAAAA,IAAjCzD,OACRI,GAAkCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1CE,EAASD,EAAA,GAAEuqB,EAAYvqB,EAAA,GAC9BE,GAAgCN,EAAAA,EAAAA,UAAS,CACvCa,UAAW,GACXC,SAAU,GACVC,MAAO,GACPC,QAAS,GACTC,YAAa,GACb0H,WAAY,GACZ0nB,UAAU,IACV5vB,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GARKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAS5BG,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,GAAY,iBAAO,CACjBE,UAAWnB,EAAK4wB,MAAMzvB,UACtBC,SAAUpB,EAAK4wB,MAAMxvB,SACrBC,MAAOrB,EAAK4wB,MAAMvvB,MAClBC,QAAStB,EAAK4wB,MAAMtvB,QACpBC,YAAavB,EAAK4wB,MAAMrvB,YACxB0H,WAAYjJ,EAAKiJ,WACjB0nB,UAAU,EACVpZ,OAAQvX,EAAKuX,OACd,GAEL,GAAG,CAACvX,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QACvB6C,EAAcnmB,EAEL,eAATtN,IAEFyzB,EAAcrC,SAAS9jB,EAAO,KAAO,GAGvCxH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,IAE5C,EAyCA,IAAAlzB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAIlB,OAHAqF,EAAAA,EAAAA,YAAU,WARR2C,EAAS,GAAI,CACXuB,UAAW,SAACpF,GACVuE,EAAgBvE,EAAKA,KACvB,EACAqF,QAAS,SAACC,GAAW,GAMzB,GAAG,KAED9I,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SApCiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAjEcjsB,EAAS,CAAE8B,KAAM,gBAoEtChC,EAAYiB,GACZyF,QAAQC,IAAI1F,GACZlB,IAEJ,EAmB2BnG,SAAA,EAEvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,eAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL,mBAAiB,6BACjByH,gBAAgB,kCAChB3G,GAAG,qBACHzC,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASiI,WAChB1G,SAAUspB,EACVhpB,UAAQ,EACRlJ,SAAA,EAEAJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oBACK,OAAZ2K,QAAY,IAAZA,OAAY,EAAZA,EAAc3H,KAAI,SAACkM,GAClB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKI,WAAWtP,SAClDkP,EAAK1N,MADK0N,EAAKI,WAItB,WAIJzM,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sBAAqBxI,SAC9B,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAIhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAASG,UAChBoB,SAAUspB,EACVjpB,gBAAgB,yBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,eAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,WACLsN,MAAOzH,EAASI,SAChBmB,SAAUspB,EACVjpB,gBAAgB,wBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,kBAAiBxI,SAC1B,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMoxB,EAAAA,EAAe3oB,IAAI,aAElC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,QACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SAjJgB,SAACC,GACzB,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAMgqB,EAAOiD,EAAPjD,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,KAE1C,IAAMqoB,EAAatuB,EAAEC,OAAOgG,MAEtBsoB,EADa,kDACQlC,KAAKiC,GAEhC7F,EAAa8F,EACf,EAuIU,mBAAiB,4BACjBnuB,gBAAgB,qBAChB3G,GAAG,kBACH4G,UAAQ,EACRwpB,WAAUrsB,WAKhBxD,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,0BAAyBxI,SAClC,aAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMuxB,EAAAA,EAAgB9oB,IAAI,eAEnC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,UACLsN,MAAOzH,EAASM,QAChBiB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,8BAA6BxI,SACtC,oBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwxB,EAAAA,EAAU/oB,IAAI,qBAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,cACLsN,MAAOzH,EAASO,YAChBgB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,6BAChB3G,GAAG,qBACH4G,UAAQ,WAMdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,cAGDJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,mBACHopB,MAAM,IACN0G,QAAS/qB,EAAS2vB,SAClBpuB,SAAU,SAACC,GACTvB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAI3B,GAAQ,IAAE2vB,SAAUnuB,EAAEC,OAAOspB,UAChD,QAIJxyB,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SAEZqG,EAAO,uBAAyB,4BAK3C,E,WCvRMkxB,EAAU,CACd,CAAE7mB,IAAK,kBAAmBgb,MAAO,QACjC,CAAEhb,IAAK,cAAegb,MAAO,SAC7B,CAAEhb,IAAK,oBAAqBgb,MAAO,kBACnC,CAAEhb,IAAK,gBAAiBgb,MAAO,WAC/B,CAAEhb,IAAK,kBAAmBgb,MAAO,aAobnC,EAlbwB,WACtB,IAAM6F,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,cAChC4F,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3CqzB,GAAqBj1B,EAAAA,EAAAA,aAAY20B,GAAzCz0B,OACFpC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAYc+2B,IAVa/6B,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,KAEoC6B,EAAAA,EAAAA,aAAY40B,GAA1C10B,QACRH,GAAkDI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAvDo1B,EAAiB/0B,EAAA,GAAEg1B,EAAoBh1B,EAAA,GAC9Bi1B,GAAkBr1B,EAAAA,EAAAA,aAAYw0B,GAAtCt0B,OACQo1B,GAAiBt1B,EAAAA,EAAAA,aAAY80B,GAArC50B,OACRI,GAAsCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA9CuG,EAAWtG,EAAA,GAAEuG,EAAcvG,EAAA,GAClCE,GAAgCN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAnC8Q,EAAQ3Q,EAAA,GAAE2wB,EAAW3wB,EAAA,GAC5B+Z,GAAkCxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAA1C6W,EAAS5W,EAAA,GAAE6W,EAAY7W,EAAA,GACtBmS,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACFwI,GAA0Bv1B,EAAAA,EAAAA,aAAY60B,GAC5C/Z,GAA0C3a,EAAAA,EAAAA,WAAS,GAAK4a,IAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAjD0a,GAAaza,GAAA,GACpB4J,IADsC5J,GAAA,IACE5a,EAAAA,EAAAA,UAAS,gBAAcykB,IAAAvkB,EAAAA,EAAAA,GAAAskB,GAAA,GAA1CgN,IAAF/M,GAAA,GAAiBA,GAAA,IACpC1gB,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SACQg6B,IADavxB,GAAXxI,aACuBsE,EAAAA,EAAAA,aACvCy0B,GADMv0B,QAGQw1B,IAAwB11B,EAAAA,EAAAA,aACtC+0B,GADM70B,OAGQy1B,IAAyB31B,EAAAA,EAAAA,aACvC00B,GADMx0B,OAGQ01B,IAAwB51B,EAAAA,EAAAA,aACtCg1B,GADM90B,OAIR,SAAS21B,GAAyB7wB,GAChCywB,GAAqBzwB,EAAY,CAC/BC,UAAW,SAACpF,GACVwD,IACA+xB,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,SAASyyB,GAA2B9wB,GAClC2wB,GAAqB3wB,EAAY,CAC/BC,UAAW,SAACpF,GACVwD,IACA+xB,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CA4BA,IA4CM5E,IAAWC,EAAAA,EAAAA,MAKXiB,GAAa,WACjBmH,GAAe,EACjB,EA2CA,SAASivB,KACPV,EAAc,GAAI,CAChBpwB,UAAW,SAACpF,GACVwD,IACA+xB,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GAAW,GAEzB,CA4FA,SAASvF,GAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EAEFyD,EAAiB5tB,EAAS,CACxBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,sCACV,IAKD4uB,IAIF,EACA7wB,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuBjqB,MAChCtL,MAAO,UACR,GACH,IAIFq7B,EACE,CAAE7tB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,qCACV,IAED4uB,IACF,EACA7wB,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,CAEA,OAnGAkH,EAAAA,EAAAA,YAAU,WACJ9C,OAGoB0I,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,EAIFR,GACAQ,GACe,oBAAfA,EAEAuK,GAA2BvK,IAE3BR,GACAQ,GACe,oBAAfA,GAGSR,IADT8K,GAAyB9K,GAZzBgL,KAiBO33B,IAEJmtB,GAA6B,oBAAfA,EAGjBuK,GAA2BvK,GAF3BwK,KAKN,GAAG,CAAChL,EAAgBQ,KAgElBlvB,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,qBAAuB,sBAC1CrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAAC48B,EAAgB,CACfr2B,WAAYA,GACZC,YAAaA,MAGfxG,EAAAA,EAAAA,KAAC48B,EAAgB,CACfr2B,WAAYA,GACZC,YAAaA,GACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,MAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,GAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,sBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,EAAGzI,UAAU,YAAWG,UAChC6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,aACX82B,aAAa,SACbnwB,SAtSa,SAACC,GACxB,IAAMmwB,EAAgBnwB,EAAEC,OAAOgG,MAI/B,GAFAqpB,GAAgBa,GAEM,WAAlBA,OAEoB7rB,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,EAGOR,GAAkBQ,EAE3BuK,GAA2BvK,GAClBR,GAET8K,GAAyB9K,GANzBgL,UAQG,GAAsB,UAAlBvD,EAA2B,CACpC,IAAMzH,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,mBAGlByM,IAAnBokB,GACoB,OAAnBA,GACmB,wBAAnBA,QACcpkB,IAAf4kB,GACgB,OAAfA,GACe,oBAAfA,EAGOR,GAAkBQ,EA/C/BqK,GAiD8BrK,EAjDE,CAC9BtmB,UAAW,SAACpF,GAEVwD,IACA+xB,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GACR9B,GACF,IA0CW0nB,GAjEf,SAAiC/lB,GAE/B0wB,GAAoB1wB,EAAY,CAC9BC,UAAW,SAACpF,GAEVwD,IACA+xB,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAuDM4yB,CAAwBlL,IAgE5B1nB,IACAiyB,EAAa,GAAI,CACfrwB,UAAW,SAACpF,GACVu1B,EAAqBv1B,EAAKA,KAC5B,EACAqF,QAAS,SAACC,GAAW,IAnEvB,CACF,EA4PY3L,SAAA,EAEAJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,iBACRJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,YACRJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gBAGZJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,4BAKJ27B,GACC/7B,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACT8B,aAtQe,SAACtH,GACxBnoB,IACAmyB,EAAwBr1B,OAAOqrB,EAAY,CACzCtmB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,sCACV,IAED4uB,KAEA1yB,GACF,EACA6B,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,GAAS,WAEXsuB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC9B,IACD9B,GACF,IAEFA,GACF,EAwOUxD,KAAMs1B,EACNvC,cAxOY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAqOU0uB,cAAeA,MAGjBp8B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,6SCzKA,EAlQ0B,SAAH+B,GAA2C,IAADu4B,EAAAC,EAApCx2B,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC9Cu2B,GAAmBnzB,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IACnDC,GAAaxE,EAAAA,EAAAA,KAAbwE,SACRC,GAAwCI,EAAAA,EAAAA,YAAUC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA3CoE,EAAY/D,EAAA,GAAEgE,EAAehE,EAAA,GAEpCE,GAAkCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1CE,EAASD,EAAA,GAAEuqB,EAAYvqB,EAAA,GACxBzC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBACxCwJ,GAAa1D,EAAAA,EAAAA,aAAY2D,EAAAA,IAAjCzD,OACFjC,GAAyB9D,EAAAA,EAAAA,IAA4B2D,EAAiBI,EAAAA,GAAeC,EAAAA,IACrFC,GAAqBjE,EAAAA,EAAAA,IAA4B2D,EAAiBO,EAAAA,GAAWF,EAAAA,IAEnFsC,IAD6BtG,EAAAA,EAAAA,IAA4B2D,EAAiBQ,EAAAA,GAAaH,EAAAA,KACvDgC,EAAAA,EAAAA,UAAS,CACvC8I,eAAgB,GAChB/H,MAAO,GACPgsB,YAAa,GACbvkB,WAAY,wBACZG,WAAY,MACZlI,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GANKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAO5BG,EAAAA,EAAAA,YAAU,WACJlB,IACFkF,EAAwB,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAM8I,YAC1B7H,GAAY,iBAAO,CACjBmI,eAAoB,OAAJpJ,QAAI,IAAJA,OAAI,EAAJA,EAAMoJ,eACtB/H,MAAW,OAAJrB,QAAI,IAAJA,OAAI,EAAJA,EAAMqB,MACbgsB,YAAiB,OAAJrtB,QAAI,IAAJA,OAAI,EAAJA,EAAMqtB,YACnBvkB,WAAgB,OAAJ9I,QAAI,IAAJA,OAAI,EAAJA,EAAM8I,WAClBG,WAAgB,OAAJjJ,QAAI,IAAJA,OAAI,EAAJA,EAAMiJ,WACnB,IAEL,GAAG,CAACjJ,IAEJ,IAAgBgF,GAAkB7E,EAAAA,EAAAA,aAAY8E,EAAAA,IAAtC5E,OACR,SAAS6E,EAAoBC,GACR,OAAfA,GACFH,EAAcG,EAAY,CACxBC,UAAW,SAACpF,GACVuE,EAAgBvE,EAClB,EACAqF,QAAS,SAACC,GAAW,GAG3B,CACA,IAAMumB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAC3BtlB,QAAQC,IAAIlE,EAAEC,OAAOgG,OACrB,IAAMmmB,EACM,eAATzzB,GAAkC,eAATA,GAC1BsN,IAAK,YAAAvM,OAAiBf,EAAKq7B,OAAO,GAAGC,cAAgBt7B,EAAK0iB,MAAM,IAE5DpV,EADA8jB,SAAS9jB,EAAO,IAEtBxH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,KAE7B,eAATzzB,GACF+J,EAAoBuD,EAExB,GA4BAvH,EAAAA,EAAAA,YAAU,WACJ3C,GA3BJsF,EAAS,GAAI,CACXuB,UAAW,SAACpF,GACVuE,EAAgBvE,EAClB,EACAqF,QAAS,SAACC,GAAW,GA0BzB,GAAE,CAAC/G,IAMH,IAAA7C,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAnCiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACCb,EAASirB,oBAC7BrqB,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBA1EcjsB,EAAS,CAAE8B,KAAM,gBA4EtChC,EAAYiB,GACZY,EAAME,iBACNhC,IAEJ,EAkB2BnG,SAAA,CAEtByE,IACC5B,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,yBAAwBxI,SAAC,kBAGtF6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,sCAEhB6F,MAAOzH,EAAS8H,WAChBvG,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACY,QADgB08B,EACnCE,EAAiB,UAAE,IAAAF,OAAA,EAAnBA,EAAqB15B,KAAI,SAACkM,GACzB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,UAMLvK,IACC/B,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,yBAAwBxI,SAAC,eAGtF6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL,mBAAiB,6BACjByH,gBAAgB,kCAChB3G,GAAG,qBACHzC,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASiI,WAChB1G,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oBACK,OAAZ2K,QAAY,IAAZA,GAAkB,QAANgyB,EAAZhyB,EAActE,YAAI,IAAAs2B,OAAN,EAAZA,EAAoB35B,KAAI,SAACkM,GACxB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKI,WAAWtP,SAClDkP,EAAK1N,MADK0N,EAAKI,WAItB,WAKNzM,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,2BAA0BxI,SAAC,sBAGxF6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,iBACLsN,MAAOzH,EAASoI,eAChB7G,SAAUspB,EACVjpB,gBAAgB,8BAChB3G,GAAG,2BACH4G,UAAQ,WAMdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,4BAA2BxI,SAAC,uBAGzF6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMi3B,EAAAA,EAAmBxuB,IAAI,uBAEtC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,QACL5G,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SAAUspB,EACV,mBAAiB,4BACjBjpB,gBAAgB,gCAChB3G,GAAG,4BACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,cAAaxI,SAAC,kBAG3E6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMk3B,EAAAA,EAAOzuB,IAAI,mBAE1B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,cACLsN,MAAOzH,EAASqsB,YAChB9qB,SAAUspB,EACVjpB,gBAAgB,0BAChB3G,GAAG,wBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CAACjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMuG,QAAQ,yBAAwBxI,SAAC,YAGtFJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CAAC7zB,GAAG,mBAAmBopB,MAAM,UAI1C9rB,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,kBAAoB,uBAKtC,E,WClQMkxB,EAAU,CACd,CAAE7mB,IAAK,iBAAkBgb,MAAO,mBAChC,CAAEhb,IAAK,QAASgb,MAAO,iBACvB,CAAEhb,IAAK,cAAegb,MAAO,gBA8T/B,EAzTmB,WACjB,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACQ22B,GAAkBz2B,EAAAA,EAAAA,aAAYoU,EAAAA,IAAtClU,OACQw2B,GAAmB12B,EAAAA,EAAAA,aAAYqU,EAAAA,IAAvCnU,OACFkD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3DrG,GAA8DC,EAAAA,EAAAA,KAAtDuxB,EAAYxxB,EAAZwxB,aAAc1oB,EAAe9I,EAAf8I,gBAAiBC,EAAkB/I,EAAlB+I,mBACvBV,GAAc5D,EAAAA,EAAAA,aAAY6D,EAAAA,IAAlC3D,OACRH,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAC5Bu2B,GAAuB32B,EAAAA,EAAAA,aAAYmU,EAAAA,IACzC7T,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCiR,EAAQhR,EAAA,GAAEgxB,EAAWhxB,EAAA,GAC5BE,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GAC9B+Z,GAAgCxa,EAAAA,EAAAA,WAAS,GAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAvCic,EAAQhc,EAAA,GACTnc,GADsBmc,EAAA,IACXlc,EAAAA,EAAAA,OACXZ,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAMlDkE,IALyBjE,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,KAEyBhE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAeIwB,IAbuBxF,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAEuBhE,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAKiB,WACjB2I,GAAe,EACjB,GACA,SAAS+vB,IACPjzB,EAAU,GAAI,CACZqB,UAAW,SAACpF,GACVyE,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GAAW,GAEzB,CACA,IAAgBO,GAAmB1F,EAAAA,EAAAA,aAAY2F,EAAAA,IAAvCzF,OACR,SAAS0F,EAAqBZ,GAC5B5B,IACAsC,EAAeV,EAAY,CACzBC,UAAW,SAACpF,GACVwD,IACAiB,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgBwC,GAAwB7F,EAAAA,EAAAA,aAAY8F,EAAAA,IAA5C5F,OAoDR,SAASN,EAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFiF,EAAcpvB,EAAS,CACrBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,kCACV,IAEwC,OAAvClN,aAAaC,QAAQ,oBACkByM,IAAvC1M,aAAaC,QAAQ,cAErB28B,IAEAjxB,EAAqB3L,aAAaC,QAAQ,cAE9C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,IAGF68B,EACE,CAAErvB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,iCACV,IAEwC,OAAvClN,aAAaC,QAAQ,oBACkByM,IAAvC1M,aAAaC,QAAQ,cAErB28B,IAEAjxB,EAAqB3L,aAAaC,QAAQ,cAE9C,EACAgL,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,EAuCAkH,EAAAA,EAAAA,YAAU,WACR,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,cAExC,QACsByM,IAAnBokB,GACoB,wBAAnBA,GACmB,OAAnBA,QACcpkB,IAAf4kB,GAEgB,OAAfA,EAGG,GAAIntB,GAAqC,oBAAfmtB,EAE/BsL,QACK,IAAmB,oBAAftL,EAKT,OApLF1lB,EAiL4BklB,EAjLI,CAC9B9lB,UAAW,SAACpF,GACVwD,IACAiB,EAAmBzE,EAAKA,KAC1B,EACAqF,QAAS,SAACC,GACR9B,GACF,GA8KF,MAVEwzB,GAWJ,GAAG,CAAC58B,aAAaC,QAAQ,cAAeD,aAAaC,QAAQ,oBAE7D,IAAAgK,GAAkC1I,EAAAA,EAAAA,KAA1BC,EAAQyI,EAARzI,SAAqByI,EAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,iBAAmB,kBACtCrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAAC09B,EAAiB,CAChBn3B,WAAYA,EACZC,YAAaA,KAGfxG,EAAAA,EAAAA,KAAC09B,EAAiB,CAChBn3B,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMpC,UAAU,OAAMG,SAAC,mBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,wBAKJ6K,GACCjL,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAMwE,EACNuuB,cAhMY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EA6LU+rB,aA/NgB,SAACzM,GACzBhjB,IACAuzB,EAAqBz2B,OAAOkmB,EAAc,CACxCnhB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,kCACV,IAEwC,OAAvClN,aAAaC,QAAQ,oBACkByM,IAAvC1M,aAAaC,QAAQ,cAErB28B,IAEAjxB,EAAqB3L,aAAaC,QAAQ,eAE5CmJ,GACF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,IACDwD,GACF,IAEFA,GACF,EAmMUuzB,SAAUA,KAGZx9B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,6SCgDA,EA7WsB,SAAH+B,GAA2C,IAADu4B,EAAAC,EAAAY,EAApCp3B,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC1Cu2B,GAAmBnzB,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IACrD/B,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBACxD6F,GAAkCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GAC9BE,GAAwCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA3C6D,EAAY5D,EAAA,GAAE6D,EAAe7D,EAAA,GACpCE,GAA8CN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAjD4D,EAAezD,EAAA,GAAE0D,EAAkB1D,EAAA,GAClCd,GAAaxE,EAAAA,EAAAA,KAAbwE,SACQ4D,GAAa1D,EAAAA,EAAAA,aAAY2D,EAAAA,IAAjCzD,OACQ0D,GAAc5D,EAAAA,EAAAA,aAAY6D,EAAAA,IAAlC3D,OACFjC,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAEI2F,GAAuB3J,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,IAGFwc,GAAgCxa,EAAAA,EAAAA,UAAS,CACvCkc,WAAY,GACZ2a,aAAc,GACdluB,WAAY,EACZE,aAAc,EAEdL,WAAY,EACZzH,MAAO,GACP+1B,UAAU,IACVrc,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GATK9Z,EAAQ+Z,EAAA,GAAE9Z,EAAW8Z,EAAA,IAU5B7Z,EAAAA,EAAAA,YAAU,WACJlB,GAIFiB,GAAY,iBAAO,CACjBub,WAAYxc,EAAKwc,WACjB2a,aAAcn3B,EAAKm3B,aACnBluB,WAAgB,OAAJjJ,QAAI,IAAJA,OAAI,EAAJA,EAAMiJ,WAClBE,aAAkB,OAAJnJ,QAAI,IAAJA,OAAI,EAAJA,EAAMmJ,aACpBL,WAAgB,OAAJ9I,QAAI,IAAJA,OAAI,EAAJA,EAAM8I,WAClBzH,MAAOrB,EAAKqB,MACZ+1B,UAAUp3B,EAAKo3B,UAChB,GAEL,GAAG,CAACp3B,IACJ,IAAgBgF,GAAkB7E,EAAAA,EAAAA,aAAY8E,EAAAA,IAAtC5E,OAWR,IAAgBwF,GAAmB1F,EAAAA,EAAAA,aAAY2F,EAAAA,IAAvCzF,OASR,IAAMwrB,EAAoB,SAACrpB,GACzBiE,QAAQC,IAAIlE,EAAEC,OAAOgG,OACrB,IAAAqjB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAC3BtlB,QAAQC,IAAIlE,EAAEC,OAAOgG,OACrB,IAvB2BtD,EAuBrBypB,EACO,cAATzzB,GACS,eAATA,GACS,eAATA,GACS,iBAATA,GACFsN,IAAK,YAAAvM,OAAiBf,EAAKq7B,OAAO,GAAGC,cAAgBt7B,EAAK0iB,MAAM,IAE5DpV,EADA8jB,SAAS9jB,EAAO,IAEtBxH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,KAE7B,eAATzzB,EAlCe,QADQgK,EAoCLsD,IAlCpBzD,EAAcG,EAAY,CACxBC,UAAW,SAACpF,GACVuE,EAAgBvE,EAClB,EACAqF,QAAS,SAACC,GAAW,IA+BL,eAATnK,GA1Bb,SAA8BgK,GAC5BU,EAAeV,EAAY,CACzBC,UAAW,SAACpF,GACVyE,EAAmBzE,EACrB,EACAqF,QAAS,SAACC,GAAW,GAEzB,CAoBIS,CAAqB0C,EAEzB,GAmCAvH,EAAAA,EAAAA,YAAU,WACJ3C,EAlCJsF,EAAS,GAAI,CACXuB,UAAW,SAACpF,GACVuE,EAAgBvE,EAClB,EACAqF,QAAS,SAACC,GAAW,IAgCZrB,GA5BXF,EAAU,GAAI,CACZqB,UAAW,SAACpF,GACVyE,EAAmBzE,EACrB,EACAqF,QAAS,SAACC,GAAW,GA4BzB,GAAG,CAAC/G,IACJ,IAAA7C,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAjCiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACCb,EAASirB,oBAC7BrqB,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAhGcjsB,EAAS,CAAE8B,KAAM,gBAkGtChC,EAAYiB,GACZY,EAAME,iBACNhC,IAEJ,EAgB2BnG,SAAA,CAEtByE,IACC5B,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,kBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,sCAEhB6F,MAAOzH,EAAS8H,WAChBvG,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACY,QADgB08B,EACnCE,EAAiB,UAAE,IAAAF,OAAA,EAAnBA,EAAqB15B,KAAI,SAACkM,GACzB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,UAMLvK,IACC/B,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,6BAA4BxI,SACrC,eAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL,mBAAiB,6BACjByH,gBAAgB,kCAChB3G,GAAG,uBACHzC,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASiI,WAChB1G,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,oBACK,OAAZ2K,QAAY,IAAZA,GAAkB,QAANgyB,EAAZhyB,EAActE,YAAI,IAAAs2B,OAAN,EAAZA,EAAoB35B,KAAI,SAACkM,GACxB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKI,WAAWtP,SAClDkP,EAAK1N,MADK0N,EAAKI,WAItB,UAKLhF,IACCzH,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,6BAA4BxI,SACrC,2BAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,eACL,mBAAiB,6BACjByH,gBAAgB,kCAChB3G,GAAG,uBACHwM,MAAOzH,EAASmI,aAChB5G,SAAUspB,EACVryB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtDiH,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,sBACQ,OAAf6K,QAAe,IAAfA,GAAqB,QAAN0yB,EAAf1yB,EAAiBxE,YAAI,IAAAk3B,OAAN,EAAfA,EAAuBv6B,KAAI,SAACkM,GAC3B,OACEtP,EAAAA,EAAAA,KAAA,UAAgCkP,MAAOI,EAAKM,aAAaxP,SACtDkP,EAAKO,gBADKP,EAAKM,aAItB,WAKN3M,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,wBAAuBxI,SAChC,qBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,aACLsN,MAAOzH,EAASwb,WAChBja,SAAUspB,EACVjpB,gBAAgB,0BAChB3G,GAAG,uBACH4G,UAAQ,WAMdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,6BAA4BxI,SACrC,wBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM43B,EAAAA,EAAoBnvB,IAAI,YAEvC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,eACLsN,MAAOzH,EAASm2B,aAChB50B,SAAUspB,EACVjpB,gBAAgB,gCAChB3G,GAAG,6BACH4G,UAAQ,WAIdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,wBAAuBxI,SAChC,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SAAUspB,EACVjpB,gBAAgB,0BAChB3G,GAAG,uBACH4G,UAAQ,EACRwpB,WAAUrsB,WAIhBxD,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,wBAAuBxI,SAChC,2BAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,SACL5G,KAAK,YACLsN,MAAOzH,EAASo2B,UAChB70B,SAAUspB,EACVjpB,gBAAgB,yBAChB3G,GAAG,uBACH4G,UAAQ,WAOdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,cAAgB,mBAKlC,E,WCtWMkxB,EAAU,CACd,CAAE7mB,IAAK,aAAcgb,MAAO,kBAC5B,CAAEhb,IAAK,eAAgBgb,MAAO,iBA6QhC,EA3QgB,WACd,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SAEFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3DrG,GAAsDC,EAAAA,EAAAA,KAA9CuxB,EAAYxxB,EAAZwxB,aAAcvoB,EAAWjJ,EAAXiJ,YAAaD,EAAchJ,EAAdgJ,eACnCxE,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCiR,EAAQhR,EAAA,GAAEgxB,EAAWhxB,EAAA,GAC5BE,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GACxBnC,GAAWC,EAAAA,EAAAA,MACD0G,GAAepF,EAAAA,EAAAA,aAAYsU,EAAAA,IAAnCpU,OAEQi3B,GAAcn3B,EAAAA,EAAAA,aAAY0U,EAAAA,IAAlCxU,OACQk3B,GAAep3B,EAAAA,EAAAA,aAAY2U,EAAAA,IAAnCzU,OACFm3B,GAAmBr3B,EAAAA,EAAAA,aAAYyU,EAAAA,IACrCkG,GAAgCxa,EAAAA,EAAAA,WAAS,GAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAvC2c,EAAQ1c,EAAA,GAKTjb,GALsBib,EAAA,GAKT,WACjB9T,GAAe,EACjB,GACgBskB,GAAmBprB,EAAAA,EAAAA,aAAYqF,EAAAA,IAAvCnF,OACR,SAAS6I,EAAiB/D,GAExBomB,EAAepmB,EAAY,CACzBC,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CACA,IAAgBgoB,GAAsBrrB,EAAAA,EAAAA,aAAYuF,EAAAA,IAA1CrF,OAaR,IAAgBorB,GAAsBtrB,EAAAA,EAAAA,aAAYyF,EAAAA,IAA1CvF,OAqDR,SAASq3B,IACPnyB,EAAW,GAAI,CACbH,UAAW,SAACpF,GACV0E,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GAAW,GAEzB,CAyBA,SAASvF,EAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACF2F,EAAU9vB,EAAS,CACjBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,8BACV,IAE0C,OAAzClN,aAAaC,QAAQ,sBACoByM,IAAzC1M,aAAaC,QAAQ,gBAErBq9B,IAEAxuB,EAAiB9O,aAAaC,QAAQ,gBAE1C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,IAGFu9B,EACE,CAAE/vB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,6BACV,IAE0C,OAAzClN,aAAaC,QAAQ,sBACoByM,IAAzC1M,aAAaC,QAAQ,gBAErBq9B,IAEAxuB,EAAiB9O,aAAaC,QAAQ,gBAE1C,EACAgL,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,EA/FAkH,EAAAA,EAAAA,YAAU,WACR,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBACtCqxB,EAAatxB,aAAaC,QAAQ,cAClCksB,EAAensB,aAAaC,QAAQ,gBAEtCksB,GAAiC,sBAAjBA,EAElBrd,EAAiBqd,GACRmF,GAA6B,oBAAfA,EAlEzBD,EAoEmBC,EApEW,CAC5BtmB,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,IA8DS0nB,GAAqC,wBAAnBA,EApF/B,SAA0B/lB,GAExBqmB,EAAkBrmB,EAAY,CAC5BC,UAAW,SAACpF,GACVwD,IACAkB,EAAe1E,EAAKA,KACtB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CA2EIooB,CAAiBV,GAGjBwM,GAEJ,GAAG,CACDt9B,aAAaC,QAAQ,kBACrBD,aAAaC,QAAQ,cACrBD,aAAaC,QAAQ,kBA2EvB,IAAAgK,GAAkC1I,EAAAA,EAAAA,KAA1BC,EAAQyI,EAARzI,SAAqByI,EAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,gBAAkB,iBACrCrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACo+B,EAAa,CAAC73B,WAAYA,EAAYC,YAAaA,KAEpDxG,EAAAA,EAAAA,KAACo+B,EAAa,CACZ73B,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,iBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,uBAKJgL,GACCpL,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAM2E,EACNquB,aA7LY,SAAC7H,GACrB5nB,IACAi0B,EAAiBn3B,OAAO8qB,EAAU,CAChC/lB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,8BACV,IAG0C,OAAzClN,aAAaC,QAAQ,sBACoByM,IAAzC1M,aAAaC,QAAQ,gBAErBq9B,IAEAxuB,EAAiB9O,aAAaC,QAAQ,iBAExCmJ,GACF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,IACDwD,GACF,IAEFA,GACF,EAgKUuvB,cA/JY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EA4JUwwB,SAAUA,KAGZl+B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,uTCgRA,EA5gBwB,SAAH+B,GAA2C,IAADu4B,EAAAuB,EAApC93B,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC5Cu2B,GAAmBnzB,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IACnDC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAERC,GAAkCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GACxBtC,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBACxCU,GAAUoF,EAAAA,EAAAA,aAAY8W,EAAAA,IAA9B5W,OACRI,GAAiCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAtCo3B,EAAQn3B,EAAA,GAAEo3B,EAAYp3B,EAAA,GACvBtC,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAYFsC,IAV2BtG,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,KAE2BhE,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,KAE8BgC,EAAAA,EAAAA,UAAS,CACvCnF,KAAM,GACN2a,cAAe,GACfhN,WAAY,wBACZoN,SAAU,GACVC,SAAU,GACVF,YAAa,GACbD,mBAAoB,GACpB1U,QAAS,GACT+U,KAAM,GACND,OAAQ,GACRE,SAAU,EACVC,SAAU,EACVC,UAAW,EACXC,iBAAiB,EACjBc,OAAQ,KACRxW,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAhBKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAiB5BG,EAAAA,EAAAA,YAAU,WAoDRnG,EAAM,GAAI,CACRqK,UAAW,SAACpF,GACV83B,EAAa93B,EACf,EACAqF,QAAS,SAACC,GAAW,IArDnBtF,GACFiB,GAAY,iBAAO,CACjB9F,KAAM6E,EAAK7E,KACX2a,cAAe9V,EAAK8V,cACpBhN,WAAYiN,OAAO/V,EAAK8I,YACxBoN,SAAUlW,EAAKkW,SACfC,SAAUnW,EAAKmW,SACfF,YAAajW,EAAKiW,YAClBD,mBAAoBhW,EAAKgW,mBACzB1U,QAAStB,EAAKsB,QACd+U,KAAMrW,EAAKqW,KACXD,OAAQpW,EAAKoW,OACbE,UAAWtW,EAAKsW,SAChBC,UAAWvW,EAAKuW,SAChBC,WAAYxW,EAAKwW,UACjBC,iBAAiB,EAClB,GAEL,GAAG,CAACzW,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAa+pB,EAAPC,QAE3B,GAAc,KAAVtjB,EAAJ,CAOA,IAAMmmB,EACM,aAATzzB,GAAgC,cAATA,GAAiC,WAATA,GACvC,aAAT4G,EAEI0G,EADAiR,WAAWjR,GAGXsvB,EACK,aAAT58B,GAAgC,aAAT4G,EAAsBwqB,SAAS9jB,EAAO,IAAMA,EAGjEgV,MAAMmR,IAAyB,aAATzzB,GAAgC,cAATA,GAC7CsiB,MAAMsa,IAA2B,aAAT58B,GAE1B8F,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAATA,EAAsB48B,EAAgBnJ,IAhBlD,MALE3tB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAOsN,IAsBd,EAUA,IAkBA/M,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAzBiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACCb,EAASirB,oBAC7BrqB,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAEgB,IAAzBe,EAAKE,kBA3GcjsB,EAAS,CAAE8B,KAAM,gBA8GtChC,EAAYiB,GACZY,EAAME,iBACNhC,IAEJ,EAQ2BnG,SAAA,CAEtByE,IACC5B,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,kBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,sCAEhB6F,MAAOzH,EAAS8H,WAChBvG,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACY,QADgB08B,EACnCE,EAAiB,UAAE,IAAAF,OAAA,EAAnBA,EAAqB15B,KAAI,SAACkM,GACzB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,WAKNtM,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,oBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMu4B,EAAAA,EAAO9vB,IAAI,YAE1B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,OACLsN,MAAOzH,EAAS7F,KAChBoH,SAAUspB,EACVjpB,gBAAgB,4BAChB3G,GAAG,yBACH4G,UAAQ,WAMdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,oBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,gBACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,uCAChB3G,GAAG,yBACHwM,MAAOzH,EAAS8U,cAChBvT,SAAUspB,EACVhpB,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,0BACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,kBAAkB9O,SAAC,qBAClCJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,mBAAmB9O,SAAC,sBACnCJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,sBAAsB9O,SAAC,+BAG1C6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,gBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,WACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASkV,SAChB3T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,mCAChB3G,GAAG,qBACH4G,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,qBACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,eAAe9O,SAAC,kBAC/BJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,aAAa9O,SAAC,gBAC7BJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,aAAa9O,SAAC,sBAMjC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,eAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,WACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASmV,SAChB5T,SAAUspB,EACV,mBAAiB,qBACjBjpB,gBAAgB,kCAChB3G,GAAG,qBACH4G,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,qBACRJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,MAAM9O,SAAC,SACtBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,MAAM9O,SAAC,SACtBJ,EAAAA,EAAAA,KAAA,UAAQkP,MAAO,MAAM9O,SAAC,eAI1B6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,uBAAsBxI,SAC/B,kBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMyL,EAAAA,EAAoBhD,IAAI,mBAEvC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,cACLsN,MAAOzH,EAASiV,YAChB1T,SAAUspB,EACV,mBAAiB,wBACjBjpB,gBAAgB,yBAChB3G,GAAG,wBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,qBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwxB,EAAAA,EAAU/oB,IAAI,eAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,MACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,qBACLyf,YAAY,UACZnS,MAAOzH,EAASgV,mBAChBzT,SAAUspB,EACV,mBAAiB,0BACjBjpB,gBAAgB,4BAChB3G,GAAG,0BACH4G,UAAQ,WAOdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,iBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,SACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,8BAEhB6F,MAAOzH,EAASuW,OAChBhV,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,gBACC,OAARk+B,QAAQ,IAARA,GAAc,QAAND,EAARC,EAAU73B,YAAI,IAAA43B,OAAN,EAARA,EAAgBj7B,KAAI,SAACkM,GACpB,OACErM,EAAAA,EAAAA,MAAA,UAA0BiM,MAAOI,EAAK0O,OAAO5d,SAAA,CAC1CkP,EAAK1H,UACL0H,EAAKzH,WAFKyH,EAAK0O,OAKtB,WAKJ/a,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,0BAAyBxI,SAClC,cAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,eAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,UACLsN,MAAOzH,EAASM,QAChBiB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,oBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,uBAAsBxI,SAC/B,aAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMyL,EAAAA,EAAoBhD,IAAI,cAEvC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,SACLsN,MAAOzH,EAASoV,OAChB7T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,sBAChB3G,GAAG,mBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMk3B,EAAAA,EAAOzuB,IAAI,YAE1B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,OACLsN,MAAOzH,EAASqV,KAChB9T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,oBAChB3G,GAAG,iBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,2BAA0BxI,SACnC,cAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,SACL5G,KAAK,WACLsN,MAAOzH,EAASsV,SAChB/T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,2BAA0BxI,SACnC,eAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,WACLsN,MAAOzH,EAASuV,SAChBhU,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,2BAA0BxI,SACnC,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,KAGhB9I,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,SACL5G,KAAK,YACLsN,MAAOzH,EAASwV,UAChBjU,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,wBAChB3G,GAAG,sBACH4G,UAAQ,WAMdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,gBAAkB,qBAKpC,E,sBCxgBMkxB,EAAU,CACd,CAAE7mB,IAAK,OAAQgb,MAAO,iBACtB,CAAEhb,IAAK,gBAAiBgb,MAAO,iBAC/B,CAAEhb,IAAK,QAASgb,MAAO,iBAEvB,CAAEhb,IAAK,qBAAsBgb,MAAO,kBACpC,CAAEhb,IAAK,UAAWgb,MAAO,WACzB,CAAEhb,IAAK,SAAUgb,MAAO,UACxB,CAAEhb,IAAK,OAAQgb,MAAO,QACtB,CAAEhb,IAAK,WAAYgb,MAAO,aAwO5B,EAtOmB,WACjB,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3Ck2B,GAAgB93B,EAAAA,EAAAA,aAAY0V,EAAAA,IAApCxV,OACQ63B,GAAiB/3B,EAAAA,EAAAA,aAAYuW,EAAAA,IAArCrW,OACR3E,GAA0CC,EAAAA,EAAAA,KAAlC2I,EAAY5I,EAAZ4I,aAAcC,EAAe7I,EAAf6I,gBACNV,GAAa1D,EAAAA,EAAAA,aAAY2D,EAAAA,IAAjCzD,OACRH,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCiR,EAAQhR,EAAA,GAAEgxB,EAAWhxB,EAAA,GAC5BE,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GACtBmsB,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACFiL,GAAqBh4B,EAAAA,EAAAA,aAAYyV,EAAAA,IACvCkF,GAAgCxa,EAAAA,EAAAA,WAAS,GAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAvCsd,EAAQrd,EAAA,GAETnc,GAFsBmc,EAAA,IAEXlc,EAAAA,EAAAA,OAKXiB,EAAa,WACjBmH,GAAe,EACjB,EAgDA,SAASoxB,IACPx0B,EAAS,GAAI,CACXuB,UAAW,SAACpF,GACVuE,EAAgBvE,EAAKA,KACvB,EACAqF,QAAS,SAACC,GAAW,GAEzB,CACA,IAAgBN,GAAkB7E,EAAAA,EAAAA,aAAY8E,EAAAA,IAAtC5E,OACR,SAAS6E,EAAoBC,GAC3BH,EAAcG,EAAY,CACxBC,UAAW,SAACpF,GACVwD,IACAe,EAAgBvE,EAAKA,KACvB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAYA,SAASzD,EAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFsG,EAAYzwB,EAAS,CACnBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,gCACV,IAE4C,OAA3ClN,aAAaC,QAAQ,wBACsByM,IAA3C1M,aAAaC,QAAQ,kBAErBg+B,IAEAnzB,EAAoB9K,aAAaC,QAAQ,kBAE7C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuBjqB,MAChCtL,MAAO,UACR,GACH,IAGFk+B,EACE,CAAE1wB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,+BACV,IAE4C,OAA3ClN,aAAaC,QAAQ,wBACsByM,IAA3C1M,aAAaC,QAAQ,kBAErBg+B,IAEAnzB,EAAoB9K,aAAaC,QAAQ,kBAE7C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,EA3EAkH,EAAAA,EAAAA,YAAU,gBAEqC4F,IAA3C1M,aAAaC,QAAQ,mBACsB,wBAA3CD,aAAaC,QAAQ,mBACsB,OAA3CD,aAAaC,QAAQ,mBAErBg+B,GAIJ,GAAG,CAACj+B,aAAaC,QAAQ,oBAkEzB,IAAA0M,GAAkCpL,EAAAA,EAAAA,KAA1BC,EAAQmL,EAARnL,SAAqBmL,EAAXlL,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,eAAiB,gBACpCrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAAC++B,EAAe,CACdx4B,WAAYA,EACZC,YAAaA,KAGfxG,EAAAA,EAAAA,KAAC++B,EAAe,CACdx4B,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,kBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,wBAKJ2K,GACC/K,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACT8B,aA7Le,SAACtH,GACxBnoB,IACA40B,EAAmB93B,OAAOqrB,EAAY,CACpCtmB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,gCACV,IAE4C,OAA3ClN,aAAaC,QAAQ,wBACsByM,IAA3C1M,aAAaC,QAAQ,kBAErBg+B,IAEAnzB,EAAoB9K,aAAaC,QAAQ,mBAE3CmJ,GACF,EACA6B,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEXsuB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC9B,IACD9B,GACF,IAEFA,GACF,EA0JUxD,KAAMsE,EACNyuB,cA1JY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAuJUmxB,SAAUA,KAGZ7+B,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,uPC7BA,EAnNgB,SAAH+B,GAA2C,IAADu4B,EAApCv2B,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAClCC,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFs2B,GAAmBnzB,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IAE3DE,GAAkCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GAC9BE,GAAgCH,EAAAA,EAAAA,UAAS,CACvCi4B,WAAY,GACZC,aAAc,GACd1vB,WAAYiN,OAAO3b,aAAaC,QAAQ,mBACxC4I,SAAU,GACVw1B,QAAS,KACT/3B,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GANKO,EAAQN,EAAA,GAAEO,EAAWP,EAAA,IAO5BQ,EAAAA,EAAAA,YAAU,WACJlB,GACFiB,GAAY,iBAAO,CACjBs3B,WAAYv4B,EAAKu4B,WACjBC,aAAcx4B,EAAKw4B,aACnB1vB,WAAY9I,EAAK8I,WACjB7F,SAASjD,EAAKiD,SACdw1B,QAASz4B,EAAKy4B,QACf,GAEL,GAAG,CAACz4B,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAGrB6C,EAAuB,eAATzzB,EAAwBoxB,SAAS9jB,EAAO,IAAMA,EAElExH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,IAE5C,EAqBAlzB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SA1BiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBA1CcjsB,EAAS,CAAE8B,KAAM,gBA6CtChC,EAAYiB,GACZyF,QAAQC,IAAI1F,GACZlB,IAEJ,EAS2BnG,SAAA,EAEvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,kBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACVjxB,KAAK,aACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD,mBAAiB,6BACjBgH,gBAAgB,sCAEhB6F,MAAOzH,EAAS8H,WAChBvG,SAAUspB,EACVhpB,UAAQ,EAERwpB,WAAUrsB,EAAoBrG,SAAA,EAE9BJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACY,QADgB08B,EACnCE,EAAiB,UAAE,IAAAF,OAAA,EAAnBA,EAAqB15B,KAAI,SAACkM,GACzB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,WAIJtM,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,iBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMu4B,EAAAA,EAAO9vB,IAAI,YAE1B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,aACLsN,MAAOzH,EAASu3B,WAChBh2B,SAAUspB,EACVjpB,gBAAgB,4BAChB3G,GAAG,yBACH4G,UAAQ,EACRwpB,WAAUrsB,WAMhBxD,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,YAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMi5B,EAAAA,EAAUxwB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,eACLsN,MAAOzH,EAASw3B,aAChBj2B,SAAUspB,EACVjpB,gBAAgB,4BAChB3G,GAAG,yBACH4G,UAAQ,WAIdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,cAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMi5B,EAAAA,EAAUxwB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,eACLsN,MAAOzH,EAASy3B,QAChBl2B,SAAUspB,EACVjpB,gBAAgB,4BAChB3G,GAAG,yBACH4G,UAAQ,WAIdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,eAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMi5B,EAAAA,EAAUxwB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,eACLsN,MAAOzH,EAASiC,SAChBV,SAAUspB,EACVjpB,gBAAgB,4BAChB3G,GAAG,yBACH4G,UAAQ,WAMdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,gBAAkB,oBAKpC,E,kECrNa24B,EAAiB,eAAA76B,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjT,GAAE,IAAAmT,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACc,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAADlU,OAA6BD,IAAM,KAAD,EAA9D,OAA8DmT,EAAAE,EAAAK,KAAlE3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SACL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,gBAJ6BY,GAAA,OAAAhS,EAAAmO,MAAA,KAAA8D,UAAA,KAKjB6oB,EAAc,eAAA5oB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OACiB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,4BAA4B,KAAD,EAAxD,OAAwDF,EAAAC,EAAAR,KAA5D3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SACL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAJ0BS,GAAA,OAAAV,EAAA/D,MAAA,KAAA8D,UAAA,KAMd8oB,EAAU,eAAAvoB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOpB,GAAO,IAAAqB,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEgB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,iCAExCN,GACA,KAAD,EAHW,OAGXqB,EAAAC,EAAAd,KAHO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAIL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBARsBY,GAAA,OAAAb,EAAArE,MAAA,KAAA8D,UAAA,KAUV+oB,EAAW,eAAAnoB,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OAEe,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmD,MAAM,2BAADvV,OACbiT,EAAQuC,SAASqnB,WAC5C5pB,EAAQ3H,SACR,KAAD,EAHW,OAGXqJ,EAAAC,EAAAnB,KAHO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAIL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBARuBe,GAAA,OAAAhB,EAAA1E,MAAA,KAAA8D,UAAA,KASXipB,EAAa,eAAAjoB,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO/U,GAAE,IAAAgV,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OACkB,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAcqE,OAAO,0BAADzW,OAA2BD,IAAM,KAAD,EAA/D,OAA+DgV,EAAAC,EAAAvB,KAAnE3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBAJyBgB,GAAA,OAAAjB,EAAA9E,MAAA,KAAA8D,UAAA,KCdpBmhB,EAAU,CACd,CAAE7mB,IAAK,aAAcgb,MAAO,cAC5B,CAAEhb,IAAK,eAAgBgb,MAAO,iBAC9B,CAAEhb,IAAK,UAAWgb,MAAO,WACzB,CAAEhb,IAAK,WAAYgb,MAAO,aAsO5B,EAlOgB,WACd,IAAQplB,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3Ck3B,GAAe94B,EAAAA,EAAAA,aAAY04B,GAAnCx4B,OAEQ64B,GAAgB/4B,EAAAA,EAAAA,aAAY24B,GAApCz4B,OACQ84B,GAAgBh5B,EAAAA,EAAAA,aAAYw4B,GAApCt4B,OACQ+4B,GAAmBj5B,EAAAA,EAAAA,aAAYy4B,GAAvCv4B,OACRH,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAsCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA3C44B,EAAW34B,EAAA,GAAE44B,EAAc54B,EAAA,GAClCE,GAAgCN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAnC8Q,EAAQ3Q,EAAA,GAAE2wB,EAAW3wB,EAAA,GAE5B+Z,GAAkCxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAA1C6W,EAAS5W,EAAA,GAAE6W,EAAY7W,EAAA,GACtBmS,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACFqM,GAAoBp5B,EAAAA,EAAAA,aAAY64B,GACtC/d,GAAwC3a,EAAAA,EAAAA,WAAS,GAAK4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAA/Cue,EAAYte,EAAA,GACbtc,GAD8Bsc,EAAA,IACnBrc,EAAAA,EAAAA,OAKXiB,EAAa,WACjBmH,GAAe,EACjB,EAMA,SAASwyB,EAAoBx9B,GAC3Bk9B,EAAYl9B,EAAI,CACdmJ,UAAW,SAACpF,GACVwD,IACA81B,EAAet5B,EAAKA,KACtB,EACAqF,QAAS,SAACC,GAAW,GAEzB,CA0BA,SAASvF,EAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFsH,EAAWzxB,EAAS,CAClBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,+BACV,IACDmyB,EAAoBr/B,aAAaC,QAAQ,kBAC3C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuBjqB,MAChCtL,MAAO,UACR,GACH,IAGFk/B,EACE,CAAE1xB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,8BACV,IACDmyB,EAAoBr/B,aAAaC,QAAQ,kBAC3C,EACAgL,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,EAlEAkH,EAAAA,EAAAA,YAAU,WACR,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBAExC6wB,GAAqC,wBAAnBA,EAEpBuO,EAAoBvO,GAbtBkO,EAAe,GAAI,CACjBh0B,UAAW,SAACpF,GACVwD,IACA81B,EAAet5B,EAAKA,KACtB,EACAqF,QAAS,SAACC,GAAW,GAazB,GAAG,CAAClL,aAAaC,QAAQ,oBAyDzB,IAiCAgK,GAAkC1I,EAAAA,EAAAA,KAA1BC,EAAQyI,EAARzI,SAAqByI,EAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,cAAgB,eACnCrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACmgC,EAAW,CAAC55B,WAAYA,EAAYC,YAAaA,KAElDxG,EAAAA,EAAAA,KAACmgC,EAAW,CACV55B,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAGXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,eAIhE6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACxI,UAAU,mCAAkCG,SAAA,EAChDJ,EAAAA,EAAAA,KAAA,OAAAI,UACEJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,iBACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,mBAIH6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,eAAcG,SAAA,EAC3BJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAUR,UAAU,iBAAgBG,SAAC,SAGpDJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAUR,UAAU,iBAAgBG,SAAC,UAIpDJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAUR,UAAU,iBAAgBG,SAAC,WAGpDJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAUR,UAAU,iBAAgBG,SAAC,kBAMzD0/B,GACC9/B,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAMq5B,EACNrG,aApGe,SAACtH,GAExBnoB,IACAg2B,EAAkBl5B,OAAOqrB,EAAY,CACnCtmB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,+BACV,IAEDmyB,EAAoBr/B,aAAaC,QAAQ,mBAEzCmJ,GACF,EACA6B,QAAS,SAACC,GACW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEXsuB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC9B,IACD9B,GACF,IAEFA,GACF,EAqEUuvB,cA/LY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EA4LUuyB,aAAcA,KAGhBjgC,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,6UC6MA,EA9a4B,SAAH+B,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAC9CC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAGRC,IAFiBrB,EAAAA,EAAAA,OAEiByB,EAAAA,EAAAA,WAAS,IAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GAC9BE,GAAgCH,EAAAA,EAAAA,UAAS,CACvCyI,aAAc,GACd4wB,cAAe,GACft4B,MAAO,GACPC,QAAS,GACT+U,KAAM,GACND,OAAQ,GACRE,SAAU,GACVsjB,MAAO,GACPC,UAAW,KACXC,UAAW,KACXC,UAAW,KACXC,UAAW,OACXt5B,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAbKO,EAAQN,EAAA,GAAEO,EAAWP,EAAA,IAc5BQ,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,GAAY,iBAAO,CACjB8H,aAAc/I,EAAK+I,aACnB4wB,cAAe35B,EAAK25B,cACpBt4B,MAAOrB,EAAKqB,MACZC,QAAStB,EAAKsB,QACd+U,KAAMrW,EAAKqW,KACXD,OAAQpW,EAAKoW,OACbE,SAAUtW,EAAKsW,SACfsjB,MAAO55B,EAAK45B,MACZC,UAAW75B,EAAK65B,UAChBC,UAAW95B,EAAK85B,UAChBC,UAAW/5B,EAAK+5B,UAChBC,UAAWh6B,EAAKg6B,UACjB,GAEL,GAAG,CAACh6B,IACJ,IAAM6rB,EAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QACvB6C,EAAcnmB,GAGP,aAATtN,GACS,cAATA,GACS,cAATA,GACS,cAATA,GACU,cAATA,GAAiC,aAAT4G,IAML,KAHpB6sB,EAAcrC,SAAS9jB,EAAO,KAAO,KAInCmmB,EAAc,MAIlB3tB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAU6C,IAE5C,EAgCAlzB,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAxBiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBApFcjsB,EAAS,CAAE8B,KAAM,gBAuFtChC,EAAYiB,GACZlB,IAEJ,EAQ2BnG,SAAA,EAGvB6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,mCAAkCxI,SAC3C,uBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UAEdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,eACLsN,MAAOzH,EAAS+H,aAChBxG,SAAUspB,EACVjpB,gBAAgB,gCAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sCAAqCxI,SAC9C,oBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwL,EAAAA,EAAW/C,IAAI,eAE9B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,gBACLsN,MAAOzH,EAAS24B,cAChBp3B,SAAUspB,EACVjpB,gBAAgB,oCAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,sCAAqCxI,SAC9C,WAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMwxB,EAAAA,EAAU/oB,IAAI,eAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,QACLsN,MAAOzH,EAAS44B,MAChBr3B,SAAUspB,EACVjpB,gBAAgB,oCAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,oCAAmCxI,SAC5C,wBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMoxB,EAAAA,EAAe3oB,IAAI,aAElC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,QACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,QACLsN,MAAOzH,EAASK,MAChBkB,SAjIgB,SAACC,GACzB,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAMgqB,EAAOiD,EAAPjD,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,KAE1C,IAAMqoB,EAAatuB,EAAEC,OAAOgG,MAEtBsoB,EADa,kDACQlC,KAAKiC,GAEhC7F,EAAa8F,EACf,EAuHU,mBAAiB,4BACjBnuB,gBAAgB,iCAChB3G,GAAG,oCACH4G,UAAQ,WAIdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAC,8BACd6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,oCAAmCxI,SAC5C,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMw6B,EAAAA,EAAU/xB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAAS64B,UAChBt3B,SAAUspB,EACV,mBAAiB,qCAOvBrvB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,oCAAmCxI,SAC5C,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMw6B,EAAAA,EAAU/xB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAAS84B,UAChBv3B,SAAUspB,EACV,mBAAiB,qCAOvBrvB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,oCAAmCxI,SAC5C,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMw6B,EAAAA,EAAU/xB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAAS+4B,UAChBx3B,SAAUspB,EACV,mBAAiB,qCAOvBrvB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,oCAAmCxI,SAC5C,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,iBAAgBG,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMw6B,EAAAA,EAAU/xB,IAAI,aAE7B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDT,KAAK,YACLsN,MAAOzH,EAASg5B,UAChBz3B,SAAUspB,EACV,mBAAiB,qCAQvBrvB,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,0BAAyBxI,SAClC,aAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMuxB,EAAAA,EAAgB9oB,IAAI,eAEnC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,UACLsN,MAAOzH,EAASM,QAChBiB,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,uBAAsBxI,SAC/B,UAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMyL,EAAAA,EAAoBhD,IAAI,YAEvC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,OACLsN,MAAOzH,EAASqV,KAChB9T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,oBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,YAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMk3B,EAAAA,EAAOzuB,IAAI,cAE1B3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,SACLsN,MAAOzH,EAASoV,OAChB7T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,sBAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EACXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,2BAA0BxI,SACnC,cAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAAzI,SAAA,EACVJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMy6B,EAAAA,EAAchyB,IAAI,gBAEjC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACT9I,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IACzDmG,KAAK,OACL5G,KAAK,WACLsN,MAAOzH,EAASsV,SAChB/T,SAAUspB,EACV,mBAAiB,6BACjBjpB,gBAAgB,uBAChB3G,GAAG,qBACH4G,UAAQ,WAKdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SAEZqG,EAAO,oBAAsB,yBAKxC,E,sBCnaMkxB,EAAU,CACd,CAAE7mB,IAAK,eAAgBgb,MAAO,qBAC9B,CAAEhb,IAAK,gBAAiBgb,MAAO,wBAC/B,CAAEhb,IAAK,QAASgb,MAAO,iBACvB,CAAEhb,IAAK,mBAAoBgb,MAAO,oBAClC,CAAEhb,IAAK,UAAWgb,MAAO,WACzB,CAAEhb,IAAK,SAAUgb,MAAO,UACxB,CAAEhb,IAAK,OAAQgb,MAAO,QACtB,CAAEhb,IAAK,WAAYgb,MAAO,aAwN5B,EAtNqB,WACnB,IAAMliB,GAAUC,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMF,OAAO,IACrCg3B,GAAoBh6B,EAAAA,EAAAA,aAAYkQ,EAAAA,IAAxChQ,OACQsD,GAAqBxD,EAAAA,EAAAA,aAAY4E,EAAAA,IAAzC1E,OACQ+5B,GAAqBj6B,EAAAA,EAAAA,aAAYiR,EAAAA,IAAzC/Q,OACFL,GAAOoD,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IAC/CE,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCiR,EAAQhR,EAAA,GAAEgxB,EAAWhxB,EAAA,GAC5BE,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GACtBmsB,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACRpS,GAAgCxa,EAAAA,EAAAA,WAAS,GAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAvCuf,EAAQtf,EAAA,GA4CTjb,GA5CsBib,EAAA,GA4CT,WACjB9T,GAAe,EACjB,GAEQhH,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFrB,GAAWC,EAAAA,EAAAA,MACX0E,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EACrDu4B,GAAyBn6B,EAAAA,EAAAA,aAAYmS,EAAAA,IAC3C,SAASvS,EAAYyH,GACnBjE,IAEAokB,YAAW,WACLgK,EACFwI,EAAgB3yB,EAAS,CACvBpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,oCACV,IACD3D,EAAiB,GAAI,CACnByB,UAAW,SAACpF,GAEVmD,EAAQnD,EAAKA,KACf,EACAqF,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,GACH,GAEJ,EACAqF,QAAS,SAACC,GAEW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,IAGFogC,EACE,CAAE5yB,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,mCACV,IACD3D,EAAiB,GAAI,CACnByB,UAAW,SAACpF,GACVmD,EAAQnD,EAAKA,KACf,EACAqF,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,GACH,GAEJ,EACAqF,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KAAKsF,MAC7BtL,MAAO,UACR,GACH,GAIR,GAAG,EACL,CAEA,IAKAqK,GAAkC1I,EAAAA,EAAAA,KAA1BC,EAAQyI,EAARzI,SAAqByI,EAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,mBAAqB,oBACxCrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACghC,EAAmB,CAClBz6B,WAAYA,EACZC,YAAaA,KAGfxG,EAAAA,EAAAA,KAACghC,EAAmB,CAClBz6B,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAGXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAI0C,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAMpC,UAAU,OAAMG,SAAC,qBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClC2D,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,2BAKLJ,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAMA,EAAK,GACX+yB,cA1Dc,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAuDQ+rB,aA3LoB,SAAC9H,GAC3B3nB,IACA+2B,EAAuBj6B,OAAO6qB,EAAgB,CAC5C9lB,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,oCACV,IACD3D,EAAiB,GAAI,CACnByB,UAAW,SAACpF,GACVmD,EAAQnD,EAAKA,KACf,EACAqF,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,GACH,IAEFwD,GACF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,IACDwD,GACF,IAEFA,GACF,EA2JQ62B,SAAUA,SAKpB,C,wTC9OaG,EAA6B,eAAA18B,GAAAiR,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOjT,GAAE,IAAAmT,EAAApP,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEE,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUiV,EAAAE,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,qBAADlU,OACjBD,EAAE,gBACvB,KAAD,EAFW,OAEXmT,EAAAE,EAAAK,KAFO3P,EAAIoP,EAAJpP,KAAIsP,EAAAM,OAAA,SAGL5P,GAAI,wBAAAsP,EAAAO,OAAA,GAAAX,EAAA,KACZ,gBAPyCY,GAAA,OAAAhS,EAAAmO,MAAA,KAAA8D,UAAA,KAQ7B0qB,EAA2B,eAAAzqB,GAAAjB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgB,EAAOhU,GAAE,IAAAiU,EAAAlQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAc,GAAA,cAAAA,EAAAZ,KAAAY,EAAAX,MAAA,OAEI,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU8V,EAAAX,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,qBAADlU,OACjBD,EAAE,gBACvB,KAAD,EAFW,OAEXiU,EAAAC,EAAAR,KAFO3P,EAAIkQ,EAAJlQ,KAAImQ,EAAAP,OAAA,SAGL5P,GAAI,wBAAAmQ,EAAAN,OAAA,GAAAI,EAAA,KACZ,gBAPuCS,GAAA,OAAAV,EAAA/D,MAAA,KAAA8D,UAAA,KAQ3B2qB,EAAmB,eAAApqB,GAAAvB,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsB,EAAOtU,GAAE,IAAAuU,EAAAxQ,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,OAEY,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUoW,EAAAjB,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,oCAADlU,OACFD,IACpC,KAAD,EAFW,OAEXuU,EAAAC,EAAAd,KAFO3P,EAAIwQ,EAAJxQ,KAAIyQ,EAAAb,OAAA,SAGL5P,GAAI,wBAAAyQ,EAAAZ,OAAA,GAAAU,EAAA,KACZ,gBAP+BY,GAAA,OAAAb,EAAArE,MAAA,KAAA8D,UAAA,KAQ1B4qB,EAAQvgC,aAAaC,QAAQ,kBACtBugC,EAAoB,eAAAjqB,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOzB,GAAO,IAAA0B,EAAA7Q,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OAEM,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAUyW,EAAAtB,KAAA,EAC/BlB,EAAAA,EAAcmB,KAAK,4BAADvT,OACXy+B,GAC5BxrB,GACA,KAAD,EAHW,OAGX0B,EAAAC,EAAAnB,KAHO3P,EAAI6Q,EAAJ7Q,KAAI8Q,EAAAlB,OAAA,SAIL5P,GAAI,wBAAA8Q,EAAAjB,OAAA,GAAAe,EAAA,KACZ,gBARgCe,GAAA,OAAAhB,EAAA1E,MAAA,KAAA8D,UAAA,KASpB8qB,EAAyB,eAAA9pB,GAAAhC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA+B,EAAO/U,GAAE,IAAAgV,EAAAjR,EAAA,OAAAgP,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,OAEM,OAAtDrB,EAAAA,EAAAA,GAAuB/T,aAAaC,QAAQ,UAAU6W,EAAA1B,KAAA,EAC/BlB,EAAAA,EAAc8B,IAAI,uBAADlU,OAAwBD,IAAM,KAAD,EAAzD,OAAyDgV,EAAAC,EAAAvB,KAA7D3P,EAAIiR,EAAJjR,KAAIkR,EAAAtB,OAAA,SACL5P,GAAI,wBAAAkR,EAAArB,OAAA,GAAAmB,EAAA,KACZ,gBALqCgB,GAAA,OAAAjB,EAAA9E,MAAA,KAAA8D,UAAA,K,sBCwItC,EA7I0B,SAAHjS,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YACvCG,GADwDpC,EAAJkC,MACRM,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAjD46B,EAAcv6B,EAAA,GAAEw6B,EAAiBx6B,EAAA,GAChCN,GAAaxE,EAAAA,EAAAA,KAAbwE,SAEFuD,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAgB,EAC1Ci5B,GAAY76B,EAAAA,EAAAA,aAAYq6B,GAAhCn6B,OACR3E,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAalB,IAAA4E,GAAwCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA7Cw6B,EAAYv6B,EAAA,GAAEw6B,EAAex6B,EAAA,GACpCE,GAAgDN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAxDu6B,EAAgBp6B,EAAA,GAAEq6B,EAAmBr6B,EAAA,GAmE5C,OAXAG,EAAAA,EAAAA,YAAU,WApEV,IAAwBjF,IAqEP7B,aAAaC,QAAQ,kBApEpC2gC,EAAQ/+B,EAAI,CACVmJ,UAAW,SAACpF,GACVwD,IACAu3B,EAAkB/6B,EAAKA,KACzB,EACAqF,QAAS,SAACC,GACR9B,GACF,GA8DJ,GAAG,CAACpJ,aAAaC,QAAQ,qBACzB6G,EAAAA,EAAAA,YAAU,WAER,IAAMm6B,EAAsBP,EACzBn+B,KAAI,SAAC2+B,EAASxxB,GAAK,OAAMwxB,EAAQC,SAAWzxB,EAAQ,IAAI,IACxDsC,QAAO,SAACtC,GAAK,OAAe,OAAVA,CAAc,IAEnCoxB,EAAgBG,EAClB,GAAG,CAACP,KAEFt+B,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACE6C,EAAAA,EAAAA,MAACg/B,EAAAA,GAAM,CAAA7hC,SAAA,EACLJ,EAAAA,EAAAA,KAACkiC,EAAAA,EAAU,CAAA9hC,UACT6C,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,EACRJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,SAAC,UACZJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,SAAC,mBACZJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,UACTJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,sBACHopB,MAAM,WACN0G,QAASoP,EACT54B,SAnDsB,WAElC64B,GAAoB,SAAC7rB,GACnB,IAAMssB,EAAsBtsB,EACxB,GACA0S,MAAM6Z,KAAK,CAAEjY,OAAQiX,EAAejX,SAAU,SAAC3B,EAAG6Z,GAAC,OAAKA,CAAC,IAE7D,OADAb,EAAgBW,IACRtsB,CACV,GACF,YA+CMhW,EAAAA,EAAAA,KAACyiC,EAAAA,GAAU,CAAAriC,SAERmhC,EAAen+B,KAAI,SAAC2+B,EAASxxB,GAAK,OACjCtN,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,EACRJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,SAAE2hC,EAAQngC,QACnB5B,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,SAAE2hC,EAAQj6B,SACnB9H,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,UAEPJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAE,eAAAC,OAAiB4N,EAAQ,GAC3BvH,SAAU,kBAvGG,SAACuH,GAC5B,IAAMoyB,EAAYjB,EAAa3yB,SAASwB,GAGlC+xB,GAAmB3vB,EAAAA,EAAAA,GAAO+uB,GAE5BiB,EAEFL,EAAoBM,OAAON,EAAoBO,QAAQtyB,GAAQ,GAG/D+xB,EAAoB9Z,KAAKjY,GAG3BoxB,EAAgBW,EAClB,CAwFgCQ,CAAqBvyB,EAAM,EAC3CiiB,QAASkP,EAAa3yB,SAASwB,SAdrBA,EAkBJ,UAKlBvQ,EAAAA,EAAAA,KAAA,UAAQgG,QAtEY,WACtB,IAAM+8B,EAAmBrB,EAAat+B,KAAI,SAACmN,GAAK,OAAKgxB,EAAehxB,EAAM,IAE1ErD,QAAQC,IAAI,iBAAkB41B,GAE9Bv8B,EAAYu8B,GAGZx8B,GACF,EA6DqCnG,SAAC,WAGxC,ECDA,EA5IkB,SAAHmE,GAA2C,IAArCgC,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAC/BG,GADgDpC,EAAJkC,MACAM,EAAAA,EAAAA,UAAS,KAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAjD46B,EAAcv6B,EAAA,GAAEw6B,EAAiBx6B,EAAA,GAChCN,GAAaxE,EAAAA,EAAAA,KAAbwE,SAEFuD,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3Ci5B,GAAY76B,EAAAA,EAAAA,aAAYs6B,GAAhCp6B,OACR3E,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAalB,IAAA4E,GAAwCH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA7Cw6B,EAAYv6B,EAAA,GAAEw6B,EAAex6B,EAAA,GACpCE,GAAgDN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAxDu6B,EAAgBp6B,EAAA,GAAEq6B,EAAmBr6B,EAAA,GAmE5C,OAXAG,EAAAA,EAAAA,YAAU,WArEV,IAAwBjF,IAsEP7B,aAAaC,QAAQ,kBArEpC2gC,EAAQ/+B,EAAI,CACVmJ,UAAW,SAACpF,GAEVwD,IACAu3B,EAAkB/6B,EAAKA,KACzB,EACAqF,QAAS,SAACC,GACR9B,GACF,GA8DJ,GAAG,CAACpJ,aAAaC,QAAQ,qBACzB6G,EAAAA,EAAAA,YAAU,WAER,IAAMm6B,EAAsBP,EACzBn+B,KAAI,SAAC2+B,EAASxxB,GAAK,OAAMwxB,EAAQC,SAAWzxB,EAAQ,IAAI,IACxDsC,QAAO,SAACtC,GAAK,OAAe,OAAVA,CAAc,IAEnCoxB,EAAgBG,EAClB,GAAG,CAACP,KAEFt+B,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACE6C,EAAAA,EAAAA,MAACg/B,EAAAA,GAAM,CAAA7hC,SAAA,EACLJ,EAAAA,EAAAA,KAACkiC,EAAAA,EAAU,CAAA9hC,UACT6C,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,EACRJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,SAAC,UACZJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,SAAC,kBACZJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAACC,MAAM,MAAOpiC,UAAS,oBAAA0C,OAC9BN,EAAW,kBAAoB,IAC9BjC,UACTJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAG,sBACHopB,MAAM,WACN0G,QAASoP,EACT54B,SAnDsB,WAElC64B,GAAoB,SAAC7rB,GACnB,IAAMssB,EAAsBtsB,EACxB,GACA0S,MAAM6Z,KAAK,CAAEjY,OAAQiX,EAAejX,SAAU,SAAC3B,EAAG6Z,GAAC,OAAKA,CAAC,IAE7D,OADAb,EAAgBW,IACRtsB,CACV,GACF,YA+CMhW,EAAAA,EAAAA,KAACyiC,EAAAA,GAAU,CAAAriC,SAERmhC,EAAen+B,KAAI,SAAC2+B,EAASxxB,GAAK,OACjCtN,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,EACRJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,SAAE2hC,EAAQngC,QACnB5B,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,SAAE2hC,EAAQ/5B,eACnBhI,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CAAEziC,UAAS,oBAAA0C,OAClBN,EAAW,kBAAoB,IAC9BjC,UAEPJ,EAAAA,EAAAA,KAACu2B,EAAAA,GAAU,CACT7zB,GAAE,eAAAC,OAAiB4N,EAAQ,GAC3BvH,SAAU,kBAvGG,SAACuH,GAC5B,IAAMoyB,EAAYjB,EAAa3yB,SAASwB,GAGlC+xB,GAAmB3vB,EAAAA,EAAAA,GAAO+uB,GAE5BiB,EAEFL,EAAoBM,OAAON,EAAoBO,QAAQtyB,GAAQ,GAG/D+xB,EAAoB9Z,KAAKjY,GAG3BoxB,EAAgBW,EAClB,CAwFgCQ,CAAqBvyB,EAAM,EAC3CiiB,QAASkP,EAAa3yB,SAASwB,SAdrBA,EAiBJ,UAKlBvQ,EAAAA,EAAAA,KAAA,UAAQgG,QArEY,WACtB,IAAM+8B,EAAmBrB,EAAat+B,KAAI,SAACmN,GAAK,OAAKgxB,EAAehxB,EAAM,IAE1ErD,QAAQC,IAAI,iBAAkB41B,GAE9Bv8B,EAAYu8B,GAGZx8B,GACF,EA4DqCnG,SAAC,WAGxC,EC8eA,EAnmB0B,WACxB,IAAAuG,GAAwCI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAC5CD,GADWM,EAAA,GAAiBA,EAAA,IACf9E,EAAAA,EAAAA,KAAbwE,UAEFuD,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EAC3Cw6B,GAAkBp8B,EAAAA,EAAAA,aAAYu6B,GAAtCr6B,OACQm8B,GAAwBr8B,EAAAA,EAAAA,aACtC06B,GADMx6B,OAGQo8B,GAAat8B,EAAAA,EAAAA,aAAYy6B,GAAjCv6B,OAER,SAASq8B,EAAuBzgC,GAG9BsgC,EAActgC,EAAI,CAChBmJ,UAAW,SAACpF,GAEVwD,IACAygB,GAAQjkB,EAAKA,MACb28B,GAAa38B,EAAKA,KACpB,EACAqF,QAAS,SAACC,GAER9B,GACF,GAEJ,CACA,IAAA/C,GAA8BH,EAAAA,EAAAA,UAAS,IAAGI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnCm8B,EAAOl8B,EAAA,GAAEm8B,EAAUn8B,EAAA,IAe1BQ,EAAAA,EAAAA,YAAU,WACR,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBACvC6wB,GAAqC,wBAAnBA,EAUnBA,GAAqC,wBAAnBA,IACpBwR,EAAuBxR,GAzBzBsR,EA0BsBtR,EA1BE,CACtB9lB,UAAW,SAACpF,GAEVwD,IACAq5B,EAAW78B,EAAKA,KAClB,EACAqF,QAAS,SAACC,GAER9B,GACF,KAMA0pB,GAAa,CACXmC,MAAM,EACNhoB,MAAO,QACPC,QAAS,uCACTtN,MAAO,WASb,GAAG,CAACI,aAAaC,QAAQ,oBAEzB,IAAAuG,GAAkCN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAA1C+wB,EAAS5wB,EAAA,GAAE6wB,EAAY7wB,EAAA,GAC9B+Z,GAAgCxa,EAAAA,EAAAA,UAAS,MAAKya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAvCpJ,EAAQqJ,EAAA,GAAE2W,EAAW3W,EAAA,GAC5BE,GAAwD3a,EAAAA,EAAAA,WAAS,GAAM4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAhE6hB,EAAoB5hB,EAAA,GAAE6hB,EAAuB7hB,EAAA,GACpD4J,GACExkB,EAAAA,EAAAA,WAAS,GAAMykB,GAAAvkB,EAAAA,EAAAA,GAAAskB,EAAA,GADVkY,EAA4BjY,EAAA,GAAEkY,EAA+BlY,EAAA,GAEpE2D,GAAkCpoB,EAAAA,EAAAA,WAAS,GAAKqoB,GAAAnoB,EAAAA,EAAAA,GAAAkoB,EAAA,GAAzCwU,EAASvU,EAAA,GAAEwU,EAAYxU,EAAA,GAC9BE,IAAsCvoB,EAAAA,EAAAA,WAAS,GAAMwoB,IAAAtoB,EAAAA,EAAAA,GAAAqoB,GAAA,GAI7CqE,IAJUpE,GAAA,GAAgBA,GAAA,IAITntB,EAAAA,EAAAA,KAAjBuxB,cAgBFkQ,KAdWv+B,EAAAA,EAAAA,MAcW,WAC1Bk+B,GAAwB,EAE1B,GAEMM,GAA8B,WAClCJ,GAAgC,EAElC,EASAjU,IAAwB1oB,EAAAA,EAAAA,UAAS,IAAG2oB,IAAAzoB,EAAAA,EAAAA,GAAAwoB,GAAA,GAA7BhpB,GAAIipB,GAAA,GACXE,IADoBF,GAAA,IACc3oB,EAAAA,EAAAA,WAAS,IAAM8oB,IAAA5oB,EAAAA,EAAAA,GAAA2oB,GAAA,GAA1CxoB,GAASyoB,GAAA,GAAE6B,GAAY7B,GAAA,GAC9BE,IAAgChpB,EAAAA,EAAAA,UAAS,CACvCe,MAAO,GACPi8B,iBAAkB,GAClBC,UAAW,GACXC,mBAAoB,KACpBjU,IAAA/oB,EAAAA,EAAAA,GAAA8oB,GAAA,GALKtoB,GAAQuoB,GAAA,GAAEtoB,GAAWsoB,GAAA,IAM5BroB,EAAAA,EAAAA,YAAU,WACJlB,IACFiB,IAAY,iBAAO,CACjBI,MAAOrB,GAAKqB,MACZi8B,iBAAkBt9B,GAAKs9B,iBACvBC,UAAWv9B,GAAKu9B,UAChBC,mBAAoBx9B,GAAKw9B,mBAC1B,GAEL,GAAG,CAACx9B,KACJ,IAAM6rB,GAAoB,SAACrpB,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAC3B9qB,IAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,IAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,IAE5C,EACMg1B,GAAoB,SAACj7B,GACzB,IAAAwsB,EAAuCxsB,EAAEC,OAAjCtH,EAAI6zB,EAAJ7zB,KAAMsN,EAAKumB,EAALvmB,MAAO1G,EAAIitB,EAAJjtB,KAAMgqB,EAAOiD,EAAPjD,QAC3B9qB,IAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,IAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,KAE1C,IAAMqoB,EAAatuB,EAAEC,OAAOgG,MAEtBsoB,EADa,kDACQlC,KAAKiC,GAEhC7F,GAAa8F,EACf,EAmBAtH,IAAwBnpB,EAAAA,EAAAA,UAAS,IAAGopB,IAAAlpB,EAAAA,EAAAA,GAAAipB,GAAA,GAA7BiU,GAAIhU,GAAA,GAAEzF,GAAOyF,GAAA,GACpBE,IAAkCtpB,EAAAA,EAAAA,UAAS,IAAGupB,IAAArpB,EAAAA,EAAAA,GAAAopB,GAAA,GAAvC+T,GAAS9T,GAAA,GAAE8S,GAAY9S,GAAA,GAO9B,SAAS9pB,GAAY6B,GACnB,IAAMg8B,EAAa,GAAA1hC,QAAAgQ,EAAAA,EAAAA,GAAOwxB,KAAIxxB,EAAAA,EAAAA,GAAKyxB,KACnC/7B,EAAME,iBAON26B,EAASmB,EAAe,CACtBx4B,UAAW,WAET5B,IAMAk5B,EAAuBtiC,aAAaC,QAAQ,kBAC9C,EACAgL,QAAS,SAACC,GACR9B,IACAk5B,EAAuBtiC,aAAaC,QAAQ,kBAC9C,GAmCJ,CAEA,IAAAgK,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAElB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACIujC,GAAaJ,IACbvjC,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,cAAgB,kBACnCrqB,SACE/N,EAAAA,EAAAA,KAACskC,EAAS,CACR/9B,WAAYs9B,GACZr9B,YAzEZ,SAAuByH,GACrBm1B,GAAan1B,EACf,EAwEYxH,KAAM0R,IAGVhK,OAAQo1B,EACRn1B,QAASy1B,MAIXF,GAAaF,IACbzjC,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,cAAgB,0BACnCrqB,SACE/N,EAAAA,EAAAA,KAACukC,EAAiB,CAChBh+B,WAAYu9B,GACZt9B,YA3FZ,SAAsByH,GACpByc,GAAQzc,EACV,EA0FYxH,KAAM0R,IAGVhK,OAAQs1B,EACRr1B,QAAS01B,MAgBb7gC,EAAAA,EAAAA,MAAA,OAAA7C,SAAA,EACEJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJhG,UAAU,OACVyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnC6D,KAAMs+B,EAAAA,EACNlkC,KAAK,SAEPN,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,2BAIhEJ,EAAAA,EAAAA,KAAA,OAAAI,UACE6C,EAAAA,EAAAA,MAACwhC,EAAAA,GAAU,CACTxkC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EACVC,cAAe,EAAEvkC,SAAA,EAEjB6C,EAAAA,EAAAA,MAAC2hC,EAAAA,GAAc,CACb3kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCwiC,QAAS,EAAEzkC,SAAA,EAEXJ,EAAAA,EAAAA,KAAC8kC,EAAAA,GAAgB,CACf7kC,UAAS,IAAA0C,OACPN,GACI,uBACA,sCAENnC,MAAO,CAAEkG,SAAU,OAAQ2+B,WAAY,cAAe3kC,SACvD,wBAGDJ,EAAAA,EAAAA,KAACglC,EAAAA,GAAc,CACb/kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBACnCjC,UAEH6C,EAAAA,EAAAA,MAAA,QAAMhD,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAA,CAC+B,2SAKhC,IAAI,oDAGoB,kEAM1FJ,EAAAA,EAAAA,KAAA,UACAiD,EAAAA,EAAAA,MAAC2hC,EAAAA,GAAc,CACb3kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EACVG,QAAS,EAAEzkC,SAAA,EAEXJ,EAAAA,EAAAA,KAAC8kC,EAAAA,GAAgB,CACf5kC,MAAO,CAAEkG,SAAU,OAAQ2+B,WAAY,cACvC9kC,UAAU,OACVyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SACzC,iBAGD6C,EAAAA,EAAAA,MAAC+hC,EAAAA,GAAc,CACb/kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EAAAtkC,SAAA,EAEVJ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,4IAK7DJ,EAAAA,EAAAA,KAAA,UACAA,EAAAA,EAAAA,KAACiiC,EAAAA,GAAM,CACLhiC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EACVO,UAAQ,EAAA7kC,UAER6C,EAAAA,EAAAA,MAACw/B,EAAAA,GAAU,CAAAriC,SAAA,EACT6C,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CACRliC,UAAS,IAAA0C,OACPN,GACI,uBACA,yBAENqiC,YAAU,EAAAtkC,SAAA,EAEVJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CACbxiC,MAAO,CAAE0O,MAAO,SAChB3O,UAAS,QAAA0C,OACPN,GACI,uBACA,yBAENqiC,YAAU,EACVhiC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,iBAAkBjC,SACtD,yBAGDJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CACbziC,UAAS,QAAA0C,OACPN,GACI,uBACA,yBAENK,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAEvCijC,GAAoB,UAGzBpgC,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CACRliC,UAAS,IAAA0C,OACPN,GACI,uBACA,yBACHjC,SAAA,EAEHJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CACbziC,UAAS,QAAA0C,OACPN,GACI,uBACA,yBAENK,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SACzC,qBAGDJ,EAAAA,EAAAA,KAAC0iC,EAAAA,GAAc,CACbziC,UAAS,QAAA0C,OACPN,GACI,uBACA,yBAENK,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SACzC,qBAQXJ,EAAAA,EAAAA,KAAA,UAEAiD,EAAAA,EAAAA,MAAC2hC,EAAAA,GAAc,CACb3kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EACVG,QAAS,EAAEzkC,SAAA,EAEXJ,EAAAA,EAAAA,KAAC8kC,EAAAA,GAAgB,CACf7kC,UAAU,OACVyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCnC,MAAO,CAAEkG,SAAU,OAAQ2+B,WAAY,cAAe3kC,SACvD,YAGDJ,EAAAA,EAAAA,KAACglC,EAAAA,GAAc,CACb/kC,UAAS,IAAA0C,OACPN,GAAW,uBAAyB,yBAEtCqiC,YAAU,EAAAtkC,UAEV6C,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,GACXgB,SAAU5B,GACVtG,MAAO,CAAE0wB,aAAc,QAASxwB,SAAA,EAGhC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,sBAAqBxI,SAC9B,mBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC3I,MAAO,CAAEC,OAAQ,QAASC,SAAA,EACrCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UAEdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAM0L,EAAAA,EAAajD,IAAI,YAEhC3O,EAAAA,EAAAA,KAAA,YACEC,UAAS,gBAAA0C,OACPN,GAAW,aAAe,eAE5BT,KAAK,QACLsN,MAAOi1B,GAAK/gC,KAAI,SAACkM,GAAI,OAAKA,EAAKxH,KAAK,IAAEo9B,KAAK,MAC3Cl8B,SAAUspB,GAMV6S,UAAQ,EACRn/B,QAhZe,WACjCqyB,GAAa,GACbF,EAAY,MACZuL,GAAgC,GAChCE,GAAa,EACf,EA4YoBviB,YAAY,sBACZ/X,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,8BAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CACV5I,UAAU,iBACVC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAE1BJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMk/B,EAAAA,EAAiBz2B,IAAI,qBAEpC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,OACLvI,UAAS,oBAAA0C,OACPN,GAAW,aAAe,IAE5BT,KAAK,mBACLsN,MAAOzH,GAASs8B,iBAChB/6B,SAAUspB,GACVjpB,gBAAgB,uCAChB3G,GAAG,qBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,kBAAiBxI,SAC1B,gBAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CACV5I,UAAU,iBACVC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAE1BJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMm/B,EAAAA,EAAe12B,IAAI,kBAalC3O,EAAAA,EAAAA,KAAA,YACEwI,KAAK,OACLvI,UAAS,gBAAA0C,OACPN,GAAW,aAAe,eAE5BT,KAAK,YACLsN,MAAOk1B,GACJhhC,KAAI,SAACkM,GAAI,OAAKA,EAAKtH,WAAW,IAC9Bk9B,KAAK,MAERl8B,SAAUk7B,GACVl+B,QA/dO,WACzBqyB,GAAa,GACbF,EAAY,MACZqL,GAAwB,GACxBI,GAAa,EACf,EA2doB,mBAAiB,4BAEjBlhC,GAAG,kBACH4G,UAAQ,WAKdrG,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACVJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IACnCuG,QAAQ,kBAAiBxI,SAC1B,2BAGD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CACV5I,UAAU,iBACVC,MAAO,CAAEC,OAAQ,QAASC,SAAA,EAE1BJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMm/B,EAAAA,EAAe12B,IAAI,aAElC3O,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CACTP,KAAK,SACLvI,UAAS,oBAAA0C,OACPN,GAAW,aAAe,IAE5BT,KAAK,qBACLsN,MAAOzH,GAASw8B,mBAChBj7B,SAAUk7B,GACV,mBAAiB,4BACjB76B,gBAAgB,oBAChB3G,GAAG,iBACH4G,UAAQ,WAMdtJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACVyC,GAAE,GAAAC,OAAKN,GAAW,cAAgB,IAClCmG,KAAK,SAAQpI,SAEZqG,GAAO,QAAU,kCAUtC,C,wFC5mBA,UA3BgB,WACd,OACEzG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,yDAAwDG,UACrEJ,EAAAA,EAAAA,KAACyC,EAAAA,GAAU,CAAArC,UACTJ,EAAAA,EAAAA,KAACiiB,EAAAA,GAAI,CAAChiB,UAAU,yBAAwBG,UACtC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,EAAEtI,SAAA,EACV6C,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,WAAUG,SAAA,EACvBJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,6BAA4BG,SAAC,SAC3C6C,EAAAA,EAAAA,MAAA,MAAIhD,UAAU,OAAMG,SAAA,CAAC,YAAU,IAAI,eACnCJ,EAAAA,EAAAA,KAAA,KAAGC,UAAU,mCAAkCG,SAAC,oDAIlD6C,EAAAA,EAAAA,MAAC4F,EAAAA,GAAW,CAAC5I,UAAU,gBAAeG,SAAA,EACpCJ,EAAAA,EAAAA,KAAC8I,EAAAA,GAAe,CAAA1I,UACdJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMo/B,EAAAA,OAEftlC,EAAAA,EAAAA,KAAC+I,EAAAA,GAAU,CAACP,KAAK,OAAO6Y,YAAY,+BACpCrhB,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,OAAML,SAAC,sBAOpC,C,mNCHMu3B,EAAU,CACd,CAAE7mB,IAAK,eAAgBgb,MAAO,aAC9B,CAAEhb,IAAK,aAAcgb,MAAO,eAC5B,CAAEhb,IAAK,qCAAsCgb,MAAO,mBACpD,CAAEhb,IAAK,qBAAsBgb,MAAO,gBA2XtC,UAzXuB,WAAO,IAADyZ,EACnB7+B,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EACrD9D,EAAkBC,KAAKC,MAAM/D,aAAaC,QAAQ,gBAClD+D,GAAyB9D,EAAAA,EAAAA,IAC7B2D,EACAI,EAAAA,GACAC,EAAAA,IAEIC,GAAqBjE,EAAAA,EAAAA,IACzB2D,EACAO,EAAAA,GACAF,EAAAA,IAEI2F,GAAuB3J,EAAAA,EAAAA,IAC3B2D,EACAQ,EAAAA,GACAH,EAAAA,IAEIygC,GAAmBzkC,EAAAA,EAAAA,IACvB2D,EACAS,EAAAA,GACAJ,EAAAA,IAEc0gC,GAAoB7+B,EAAAA,EAAAA,aAAYmV,EAAAA,IAAxCjV,OACQ4+B,GAAkB9+B,EAAAA,EAAAA,aAAYsU,EAAAA,IAAtCpU,OAaR,IAAgB6+B,GAAqB/+B,EAAAA,EAAAA,aAAYoV,EAAAA,IAAzClV,OACQ8+B,GAA2Bh/B,EAAAA,EAAAA,aACzCuV,EAAAA,IADMrV,OAIRH,GAAsCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA9C8G,EAAWzG,EAAA,GAAE0G,EAAc1G,EAAA,GAClCE,GAAgCH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAAnC0qB,EAAQzqB,EAAA,GAAE0qB,EAAW1qB,EAAA,GAC5BE,GAAkDN,EAAAA,EAAAA,WAAS,GAAMS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAvCw+B,GAAFr+B,EAAA,GAAsBA,EAAA,IAC9C+Z,GAA8Dxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAAtEukB,EAAsBtkB,EAAA,GAAEukB,EAA2BvkB,EAAA,GAC1DE,GAAgC3a,EAAAA,EAAAA,YAAU4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAAnCvJ,EAAQwJ,EAAA,GAAEwW,EAAWxW,EAAA,GAC5B4J,GAAkCxkB,EAAAA,EAAAA,WAAS,GAAMykB,GAAAvkB,EAAAA,EAAAA,GAAAskB,EAAA,GAA1C6M,EAAS5M,EAAA,GAAE6M,EAAY7M,EAAA,GACtBmI,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACFqS,GAAyBp/B,EAAAA,EAAAA,aAAYkV,EAAAA,IAC3CqT,GAAoCpoB,EAAAA,EAAAA,WAAS,GAAMqoB,IAAAnoB,EAAAA,EAAAA,GAAAkoB,EAAA,GAA5C8W,GAAU7W,GAAA,GAAE8W,GAAa9W,GAAA,GAChCE,IAAoCvoB,EAAAA,EAAAA,UAAS,IAAGwoB,IAAAtoB,EAAAA,EAAAA,GAAAqoB,GAAA,GAAzC6W,GAAU5W,GAAA,GAAE6W,GAAa7W,GAAA,GAChCE,IAAoC1oB,EAAAA,EAAAA,UAAS,IAAG2oB,IAAAzoB,EAAAA,EAAAA,GAAAwoB,GAAA,GAAzCnJ,GAAUoJ,GAAA,GAAEnJ,GAAamJ,GAAA,GAChCE,IAA0C7oB,EAAAA,EAAAA,WAAS,GAAK8oB,IAAA5oB,EAAAA,EAAAA,GAAA2oB,GAAA,GAAjDyW,GAAaxW,GAAA,GACpBE,IADsCF,GAAA,IACJ9oB,EAAAA,EAAAA,UAAS,KAAGipB,IAAA/oB,EAAAA,EAAAA,GAAA8oB,GAAA,GAAvCuW,GAAStW,GAAA,GAAEuW,GAAYvW,GAAA,GACxBzpB,GAAa,WACjBmH,GAAe,EACjB,EAiBA,IAAAwiB,IAAqCnpB,EAAAA,EAAAA,UAAS,IAAGopB,IAAAlpB,EAAAA,EAAAA,GAAAipB,GAAA,GAA1CsW,GAAUrW,GAAA,GAAEhlB,GAAcglB,GAAA,GACjB6B,IAAmBprB,EAAAA,EAAAA,aAAYqF,EAAAA,IAAvCnF,OAaR,IAAgB2/B,IAA2B7/B,EAAAA,EAAAA,aACzC+U,EAAAA,IADM7U,OAWR,IAAgB4/B,IAA2B9/B,EAAAA,EAAAA,aACzCgV,EAAAA,IADM9U,OAGR,SAAS6/B,GAAuB/6B,GAC9B86B,GAAuB96B,EAAY,CACjCC,UAAW,SAACpF,GACV8/B,GAAa9/B,EACf,EACAqF,QAAS,WAAO,GAEpB,CACA,IAAgB86B,IAA2BhgC,EAAAA,EAAAA,aACzCiV,EAAAA,IADM/U,OAGR,SAAS+/B,GAAuBj7B,GAC9Bg7B,GAAuBh7B,EAAY,CACjCC,UAAW,SAACpF,GACV8/B,GAAa9/B,EACf,EACAqF,QAAS,WAAO,GAEpB,CACA,IAAgB2lB,IAAe7qB,EAAAA,EAAAA,aAAY6U,EAAAA,IAAnC3U,OASR,IAAMmgB,GAAQpmB,aAAaC,QAAQ,kBAC7BgmC,GAAQjmC,aAAaC,QAAQ,cAC7BimC,GAAQlmC,aAAaC,QAAQ,gBA+BnC,SAAS0F,GAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFqN,EAAgBx3B,EAAS,CACvBpC,UAAW,SAACwiB,GACVxtB,aAAasO,QAAQ,WAAYkf,EAAI3rB,IACrC7B,aAAasO,QAAQ,WAAYkf,EAAIuD,UACrC3nB,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,qCACV,GACH,EACAjC,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuBloB,MAChCrN,MAAO,UACR,GACH,IAGFklC,EACE,CAAE13B,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,6BACV,GACH,EACAjC,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAAuC,EAAA,MAAO,CAClBJ,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVmqB,EAALnqB,EAAOkqB,gBAAQ,IAAAC,OAAV,EAALA,EAAiBzvB,KAC1BhG,MAAO,UACR,GACH,GAIR,GAAG,EACL,EAhFAkH,EAAAA,EAAAA,YAAU,WACJ9C,EACEoiB,IAAS6f,IAASC,GACpBF,GAAuBE,IACd9f,IAAS6f,GAClBH,GAAuBG,IACd7f,IA/Cbwf,GAgD2Bxf,GAhDQ,CACjCpb,UAAW,SAACpF,GACV8/B,GAAa9/B,EACf,EACAqF,QAAS,WAAO,IA8CP9G,EACL8hC,GACFH,GAAuBG,IACdA,IAASC,IAClBF,GAAuBE,IAEhBr8B,GACLo8B,IAASC,IACXF,GAAuBE,IAMvBliC,GAA0BG,GAAsB0F,EAhFtD,SAA0BkB,GAExBomB,GAAepmB,EAAY,CACzBC,UAAW,SAACpF,GACVwD,IACAkB,GAAe1E,EACjB,EACAqF,QAAS,SAACC,GACR9B,GACF,GAEJ,CAsEI0F,CAAiB9O,aAAaC,QAAQ,iBAC7B0kC,GAnIXE,EAAc,GAAI,CAChB75B,UAAW,SAACpF,GACVwD,IACAkB,GAAe1E,EACjB,EACAqF,QAAS,SAACC,GACR9B,GACF,GA+HJ,GAAG,CAACgd,GAAO6f,GAAOC,KAuHlB,IAAAj8B,IAAkC1I,EAAAA,EAAAA,KAA1BC,GAAQyI,GAARzI,SAAqByI,GAAXxI,YAElB,OACEtC,EAAAA,EAAAA,KAAAuC,EAAAA,SAAA,CAAAnC,SACG6lC,IACCjmC,EAAAA,EAAAA,KAAC+B,EAAAA,EAAqB,CACpBwE,WAAYA,GACZC,YAAaA,GACbC,KAAM0/B,GACN7f,WAAYA,MAGdrjB,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MAAOsqB,EAAY,uBAAyB,wBAC5CrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACgnC,EAAAA,EAAe,CACdzgC,WAAYA,GACZC,YAAaA,GACbygC,gCAjPwB,WACtClB,GAA4B,EAC9B,EAkPgBD,uBAAwBA,EACxBD,qBAAsBA,KAGxB7lC,EAAAA,EAAAA,KAACgnC,EAAAA,EAAe,CACdzgC,WAAYA,GACZC,YAAaA,GACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,MAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,GAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,EAAEtI,UACVJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,GAAW,eAAiB,IAAKjC,SAAC,yBAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,EAAGzI,UAAU,YAAWG,UAChC6C,EAAAA,EAAAA,MAAA,UACE3C,KAAK,KACLL,UAAS,gBAAA0C,OAAkBN,GAAW,cAAgB,IACtD,aAAW,aACX2G,SAjEhB,SAA4BC,GAE1B,IAAM8pB,EAAmB9pB,EAAEC,OAAOgG,MAET,kBAArB6jB,IACFlB,EAAYkB,GAtJdtB,GAuJ4BsB,EAvJL,CACrBlnB,UAAW,SAACpF,GACV8/B,GAAa9/B,EACf,EACAqF,QAAS,WAAO,IAuJpB,EAwDgBoD,MAAO0iB,EAASxxB,SAAA,EAEhBJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,qBACG,OAAVomC,SAAU,IAAVA,IAAgB,QAANjB,EAAViB,GAAY//B,YAAI,IAAA8+B,OAAN,EAAVA,EAAkBniC,KAAI,SAACkM,GACtB,OACEtP,EAAAA,EAAAA,KAAA,UAA4BkP,MAAOI,EAAKkM,SAASpb,SAC9CkP,EAAK2T,YADK3T,EAAKkM,SAItB,UAGJxb,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACC,GAAI,EAAEtI,UACVJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,+BAKLJ,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAe,OAAT6/B,SAAS,IAATA,QAAS,EAATA,GAAW7/B,KACjBgzB,aAhJgB,SAACyN,GAC3Bl9B,IACAg8B,EAAuBl/B,OAAOogC,EAAgB,CAC5Cr7B,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,qCACV,IACD9D,GAEF,EACA6B,QAAS,SAACC,GAER4nB,GAAa,eAAAwT,EAAA,MAAO,CAClBrR,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVo7B,EAALp7B,EAAOkqB,gBAAQ,IAAAkR,OAAV,EAALA,EAAiB1gC,KAC3B,IACDwD,GAEF,IAEFA,GACF,EAyHYuvB,cA9SU,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EA2SY05B,WAxHO,SAAC93B,GAClBzO,aAAasO,QAAQ,WAAYG,EAAK2M,UAEtCsK,GAAcjX,GAEds2B,EAAuBt2B,EAAK2M,SAAU,CACpCpQ,UAAW,SAACwiB,GAEVpkB,IACAm8B,GAAc/X,EAAI5nB,MAClBy/B,IAAc,EAChB,EACAp6B,QAAS,SAACC,GACR9B,IACA0pB,GAAa,eAAA0T,EAAAC,EAAA,MAAO,CAClBxR,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVs7B,EAALt7B,EAAOkqB,gBAAQ,IAAAoR,GAAM,QAANC,EAAfD,EAAiB5gC,YAAI,IAAA6gC,OAAhB,EAALA,EAAuBx5B,MAChCrN,MAAO,UACR,GACH,GAEJ,EAmGY4lC,cAAeA,YAO7B,C,uPCzLA,EAnN8B,SAAH9hC,GAA2C,IAADgtB,EAAAuL,EAApCv2B,EAAUhC,EAAVgC,WAAYC,EAAWjC,EAAXiC,YAAaC,EAAIlC,EAAJkC,KAChDC,GAAaxE,EAAAA,EAAAA,KAAbwE,SAERC,GAAkCI,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAA1CS,EAASJ,EAAA,GAAE0qB,EAAY1qB,EAAA,GACxBg2B,GAAmBnzB,EAAAA,EAAAA,IAAa,SAACC,GAAK,OAAKA,EAAMrD,IAAI,IAC3DS,GAA0BH,EAAAA,EAAAA,YAAUI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA7B+f,EAAK9f,EAAA,GAAEogC,EAAQpgC,EAAA,GACtBE,GAAgCN,EAAAA,EAAAA,UAAS,CAEvCwI,WAAY0X,EACZW,aAAc,KACdpgB,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAJKI,EAAQD,EAAA,GAAEE,EAAWF,EAAA,IAK5BG,EAAAA,EAAAA,YAAU,WAEJlB,GACFiB,EAAY,CACVkgB,aAAcnhB,EAAKmhB,aACnBllB,GAAI8Z,OAAO/V,EAAKwV,UAChB1M,WAAYiN,OAAO/V,EAAK8I,aAG9B,GAAG,CAAC9I,IACJ,IAwDAsrB,GACEnrB,EAAAA,EAAAA,aAAYyW,EAAAA,IADEqJ,EAAiBqL,EAAzBjrB,OAAiCwf,EAAUyL,EAAhBtrB,MAEnCkB,EAAAA,EAAAA,YAAU,WACR+e,EAAkB,GAAI,CACpB7a,UAAW,SAACpF,GAAU,EACtBqF,QAAS,SAACC,GACRmB,QAAQC,IAAIpB,EACd,GAEJ,GAAG,IACH,IAAA5J,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAACiF,EAAAA,GAAK,CACJjI,UAAU,gCACVkI,YAAU,EACVf,UAAWA,EACXgB,SAnCiB,SAACC,GACpB,IAAMoqB,EAAOpqB,EAAMC,cACnBD,EAAME,kBACuB,IAAzBkqB,EAAKE,iBACPtqB,EAAMuqB,kBAGRlB,GAAa,IAGgB,IAAzBe,EAAKE,kBAnEcjsB,EAAS,CAAE8B,KAAM,gBAsEtChC,EAAYiB,GACZY,EAAME,iBACNhC,IAEJ,EAkB2BnG,SAAA,CAyBrBqG,EA6BE,MA5BFxD,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,qBAAoBxI,SAC7B,gBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,mBAAiB,6BACjBxpB,gBAAgB,kCAChBzH,KAAK,eACL3B,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtD6M,MAAOzH,EAASmgB,aAChBllB,GAAG,qBACHsG,SAlHgB,SAACC,GACzB,IAAAspB,EAAuCtpB,EAAEC,OAAjCtH,EAAI2wB,EAAJ3wB,KAAMsN,EAAKqjB,EAALrjB,MAAO1G,EAAI+pB,EAAJ/pB,KAAMgqB,EAAOD,EAAPC,QAC3B9qB,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IAAA0mB,EAAAA,EAAAA,GAAA,GACVvsB,EAAgB,aAAT4G,EAAsBgqB,EAAUtjB,IAE5C,EA6GU9O,SAAA,EAEAJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,mBACG,OAAVkmB,QAAU,IAAVA,GAAgB,QAANiL,EAAVjL,EAAY7f,YAAI,IAAA8qB,OAAN,EAAVA,EAAkBnuB,KAAI,SAACkM,EAAMiB,GAC5B,OACEvQ,EAAAA,EAAAA,KAAA,UAAQkP,MAAOI,EAAKlP,SACjBkP,GADuBiB,EAI9B,WAKNtN,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACC,GAAI,GAAGtI,SAAA,EAEXJ,EAAAA,EAAAA,KAAC2I,EAAAA,GAAU,CACTjG,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IACnCuG,QAAQ,yBAAwBxI,SACjC,mBAGD6C,EAAAA,EAAAA,MAAC4vB,EAAAA,GAAW,CACV,mBAAiB,6BACjB5yB,UAAS,gBAAA0C,OAAkBN,EAAW,cAAgB,IACtDT,KAAK,eACLsN,MAAOzH,EAAS8H,WAChBlG,gBAAgB,qCAChB3G,GAAG,yBACHsG,SAlHgB,SAACC,GACvB,IAAMu+B,EAAgBxU,SAAS/pB,EAAEC,OAAOgG,MAAO,KAAO,EACtDxH,GAAW0B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACR3B,GAAQ,IACX8H,WAAYi4B,KAEdD,EAASC,EACX,EA4GQl+B,UAAQ,EAAAlJ,SAAA,EAERJ,EAAAA,EAAAA,KAAA,UAAAI,SAAQ,wBACY,QADgB08B,EACnCE,EAAiB,UAAE,IAAAF,OAAA,EAAnBA,EAAqB15B,KAAI,SAACkM,GACzB,OACEtP,EAAAA,EAAAA,KAAA,UAA8BkP,MAAOI,EAAKC,WAAWnP,SAClDkP,EAAKE,cADKF,EAAKC,WAItB,WAKJvP,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAACc,GAAI,GAAGnJ,UACXJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CAAC/I,MAAM,UAAU+H,KAAK,SAAQpI,SACnCqG,EAAO,2BAA6B,gCAK/C,E,WC5LMkxB,EAAU,CACd,CAAE7mB,IAAK,eAAgBgb,MAAO,iBAC9B,CAAEhb,IAAK,yBAA0Bgb,MAAO,0BA0Q1C,EAvQ2B,WACzB,IAAMzmB,GAAWC,EAAAA,EAAAA,MACjBqB,GAAkCI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAAvC2/B,EAASt/B,EAAA,GAAEygC,EAAYzgC,EAAA,GAOdqW,GAAkBzW,EAAAA,EAAAA,aAAYwW,EAAAA,IAAtCtW,OAaR,IAAgB4gC,GAAyB9gC,EAAAA,EAAAA,aACvC0W,EAAAA,IADMxW,OAeR,IAAgB6gC,GAA0B/gC,EAAAA,EAAAA,aAAY4W,EAAAA,IAA9C1W,OACQ8gC,GAA2BhhC,EAAAA,EAAAA,aACzC6W,EAAAA,IADM3W,OAGRI,GAAsCH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA9CuG,EAAWtG,EAAA,GAAEuG,EAAcvG,EAAA,GAClCE,GAAgCN,EAAAA,EAAAA,YAAUS,GAAAP,EAAAA,EAAAA,GAAAI,EAAA,GAAnC8Q,EAAQ3Q,EAAA,GAAE2wB,EAAW3wB,EAAA,GAC5B+Z,GAAkCxa,EAAAA,EAAAA,WAAS,GAAMya,GAAAva,EAAAA,EAAAA,GAAAsa,EAAA,GAA1C6W,EAAS5W,EAAA,GAAE6W,EAAY7W,EAAA,GACtB9a,GAAaxE,EAAAA,EAAAA,KAAbwE,SACFsD,EAAa,WAAH,OAAStD,EAAS,CAAE8B,KAAM,eAAiB,EACrDyB,EAAa,WAAH,OAASvD,EAAS,CAAE8B,KAAM,eAAiB,EACnDmrB,GAAiBvxB,EAAAA,EAAAA,KAAjBuxB,aACFkU,GAA+BjhC,EAAAA,EAAAA,aAAY2W,EAAAA,IACjDmE,GAA6C3a,EAAAA,EAAAA,WAAS,GAAK4a,GAAA1a,EAAAA,EAAAA,GAAAya,EAAA,GAApDomB,EAAenmB,EAAA,GAMhBpb,GANmCob,EAAA,GAC3B9gB,aAAaC,QAAQ,kBAKhB,WACjB4M,GAAe,EACjB,GAsEA,SAASlH,EAAYyH,GACnBjE,IACAokB,YAAW,WACLgK,EACFuP,EAAsB15B,EAAS,CAC7BpC,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,2CACV,GACH,EACAjC,QAAS,SAACC,GAEW,oBAAfA,EAAMuB,OACRzM,aAAawF,WAAW,SACxBxF,aAAawF,WAAW,kBACxBxF,aAAawF,WAAW,cACxBxF,aAAawF,WAAW,gBACxBhB,EAAS,WAEX4E,IAEA0pB,GAAa,eAAAoC,EAAAC,EAAA,MAAO,CAClBF,MAAM,EACNhoB,MAAO,QACPC,QAAc,OAALhC,QAAK,IAALA,GAAe,QAAVgqB,EAALhqB,EAAOkqB,gBAAQ,IAAAF,GAAM,QAANC,EAAfD,EAAiBtvB,YAAI,IAAAuvB,OAAhB,EAALA,EAAuB+R,QAChCtnC,MAAO,UACR,GACH,IAGFmnC,EACE,CAAE35B,QAAAA,EAASkK,SAAAA,GACX,CACEtM,UAAW,WACT5B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,0CACV,GAaH,EACAjC,QAAS,SAACC,GACR9B,IACA0pB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACxBhG,MAAO,UACR,GACH,GAIR,GAAG,EACL,EAhFAkH,EAAAA,EAAAA,YAAU,WACN,IAAMgqB,EAAiB9wB,aAAaC,QAAQ,kBAE1C6wB,QAAqCpkB,IAAnBokB,GAAmD,wBAAnBA,EA5FtD+V,EA6Fa/V,EA7FoB,CAC/B9lB,UAAW,SAACpF,GAEVghC,EAAahhC,EAAKA,KACpB,EACAqF,QAAS,SAACC,GACR9B,GACF,IAtBFoT,EAAc,GAAI,CAChBxR,UAAW,SAACpF,GAEVghC,EAAahhC,EACf,EACAqF,QAAS,SAACC,GACR9B,GACF,GAyGJ,GAAG,CAACpJ,aAAaC,QAAQ,oBAyEzB,IAAAgK,GAAkC1I,EAAAA,EAAAA,KAA1BC,EAAQyI,EAARzI,SAAqByI,EAAXxI,YAClB,OACEW,EAAAA,EAAAA,MAAAV,EAAAA,SAAA,CAAAnC,SAAA,EACEJ,EAAAA,EAAAA,KAAC6N,EAAAA,EAAY,CACXC,MACEsqB,EAAY,0BAA4B,2BAE1CrqB,QACEqqB,GACEp4B,EAAAA,EAAAA,KAACgoC,EAAqB,CACpBzhC,WAAYA,EACZC,YAAaA,KAGfxG,EAAAA,EAAAA,KAACgoC,EAAqB,CACpBzhC,WAAYA,EACZC,YAAaA,EACbC,KAAM0R,IAIZhK,OAAQV,EACRW,QAAS7H,KAEXtD,EAAAA,EAAAA,MAAC4lB,EAAAA,GAAK,CACJ5oB,UAAS,6BAAA0C,OACPN,EAAW,uBAAyB,IACnCjC,SAAA,EAEH6C,EAAAA,EAAAA,MAACgf,EAAAA,GAAI,CAAA7hB,SAAA,EACHJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAAA,MAAIC,UAAU,OAAOyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAC,4BAIhEJ,EAAAA,EAAAA,KAACyI,EAAAA,GAAI,CAAArI,UACHJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNiC,GAAE,GAAAC,OAAKN,EAAW,cAAgB,IAClCpC,UAAU,YACV+F,QAAS,WACPqyB,GAAa,GACbF,EAAY,MACZzqB,GAAe,EACjB,EAAEtN,SACH,iCAKJkmC,GACCtmC,EAAAA,EAAAA,KAACu5B,EAAAA,EAAY,CACX5B,QAASA,EACTlxB,KAAM6/B,EACN7M,aA5LwB,SAACwO,GACjCj+B,IACA69B,EAA6B/gC,OAAOmhC,EAAsB,CACxDp8B,UAAW,WACT8nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,UACPC,QAAS,2CACV,IACD9D,GAEF,EACA6B,QAAS,SAACC,GACR4nB,GAAa,iBAAO,CAClBmC,MAAM,EACNhoB,MAAO,QACPC,QAAShC,EAAMkqB,SAASxvB,KACzB,IACDwD,GACF,IAEFA,GACF,EAuKUuvB,cAtKY,SAAC/yB,GACrB4xB,GAAa,GACbF,EAAY1xB,GACZiH,GAAe,EACjB,EAmKUo6B,gBAAiBA,KAGnB9nC,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,SAKvB,C,0KCzRa0lC,EAAc,SAAH3jC,GAAgE,IAA1DuJ,EAAKvJ,EAALuJ,MAAOC,EAAOxJ,EAAPwJ,QAASK,EAAO7J,EAAP6J,QAASD,EAAM5J,EAAN4J,OAAQg6B,EAAa5jC,EAAb4jC,cAAezlC,EAAE6B,EAAF7B,GAC5EP,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAClB,OACEW,EAAAA,EAAAA,MAACmR,EAAAA,GAAM,CAAC1R,GAAG,eAAe0O,QAASjD,EAAQC,QAASA,EAAQhO,SAAA,EAC1DJ,EAAAA,EAAAA,KAACqU,EAAAA,GAAY,CAACC,aAAW,EAACrU,UAAS,eAAA0C,OAAiBN,EAAW,aAAe,IAAKjC,UACjFJ,EAAAA,EAAAA,KAACuU,EAAAA,GAAW,CAAC7R,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAE0N,OAEzD7K,EAAAA,EAAAA,MAACuR,EAAAA,GAAU,CAACvU,UAAS,oBAAA0C,OAAsBN,EAAW,aAAe,IAAKjC,SAAA,CACvE2N,GACD9K,EAAAA,EAAAA,MAAA,MAAIhD,UAAU,YAAYyC,GAAE,GAAAC,OAAKN,EAAW,eAAiB,IAAKjC,SAAA,CAAC,mCAChC,QAGnC6C,EAAAA,EAAAA,MAACwF,EAAAA,GAAI,CAACc,GAAI,GAAItJ,UAAS,eAAA0C,OAAiBN,EAAW,aAAe,IAAKjC,SAAA,EACrEJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,SACNR,UAAU,iBACV+F,QAAS,WACPmiC,EAAczlC,GACd0L,GACF,EAAEhO,SACH,YAGDJ,EAAAA,EAAAA,KAACwJ,EAAAA,GAAO,CACN/I,MAAM,UACNR,UAAU,YACV+F,QAAS,WACPoI,GACF,EAAEhO,SACH,mBAOX,EC0KA,EA3LqB,SAAHmE,GAoBX,IAAD6jC,EAAA7jC,EAnBJozB,QAAAA,OAAO,IAAAyQ,EAAG,GAAEA,EAAAC,EAAA9jC,EACZkC,KAAAA,OAAI,IAAA4hC,EAAG,GAAEA,EACT7O,EAAaj1B,EAAbi1B,cACAC,EAAYl1B,EAAZk1B,aACA2N,EAAU7iC,EAAV6iC,WACAlJ,EAAQ35B,EAAR25B,SACAV,EAAQj5B,EAARi5B,SACAqB,EAAQt6B,EAARs6B,SACAiC,EAAQv8B,EAARu8B,SACAwH,EAAe/jC,EAAf+jC,gBACAlM,EAAa73B,EAAb63B,cACAmM,EAAShkC,EAATgkC,UACA5N,EAAap2B,EAAbo2B,cACArC,EAAa/zB,EAAb+zB,cACA2H,EAAY17B,EAAZ07B,aACAoG,EAAa9hC,EAAb8hC,cACAyB,EAAevjC,EAAfujC,gBACAU,EAAYjkC,EAAZikC,aACAC,EAAelkC,EAAfkkC,gBAEMC,EAAa,SAACp5B,EAAMwB,GAExB,OADaA,EAAI8O,MAAM,KACX+oB,QAAO,SAACC,EAAKC,GAAU,OAAQ,OAAHD,QAAG,IAAHA,OAAG,EAAHA,EAAMC,EAAW,GAAEv5B,EAC7D,EACA3I,GAAgCI,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAN,EAAA,GAArCmiC,EAAQ9hC,EAAA,GAAE+hC,EAAW/hC,EAAA,GAC5BE,GAAkDH,EAAAA,EAAAA,WAAS,GAAMI,GAAAF,EAAAA,EAAAA,GAAAC,EAAA,GAA1D8hC,EAAiB7hC,EAAA,GAAE8hC,EAAoB9hC,EAAA,GAO9ChF,GAAkCC,EAAAA,EAAAA,KAA1BC,EAAQF,EAARE,SAAqBF,EAAXG,YAElB,OACEW,EAAAA,EAAAA,MAAA,OAAKhD,UAAU,qBAAoBG,SAAA,EACjCJ,EAAAA,EAAAA,KAACkoC,EAAW,CACVp6B,MAAM,SACNC,QAAS,GACTo6B,cAAe1O,EACftrB,OAAQ66B,EACR56B,QAZmB,WACvB66B,GAAqB,EACvB,EAWMvmC,GAAIomC,KAEN7lC,EAAAA,EAAAA,MAACg/B,EAAAA,GAAM,CAACiH,OAAK,EAACjpC,UAAU,eAAcG,SAAA,EACpCJ,EAAAA,EAAAA,KAACkiC,EAAAA,EAAU,CAAA9hC,UACT6C,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,CACPu3B,EAAQv0B,KAAI,SAAC+lC,GAAM,OAClBnpC,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CACfniC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,SAGF+oC,EAAOrd,OAFHqd,EAAOr4B,IAGK,IAEpBs2B,GACCpnC,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CAEfniC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,SACJ,eAJK,cAOJ,MACJJ,EAAAA,EAAAA,KAACoiC,EAAAA,GAAgB,CACfniC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,SAEJ,WADK,iBAMV6C,EAAAA,EAAAA,MAACw/B,EAAAA,GAAU,CAAAriC,SAAA,EACJ,OAAJqG,QAAI,IAAJA,OAAI,EAAJA,EAAM6jB,QAAS,IACV,OAAJ7jB,QAAI,IAAJA,OAAI,EAAJA,EAAMrD,KAAI,SAACkM,EAAMiB,GAAK,OACpBtN,EAAAA,EAAAA,MAACk/B,EAAAA,GAAS,CAAA/hC,SAAA,CACPu3B,EAAQv0B,KAAI,SAAC+lC,GAAM,OAClBnpC,EAAAA,EAAAA,KAAA,MAEEC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,SAEF+oC,EAAOr4B,IAAI/B,SAAS,KACjB25B,EAAWp5B,EAAM65B,EAAOr4B,KACxBxB,EAAK65B,EAAOr4B,MAPXq4B,EAAOr4B,IAQT,IAENs2B,GACCpnC,EAAAA,EAAAA,KAAA,MAEEC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,UAEHJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CACJ/F,MAAO,CACL+oB,OAAQ,UACRra,MAAO,OACPzO,OAAQ,QAEVM,MAAM,YACNyF,KAAMkjC,EAAAA,EACNpjC,QAAS,kBAAMohC,EAAW93B,EAAK,KAb7B,cAgBJ,MACJtP,EAAAA,EAAAA,KAAA,MAEEC,UAAS,oBAAA0C,OACPN,EAAW,kBAAoB,IAC9BjC,UAEH6C,EAAAA,EAAAA,MAACsC,EAAAA,GAAS,CAAAnF,SAAA,EACRJ,EAAAA,EAAAA,KAACyF,EAAAA,GAAe,CAAChF,MAAM,YAAWL,UAChCJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMC,EAAAA,OAEflD,EAAAA,EAAAA,MAAC6C,EAAAA,GAAa,CACZ7F,UAAS,SAAA0C,OAAWN,EAAW,gBAAkB,IAAKjC,SAAA,CAErDooC,GACCvlC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAAS,kBAAMyiC,EAAgBn5B,EAAK,EAAClP,SAAA,EAClDJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMmjC,EAAAA,EAAWppC,UAAU,SAChB,aAAjBuoC,EAA8B,WAAa,YAE5C,MAEJvlC,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CAACC,QAAS,kBAAMwzB,EAAclqB,EAAK,EAAClP,SAAA,EAChDJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMmjC,EAAAA,EAAWppC,UAAU,SAAS,WAG7CgD,EAAAA,EAAAA,MAAC8C,EAAAA,GAAa,CACZC,QAAS,WACH86B,EACFiI,EAAYz5B,EAAKC,YACRsvB,EACTkK,EAAYz5B,EAAKI,YACR8tB,EACTuL,EAAYz5B,EAAKM,cACRsuB,EACT6K,EAAYz5B,EAAKkM,UACR8sB,EACTS,EAAYz5B,EAAK2M,UAEjBmgB,GACA9D,GACAqC,GACA4N,EAEAQ,EAAYz5B,GACH2wB,EACT8I,EAAYz5B,EAAKkwB,YACR6G,GAEAyB,IADTiB,EAAYz5B,EAAK2M,UAnIzCgtB,GAAqB,EAwID,EAAE7oC,SAAA,EAEFJ,EAAAA,EAAAA,KAACiG,EAAAA,EAAK,CAACC,KAAMojC,EAAAA,EAAUrpC,UAAU,SAAS,mBApD5C,aAjCQsQ,EA2FJ,KAEE,KAAb,OAAJ9J,QAAI,IAAJA,OAAI,EAAJA,EAAM6jB,UACLtqB,EAAAA,EAAAA,KAACmiC,EAAAA,GAAS,CAAA/hC,UACRJ,EAAAA,EAAAA,KAAA,MAAIqqB,QAASsN,EAAQrN,OAAS,EAAGrqB,UAAU,cAAaG,UACtDJ,EAAAA,EAAAA,KAAA,KAAAI,SAAG,qBAFQ,kBAU3B,C","sources":["components/global-loader/GlobalLoader.js","constants/CustomRoute.js","routes.js","components/AppContent.js","components/header/AppHeaderDropdown.js","views/forms/settings-form/Settings.js","components/AppHeader.js","components/AppSidebarNav.js","_nav.js","components/AppSidebar.js","components/DocsExample.js","components/modal/GenericModal.js","constants/constants.js","constants/permissionContant.js","hooks/auth.js","hooks/axios.js","hooks/useAuth.js","hooks/useDepartments.js","hooks/useDevices.js","hooks/useDevicesSensors.js","hooks/useFacilities.js","hooks/useOrganizationDevices.js","hooks/useUsers.js","store/state.js","views/dashboard/Components/BlueGraph/BlueGraph.jsx","views/dashboard/Components/GraphPage.js","assets/images/battery.svg","views/dashboard/Components/Guage.js","hooks/useSensors.js","views/dashboard/Components/Donut.js","views/dashboard/Components/ReportTable/ReportTable.jsx","views/dashboard/Components/TableCard.js","views/dashboard/Counter_Comp.js","views/dashboard/ConditionSummary/ConditionSummary.js","views/dashboard/Dashboard.js","views/forms/add-device-sensors/add-device-sensor.js","views/forms/add-sensor-configration/add-sensor-configration.js","hooks/useDepartmentstaff.js","views/forms/add-department-staff-form/add-department-staff.js","views/pages/Staff/Department/DepartmentStaff.js","views/forms/add-device-staff-form/add-device-staff.js","hooks/useDeviceStaff.js","views/pages/Staff/Devices/DevicesStaff.js","hooks/useFacilitiesStaff.js","views/forms/add-facility-staff-form/add-facility-staff.js","views/pages/Staff/Facility/FacilitySatff.js","views/forms/add-department-form/add-department-form.js","views/pages/admin/department/Department.js","views/forms/add-device-form/add-device-form.js","views/pages/admin/devices/Devices.js","views/forms/add-facility-from/add-facility-from.js","views/pages/admin/facilities/Facilities.js","views/forms/gateway/GatewayForm.js","hooks/usegateway.js","views/pages/admin/gateway/Gateway.js","views/forms/add-organization-form/AddOrganizationForm.js","views/pages/admin/organization/Organization.js","hooks/useNotifications.js","views/forms/Notification-alarm/NotificationAlarm.js","views/forms/smsnumber/SmsNumber.js","views/pages/notification-setup/Notification-Setup.js","views/pages/page404/Page404.js","views/pages/sensors/devices-sensors/DevicesSensors.js","views/forms/add-organization-sensor/add-organization-sensor.js","views/pages/sensors/organization-sensors/OrganizationSensor.js","components/modal/DeleteModal.js","views/table/GenericTable.js"],"sourcesContent":["import React from 'react'\nimport { ClipLoader } from 'react-spinners'\nimport { useState } from 'react'\nimport { SpinnerInfinity } from 'spinners-react'\n\nconst GlobalLoader = () => {\n  return (\n    <div\n      className=\"d-flex w-100 justify-content-center align-items-center\"\n      style={{ height: '100vh' }}\n    >\n      <SpinnerInfinity\n        size={100}\n        thickness={120}\n        speed={100}\n        color=\"#0000FF\"\n        secondaryColor=\"rgba(0, 0, 0, 0.44)\"\n      />\n    </div>\n  )\n}\n\nexport default GlobalLoader\n","import React from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { AppHeader } from 'src/components'\nimport { hasPermissionToActionAccess } from './permissionContant'\n\nconst CustomRoute = (props) => {\n  const permissions = localStorage.getItem('permissions')\n  // eslint-disable-next-line react/prop-types\n  const status = hasPermissionToActionAccess(permissions, props.pageAccess, props.pageAction)\n\n  if (status) {\n    return <props.component />\n  } else {\n    return <Navigate to=\"/error\" replace />\n  }\n}\n\nexport default CustomRoute\n","import React from 'react'\nimport AddSensorConfigration from './views/forms/add-sensor-configration/add-sensor-configration'\nimport CustomRoute from './constants/CustomRoute'\nimport Page404 from './views/pages/page404/Page404'\n\nconst Dashboard = React.lazy(() => import('./views/dashboard/Dashboard'))\nconst Accordion = React.lazy(() => import('./views/base/accordion/Accordion'))\nconst Breadcrumbs = React.lazy(() => import('./views/base/breadcrumbs/Breadcrumbs'))\nconst Organization = React.lazy(() => import('./views/pages/admin/organization/Organization'))\nconst Department = React.lazy(() => import('./views/pages/admin/department/Department'))\nconst Devices = React.lazy(() => import('./views/pages/admin/devices/Devices'))\nconst Facilities = React.lazy(() => import('./views/pages/admin/facilities/Facilities'))\nconst UserManagement = React.lazy(() => import('./views/pages/management/UserManagement'))\nconst DevicesSensors = React.lazy(() =>\n  import('./views/pages/sensors/devices-sensors/DevicesSensors'),\n)\nconst OrganizationSensors = React.lazy(() =>\n  import('./views/pages/sensors/organization-sensors/OrganizationSensor'),\n)\nconst FacilityStaff = React.lazy(() => import('./views/pages/Staff/Facility/FacilitySatff'))\nconst DepartmnentStaff = React.lazy(() => import('./views/pages/Staff/Department/DepartmentStaff'))\nconst DeviceStaff = React.lazy(() => import('./views/pages/Staff/Devices/DevicesStaff'))\nconst Users = React.lazy(() => import('./views/pages/Staff/Users/user'))\nconst SensorGraph = React.lazy(() => import('./views/dashboard/Components/GraphPage'))\nconst GateWay = React.lazy(() => import('./views/pages/admin/gateway/Gateway'))\nconst NotificationAlerts = React.lazy(() =>\n  import('./views/pages/notification-setup/Notification-Setup'),\n)\nconst AlramThreshold = React.lazy(() => import('./views/pages/alarm-threshold/Alram-threshold'))\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  // {\n  //   path: '/dashboard',\n  //   name: 'Dashboard',\n  //   element: Dashboard,\n  // },\n  // {\n  //   path: '/organizations',\n  //   name: 'Organization',\n  //   element: Organization,\n  // },\n  // {\n  //   path: '/facilities',\n  //   name: 'Facilities',\n  //   element: Facilities,\n  // },\n  // {\n  //   path: '/department',\n  //   name: 'Department',\n  //   element: Department,\n  // },\n  // {\n  //   path: '/devices',\n  //   name: 'Devices',\n  //   element: Devices,\n  // },\n  {\n    path: '/error',\n    name: 'Error',\n    element: Page404,\n  },\n  {\n    path: '/user-management',\n    name: 'UserManagement',\n    element: UserManagement,\n  },\n  // {\n  //   path: '/organization-sensors',\n  //   name: 'OrganizationSensors',\n  //   element: OrganizationSensors,\n  // },\n  // {\n  //   path: '/devices-sensors',\n  //   name: 'DevicesSensors',\n  //   element: DevicesSensors,\n  // },\n  {\n    path: '/devices-sensors/sensor-configration',\n    name: 'SensorConfigration',\n    element: AddSensorConfigration,\n  },\n  // {\n  //   path: '/Facilities-staff',\n  //   name: 'Facility Staff',\n  //   element: FacilityStaff,\n  // },\n  // {\n  //   path: '/Department-staff',\n  //   name: 'Department Staff',\n  //   element: DepartmnentStaff,\n  // },\n  // {\n  //   path: '/Devices-staff',\n  //   name: 'Device Staff',\n  //   element: DeviceStaff,\n  // },\n  {\n    path: '/users',\n    name: 'Users',\n    element: Users,\n  },\n  // {\n  //   path: 'sensor/graph',\n  //   name: 'SensorGraph',\n  //   element: SensorGraph,\n  // },\n  // {\n  //   path: '/gateway',\n  //   name: 'Gateway',\n  //   element: GateWay,\n  // },\n  // {\n  //   path: '/notification-alerts',\n  //   name: 'NotificationAlerts',\n  //   element: NotificationAlerts,\n  // },\n  {\n    path: '/alarm-thresholds',\n    name: 'AlramThreshold',\n    element: AlramThreshold,\n  },\n]\n\nexport default routes\n","import React, { Suspense } from 'react'\nimport { Navigate, Route, Routes } from 'react-router-dom'\nimport * as constant from '../constants/permissionContant'\nimport { CContainer, CSpinner } from '@coreui/react'\n\n// routes config\nimport routes from '../routes'\nimport { useLoader } from 'src/global-context/LoaderContext'\nimport GlobalLoader from './global-loader/GlobalLoader'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport CustomRoute from 'src/constants/CustomRoute'\nimport Dashboard from 'src/views/dashboard/Dashboard'\nimport Organization from 'src/views/pages/admin/organization/Organization'\nimport Facilities from 'src/views/pages/admin/facilities/Facilities'\nimport Department from 'src/views/pages/admin/department/Department'\nimport Devices from 'src/views/pages/admin/devices/Devices'\nimport FacilitiesStaff from 'src/views/pages/Staff/Facility/FacilitySatff'\nimport DepartmentStaff from 'src/views/pages/Staff/Department/DepartmentStaff'\nimport DevicesStaff from 'src/views/pages/Staff/Devices/DevicesStaff'\nimport Gateway from 'src/views/pages/admin/gateway/Gateway'\nimport NotificationSetup from 'src/views/pages/notification-setup/Notification-Setup'\nimport OrganizationSensor from 'src/views/pages/sensors/organization-sensors/OrganizationSensor'\nimport DevicesSensors from 'src/views/pages/sensors/devices-sensors/DevicesSensors'\nimport GraphPage from 'src/views/dashboard/Components/GraphPage'\nconst AppContent = () => {\n  const { isLoading } = useLoader()\n  // const { loading, setLoading } = useGlobalInfo()\n  const { darkMode, setDarkMode } = useGlobalInfo()\n\n  return (\n    <>\n      {isLoading ? (\n        <GlobalLoader />\n      ) : (\n        <CContainer\n          id=\"table_container\"\n          className={`table_container_light ${darkMode ? 'table_container_dark' : ''}`}\n          style={{ maxWidth: 'unset' }}\n          lg\n        >\n          <Suspense fallback={<CSpinner color=\"primary\" />}>\n            <Routes>\n              {routes.map((route, idx) => {\n                return (\n                  route.element && (\n                    <Route\n                      key={idx}\n                      path={route.path}\n                      exact={route.exact}\n                      name={route.name}\n                      element={<route.element />}\n                    />\n                  )\n                )\n              })}\n              <Route path=\"/\" element={<Navigate to=\"dashboard\" replace />} />\n              <Route\n                path=\"/dashboard\"\n                element={\n                  <CustomRoute\n                    component={Dashboard}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/organizations\"\n                element={\n                  <CustomRoute\n                    component={Organization}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/department\"\n                element={\n                  <CustomRoute\n                    component={Department}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n              <Route\n                path=\"/facilities\"\n                element={\n                  <CustomRoute\n                    component={Facilities}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n                <Route\n                path=\"/devices\"\n                element={\n                  <CustomRoute\n                    component={Devices}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/Facilities-staff\"\n                element={\n                  <CustomRoute\n                    component={FacilitiesStaff}\n                    pageAccess={constant._facility}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/Devices-staff\"\n                element={\n                  <CustomRoute\n                    component={DevicesStaff}\n                    pageAccess={constant._device}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/Department-staff\"\n                element={\n                  <CustomRoute\n                    component={DepartmentStaff}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/organization-sensors\"\n                element={\n                  <CustomRoute\n                    component={OrganizationSensor}\n                    pageAccess={constant._department}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/devices-sensors\"\n                element={\n                  <CustomRoute\n                    component={DevicesSensors}\n                    pageAccess={constant._sensor}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/gateway\"\n                element={\n                  <CustomRoute\n                    component={Gateway}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n                <Route\n                path=\"/notification-alerts\"\n                element={\n                  <CustomRoute\n                    component={NotificationSetup}\n                    pageAccess={constant._organization}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n               <Route\n                path=\"/sensor/graph\"\n                element={\n                  <CustomRoute\n                    component={GraphPage}\n\n                    pageAccess={constant._sensor}\n                    pageAction={[constant._view]}\n                  />\n                }\n              />\n            </Routes>\n          </Suspense>\n        </CContainer>\n      )}\n    </>\n  )\n}\n\nexport default React.memo(AppContent)\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CAvatar,\n  CBadge,\n  CDropdown,\n  CDropdownDivider,\n  CDropdownHeader,\n  CDropdownItem,\n  CDropdownMenu,\n  CDropdownToggle,\n} from \"@coreui/react\";\nimport {\n  cilBell,\n  cilCreditCard,\n  cilCommentSquare,\n  cilEnvelopeOpen,\n  cilFile,\n  cilLockLocked,\n  cilSettings,\n  cilTask,\n  cilUser,\n} from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  _device,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useNavigate } from \"react-router-dom\";\nimport avatar8 from \"./../../assets/images/avatars/8.jpg\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst AppHeaderDropdown = ({ ModalOpen, uploadedImageUrl }) => {\n  function logoutHandler() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"OrganizationId\");\n    localStorage.removeItem(\"facilityId\");\n    localStorage.removeItem(\"departmentId\");\n    localStorage.removeItem(\"permissions\");\n    localStorage.removeItem(\"organizationLogo\");\n    localStorage.removeItem(\"organizationName\");\n    localStorage.removeItem(\"organizationid\");\n    // localStorage.removeItem(\"organizationLogo\");\n\n    navigate(\"/login\");\n  }\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const organizationLogoUrl = localStorage.getItem(\"organizationLogo\");\n  const navigate = useNavigate();\n  const OpenModal = () => {\n    ModalOpen();\n  };\n  return (\n    <CDropdown variant=\"nav-item\">\n      <CDropdownToggle placement=\"bottom-end\" className=\"py-0\" caret={false}>\n        {(uploadedImageUrl && <CAvatar src={uploadedImageUrl} size=\"md\" />) ||\n          (organizationLogoUrl && organizationLogoUrl !== \"undefined\" && (\n            <CAvatar src={organizationLogoUrl} size=\"md\" />\n          )) || <CAvatar src={avatar8} size=\"md\" />}\n      </CDropdownToggle>\n      <CDropdownMenu\n        className={` pt-0 ${darkMode ? \"dropdown-dark\" : \"\"}`}\n        placement=\"bottom-end\"\n      >\n        {/* <CDropdownHeader className=\"bg-light fw-semibold py-2\">Account</CDropdownHeader> */}\n        {/* <CDropdownItem href=\"#\">\n          <CIcon icon={cilBell} className=\"me-2\" />\n          Updates\n          <CBadge color=\"info\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilEnvelopeOpen} className=\"me-2\" />\n          Messages\n          <CBadge color=\"success\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilTask} className=\"me-2\" />\n          Tasks\n          <CBadge color=\"danger\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCommentSquare} className=\"me-2\" />\n          Comments\n          <CBadge color=\"warning\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownHeader className=\"bg-light fw-semibold py-2\">Settings</CDropdownHeader>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilUser} className=\"me-2\" />\n          Profile\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilCreditCard} className=\"me-2\" />\n          Payments\n          <CBadge color=\"secondary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem>\n        <CDropdownItem href=\"#\">\n          <CIcon icon={cilFile} className=\"me-2\" />\n          Projects\n          <CBadge color=\"primary\" className=\"ms-2\">\n            42\n          </CBadge>\n        </CDropdownItem> */}\n        {/* <CDropdownDivider /> */}\n        {/* <CDropdownItem href=\"/login\" onClick={logoutHandler}>\n        <CIcon icon={cilSettings} className=\"me-2\" />\n          Settings\n          <br></br>\n          <CIcon icon={cilLockLocked} className=\"me-2\" />\n          Sign Out\n        </CDropdownItem> */}\n        <CDropdownItem>\n        {facilityPermission && !organizationPermission && (\n    <div onClick={OpenModal}>\n      <CIcon\n        icon={cilSettings}\n        className=\"me-2\"\n        style={{ fontSize: \"30px\", color: \"black\" }}\n      />\n      <span style={{ fontSize: \"20px\", color: \"black\" }}>Settings</span>\n    </div>\n  )}\n          {/* <br /> */}\n          <div onClick={logoutHandler}>\n            <CIcon\n              icon={cilLockLocked}\n              className=\"me-2\"\n              style={{ fontSize: \"30px\", color: \"black\" }}\n            />\n            <span style={{ fontSize: \"20px\", color: \"black\" }}>Sign Out</span>\n          </div>\n        </CDropdownItem>\n      </CDropdownMenu>\n    </CDropdown>\n  );\n};\n\nexport default AppHeaderDropdown;\nAppHeaderDropdown.propTypes = {\n  ModalOpen: PropTypes.func.isRequired,\n  uploadedImageUrl: PropTypes.string,\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n  CFormSelect,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllRolesData } from \"src/hooks/useUsers\";\nimport { useMutation } from \"react-query\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst Settings = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const { mutate: Roles } = useMutation(getAllRolesData);\n  const [UserData, setUserdata] = useState([]);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    organizationName: localStorage.getItem('organizationName'),\n    file: null,\n  });\n  useEffect(() => {\n    //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.firstname,\n        lastname: data.lastname,\n        email: data.email,\n        address: data.address,\n        phonenumber: data.phonenumber,\n        roleid: data.roleid,\n      }));\n    }\n  }, [data]);\n  const handleFileChange = (e) => {\n    const file = e.target.files[0] || null;\n    setFormData({\n      ...formData,\n      file: file,\n    });\n  };\n//   const handleInputChange = (e) => {\n//     const { name, type, checked, files } = e.target;\n//     const parsedValue = name === 'roleid' ? parseInt(value, 10) : value;\n  \n//     // If the input is a file input, update the file property in formData\n//     if (type === 'file') {\n//       setFormData({\n//         ...formData,\n//         file: files[0] || null, // Use null if no file is selected\n//       });\n//     } else {\n//       setFormData({\n//         ...formData,\n//         [name]: type === 'checkbox' ? checked : parsedValue,\n//       });\n//     }\n//   };\n  \n  \n\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    // if (form.checkValidity() === false) {\n    //   event.stopPropagation();\n    // }\n\n    // setValidated(true);\n\n    // Handle form submission here\n    // if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n    //   console.log(formData);\n      closeModal();\n    // }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  \n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n    \n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n         Upload Logo\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"file\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"file\"\n            // value={formData.file}\n            onChange={handleFileChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n     \n      {/*  Email */}\n    \n      {/* Address */}\n    \n      {/* Phone Number */}\n     \n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n         Upload\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nSettings.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      roleid: PropTypes.number,\n    }),\n  ]),\n};\n\nexport default Settings;\n","// /* eslint-disable prettier/prettier */\nimport React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  CContainer,\n  CHeader,\n  CHeaderBrand,\n  CHeaderNav,\n  CHeaderToggler,\n  CNavItem,\n  CFormSelect,\n  CButton,\n  CFormInput,\n  CForm,\n  CFormLabel,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { useLocation } from \"react-router-dom\";\nimport { cilMenu } from \"@coreui/icons\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { AppHeaderDropdown } from \"./header/index\";\nimport { logo } from \"src/assets/brand/logo\";\nimport { useMutation } from \"react-query\";\nimport {\n  getDepartmentsData,\n  getFacilitiesData,\n  getOrganizationData,\n  getAllDepByOrgId,\n  LogoUpload,\n  LogoUploadPatch,\n} from \"src/hooks/useAuth\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport useStore from \"src/store/state\";\nimport useDataStore from \"src/store/state\";\nimport {\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  _device,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport Sitelogo from \"./../assets/images/avatars/Logo-removebg-preview.png\";\nimport Settings from \"src/views/forms/settings-form/Settings\";\n\nconst AppHeader = () => {\n  const location = useLocation();\n  const addData = useDataStore((state) => state.addData);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const { setDepartmentId } = useGlobalInfo();\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const dispatched = useDispatch();\n  const [organizationData, setOrganizationData] = useState([]);\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const mail = localStorage.getItem(\"email\");\n  let role = \"\";\n  if (organizationPermission) {\n    role = \"SuperAdmin\";\n  } else if (facilityPermission) {\n    role = \"Organization Admin\";\n  } else if (departmentPermission) {\n    role = \"Facility Admin\";\n  } else if (devicePermission) {\n    role = \"Department Admin\";\n  }\n  const {\n    facilityData,\n    setFacilityData,\n    departmentsData,\n    setDepartmentsData,\n    devicesData,\n\n    setDevicesData,\n  } = useGlobalInfo();\n  const handleOrganizationChange = (event) => {\n    setDepartmentId(\"\");\n    localStorage.removeItem(\"facilityId\");\n    localStorage.removeItem(\"departmentId\");\n\n    const selectedId = event.target.value;\n    setFacilityData([]);\n    setDepartmentsData([]);\n    localStorage.setItem(\"OrganizationId\", selectedId);\n    // Check if the selected value is \"Select Organization\"\n    if (selectedId !== \"Select Organization\") {\n      facilitiesDataFetch(selectedId);\n      departmentsDataByOrg(selectedId);\n      devicesDataFetchOrg(selectedId);\n    } else {\n      // If selected value is \"Select Organization\", you may want to handle this case\n      // For example, clear the organization-specific data or perform other actions\n    }\n  };\n\n  const handleFacilityChange = (event) => {\n    const selectedId = event.target.value;\n    localStorage.setItem(\"facilityId\", selectedId);\n    localStorage.removeItem(\"departmentId\");\n    setDepartmentsData([]);\n\n    // Check if the selected value is \"Select Facility\"\n    if (selectedId !== \"Select Facility\") {\n      departmentsDataFetch(selectedId);\n      devicesDataFetchFac(selectedId);\n    } else {\n      // If selected value is \"Select Facility\", you may want to handle this case\n      // For example, clear the facility-specific data or perform other actions\n    }\n  };\n\n  const handleDepartmentChange = (event) => {\n    const selectedId = event.target.value;\n\n    if (selectedId !== \"Select Department\") {\n      devicesDataFetch(selectedId);\n    }\n\n    localStorage.setItem(\"departmentId\", selectedId);\n    setDepartmentId(selectedId);\n  };\n\n  const sidebarShow = useSelector((state) => state.sidebarShow);\n  const { mutate: getOrganization } = useMutation(getOrganizationData);\n  function organizationDataFetch() {\n    getOrganization(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setOrganizationData(data);\n        addData(data.data);\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        hideLoader();\n      },\n    });\n  }\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    showLoader();\n    getFacilities(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevices } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    showLoader();\n    getDevices(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrg } = useMutation(getAllDevicesByOrgId);\n  function devicesDataFetchOrg(selectedId) {\n    showLoader();\n    getDevicesByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFac } = useMutation(getAllDevicesByFacId);\n  function devicesDataFetchFac(selectedId) {\n    showLoader();\n    getDevicesByFac(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function getAllDepartments() {\n    // //debugger\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        // //debugger\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    showLoader();\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDepartmentsByOrg } = useMutation(getAllDepByOrgId);\n  function departmentsDataByOrg(selectedId) {\n    showLoader();\n    getDepartmentsByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const [uploadedImageUrl, setUploadedImageUrl] = useState(null);\n  const logoUrl = localStorage.getItem(\"organizationLogo\");\n  const { mutate: uploadLogo } = useMutation(LogoUpload);\n  function LogoPost(selectedId) {\n    // debugger\n    showLoader();\n    uploadLogo(selectedId, {\n      onSuccess: (data) => {\n        // debugger\n        hideLoader();\n        setUploadedImageUrl(data);\n        if (logoUrl && logoUrl !== \"undefined\") {\n          LogoPostUpdate(data); // Replace 'someData' with the actual data you want to pass\n        }\n        // console.log(data)\n      },\n      onError: (error) => {\n        // debugger\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: uploadLogoPost } = useMutation(LogoUploadPatch);\n  function LogoPostUpdate(selectedId) {\n    // debugger\n    showLoader();\n    uploadLogoPost(selectedId, {\n      onSuccess: (data) => {\n        // debugger\n        hideLoader();\n        setUploadedImageUrl(data.data.logo);\n        console.log(data);\n      },\n      onError: (error) => {\n        // debugger\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    // debugger\n    // console.log(userPermissions)\n    showLoader();\n    if (organizationPermission) {\n      organizationDataFetch();\n      if (\n        localStorage.getItem(\"OrganizationId\") !== undefined ||\n        localStorage.getItem(\"OrganizationId\") !== null\n      ) {\n        facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n      }\n      if (\n        localStorage.getItem(\"facilityId\") !== undefined ||\n        localStorage.getItem(\"facilityId\") !== null\n      ) {\n        departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n      }\n    } else if (facilityPermission) {\n      getAllFacilities();\n      if (\n        localStorage.getItem(\"facilityId\") !== undefined ||\n        localStorage.getItem(\"facilityId\") !== null\n      ) {\n        departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n      }\n    } else if (departmentPermission) {\n      // // //debugger\n      getAllDepartments();\n    } else {\n      hideLoader();\n    }\n  }, []);\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n  const shouldShowOrganizationDropdown = () => {\n    const pathsToHideOrganizationDropdown = [\"/organizations\"];\n    return !pathsToHideOrganizationDropdown.includes(location.pathname);\n  };\n  const shouldShowFacilityDropdown = () => {\n    const pathsToHideFacilityDropdown = [\n      \"/gateway\",\n      \"/organization-sensors\",\n      \"/Facilities\",\n      \"/organizations\",\n      \"/notification-alerts\",\n      \"/dashboard\",\n      \"/sensor/graph\",\n      \"/users\",\n    ];\n    return !pathsToHideFacilityDropdown.includes(location.pathname);\n  };\n\n  const shouldShowDepartmentDropdown = () => {\n    const pathsToHideDepartmentDropdown = [\n      \"/gateway\",\n      \"/organization-sensors\",\n      \"/Facilities-staff\",\n      \"/Facilities\",\n      \"/department\",\n      \"/organizations\",\n      \"/notification-alerts\",\n      \"/dashboard\",\n      \"/sensor/graph\",\n      \"/users\",\n    ];\n    return !pathsToHideDepartmentDropdown.includes(location.pathname);\n  };\n  function saveHandler(handler) {\n    debugger;\n    LogoPost(handler);\n  }\n  // function saveHandler(handler) {\n  //   const logoUrl = localStorage.getItem('organizationLogo');\n\n  //   if (logoUrl && logoUrl !== 'undefined') {\n  //     // If logoUrl is defined and not 'undefined', call LogoPostUpdate\n  //     LogoPostUpdate(handler);\n  //   } else {\n  //     // Otherwise, call LogoPost\n  //     LogoPost(handler);\n  //   }\n  // }\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const ModalOpen = () => {\n    setIsModalOpen(true);\n  };\n  return (\n    <CHeader\n      className={`mb-4 ${darkMode ? \"header-dark\" : \"\"}`}\n      position=\"sticky\"\n    >\n      <GenericModal\n        title={\"Settings\"}\n        content={\n          <Settings\n            closeModal={closeModal}\n            saveHandler={saveHandler}\n            openModal={setIsModalOpen}\n          />\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CContainer fluid>\n        <CHeaderToggler\n          className=\"ps-1\"\n          onClick={() => dispatched({ type: \"set\", sidebarShow: !sidebarShow })}\n        >\n          <CIcon\n            className={`  ${darkMode ? \"icon-dark\" : \"\"}`}\n            icon={cilMenu}\n            size=\"lg\"\n          />\n        </CHeaderToggler>\n        <CHeaderBrand className=\"ml-3 mr-4\" to=\"/\">\n          <a href=\"#\">\n            <img\n              src={Sitelogo}\n              alt=\"Logo\"\n              style={{\n                width: \"105px\",\n                height: \"62px\",\n                backgroundColor: \"transparent\",\n              }}\n            />\n          </a>\n        </CHeaderBrand>\n        <CHeaderNav className=\"d-none d-md-flex me-auto gap-4\">\n          {organizationPermission && shouldShowOrganizationDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Organization\"\n                onChange={handleOrganizationChange}\n                value={localStorage.getItem(\"OrganizationId\")}\n              >\n                <option>Select Organization</option>\n                {organizationData?.data?.map((item) => {\n                  return (\n                    <option key={item.customerid} value={item.customerid}>\n                      {item.customername}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          {facilityPermission && shouldShowFacilityDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Facility\"\n                onChange={handleFacilityChange}\n                value={localStorage.getItem(\"facilityId\")}\n              >\n                <option>Select Facility</option>\n                {facilityData?.map((item) => {\n                  return (\n                    <option key={item.facilityid} value={item.facilityid}>\n                      {item.name}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          {departmentPermission && shouldShowDepartmentDropdown() && (\n            <CNavItem>\n              <select\n                size=\"sm\"\n                className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                aria-label=\"Department\"\n                onChange={handleDepartmentChange}\n                value={localStorage.getItem(\"departmentId\")}\n              >\n                <option>Select Department</option>\n                {departmentsData?.map((item) => {\n                  return (\n                    <option key={item.departmentid} value={item.departmentid}>\n                      {item.departmentname}\n                    </option>\n                  );\n                })}\n              </select>\n            </CNavItem>\n          )}\n          <CNavItem>\n            <CButton\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              onClick={toggleDarkMode}\n            >\n              Change Mode\n            </CButton>\n          </CNavItem>\n        </CHeaderNav>\n        <CHeaderNav style={{ display: \"block\" }}>\n          <h5\n            className={`m-0 ${darkMode ? \"heading-dark01\" : \"heading-light01\"}`}\n          >\n            {role}\n          </h5>\n          <p\n            className={`m-0 ${darkMode ? \"heading-dark01\" : \"heading-light01\"}`}\n          >\n            {mail}\n          </p>\n          {/* <CNavItem>\n            <CNavLink href=\"#\">\n              <CIcon icon={cilEnvelopeOpen} size=\"lg\" />\n            </CNavLink>\n          </CNavItem> */}\n        </CHeaderNav>\n        <CHeaderNav className=\"ms-3\">\n          <AppHeaderDropdown\n            closeModal={closeModal}\n            ModalOpen={ModalOpen}\n            uploadedImageUrl={uploadedImageUrl}\n          />\n        </CHeaderNav>\n      </CContainer>\n    </CHeader>\n  );\n};\n\nexport default AppHeader;\n","import React from 'react'\nimport { NavLink, useLocation } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nimport { CBadge } from '@coreui/react'\n\nexport const AppSidebarNav = ({ items }) => {\n  const location = useLocation()\n  const navLink = (name, icon, badge) => {\n    return (\n      <>\n        {icon && icon}\n        {name && name}\n        {badge && (\n          <CBadge color={badge.color} className=\"ms-auto\">\n            {badge.text}\n          </CBadge>\n        )}\n      </>\n    )\n  }\n\n  const navItem = (item, index) => {\n    const { component, name, badge, icon, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        {...(rest.to &&\n          !rest.items && {\n            component: NavLink,\n          })}\n        key={index}\n        {...rest}\n      >\n        {navLink(name, icon, badge)}\n      </Component>\n    )\n  }\n  const navGroup = (item, index) => {\n    const { component, name, icon, to, ...rest } = item\n    const Component = component\n    return (\n      <Component\n        idx={String(index)}\n        key={index}\n        toggler={navLink(name, icon)}\n        visible={location.pathname.startsWith(to)}\n        {...rest}\n      >\n        {item.items?.map((item, index) =>\n          item.items ? navGroup(item, index) : navItem(item, index),\n        )}\n      </Component>\n    )\n  }\n\n  return (\n    <React.Fragment>\n      {items &&\n        items.map((item, index) => (item.items ? navGroup(item, index) : navItem(item, index)))}\n    </React.Fragment>\n  )\n}\n\nAppSidebarNav.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n}\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { CNavGroup, CNavItem } from \"@coreui/react\";\nimport {\n  cilAudio,\n  cilAudioSpectrum,\n  cilBarChart,\n  cilBuilding,\n  cilCast,\n  cilDevices,\n  cilLibraryBuilding,\n  cilListFilter,\n  cilPeople,\n} from \"@coreui/icons\";\n\n// Import your permissions and constants here\nimport {\n  hasPermissionToAction,\n  _view,\n  _user,\n  _organization,\n  _facility,\n  _department,\n  _device,\n  _sensor,\n  // _logo,\n} from \"./constants/permissionContant\";\nimport { useGlobalInfo } from \"./global-context/GlobalContext\";\n\nconst userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n\nconst _nav = [\n  {\n    component: CNavItem,\n    name: \"Dashboard\",\n    to: \"/dashboard\",\n    icon: <CIcon icon={cilBarChart} customClassName=\"nav-icon\" />,\n    permissions: [`${_device}_${_view}`], // Example permission for viewing the dashboard\n  },\n  {\n    component: CNavGroup,\n    name: \"Admin\",\n    icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: \"Organizations\",\n        to: \"/organizations\",\n        icon: (\n          <CIcon icon={cilLibraryBuilding} customClassName=\"nav-icon ps-4\" />\n        ),\n        permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Facilities\",\n        to: \"/Facilities\",\n        icon: <CIcon icon={cilPeople} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_facility}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Department\",\n        to: \"/department\",\n        icon: <CIcon icon={cilBuilding} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_department}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Equipments\",\n        to: \"/devices\",\n        icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_device}_${_view}`],\n      },\n    ],\n  },\n  // {\n  //   component: CNavGroup,\n  //   name: 'Staff',\n  //   icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n  //   items: [\n  //     {\n  //       component: CNavItem,\n  //       name: 'Facility Staff',\n  //       to: '/Facilities-staff',\n  //       icon: <CIcon icon={cilPeople} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_facility}_${_view}`],\n  //     },\n  //     {\n  //       component: CNavItem,\n  //       name: 'Department Staff',\n  //       to: '/Department-staff',\n  //       icon: <CIcon icon={cilBuilding} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_department}_${_view}`],\n  //     },\n  //     {\n  //       component: CNavItem,\n  //       name: 'Equipment Staff',\n  //       to: '/Devices-staff',\n  //       icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n  //       permissions: [`${_device}_${_view}`],\n  //     },\n  //     // {\n  //     //   component: CNavItem,\n  //     //   name: 'Users',\n  //     //   to: '/users',\n  //     //   icon: <CIcon icon={cilDevices} customClassName=\"nav-icon ps-4\" />,\n  //     //   permissions: [`${_organization}_${_view}`],\n  //     // },\n  //   ],\n  // },\n  {\n    component: CNavItem,\n    name: \"Users\",\n    to: \"/users\",\n    icon: <CIcon icon={cilPeople} customClassName=\"nav-icon\" />,\n    permissions: [`${_facility}_${_view}`],\n  },\n  {\n    component: CNavGroup,\n    name: \"Sensor Setup\",\n    icon: <CIcon icon={cilAudio} customClassName=\"nav-icon\" />,\n    items: [\n      {\n        component: CNavItem,\n        name: \"Organization Sensors\",\n        to: \"/organization-sensors\",\n        icon: <CIcon icon={cilAudioSpectrum} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_organization}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"Equipment Sensors\",\n        to: \"/devices-sensors\",\n        icon: <CIcon icon={cilCast} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_sensor}_${_view}`],\n      },\n      {\n        component: CNavItem,\n        name: \"GateWays\",\n        to: \"/gateway\",\n        icon: <CIcon icon={cilCast} customClassName=\"nav-icon ps-4\" />,\n        permissions: [`${_organization}_${_view}`],\n      },\n    ],\n  },\n  {\n    component: CNavGroup,\n    name: \"Alerts\",\n    icon: <CIcon icon={cilListFilter} customClassName=\"nav-icon\" />,\n    permissions: [`${_organization}_${_view}`],\n    items: [\n      {\n        component: CNavItem,\n        name: \"Alarm Recipients\",\n        to: \"/notification-alerts\",\n        icon: <CIcon icon={cilAudioSpectrum} customClassName=\"nav-icon ps-4\" />,\n        // permissions: [`${_organization}_${_view}`],\n      },\n      // {\n      //   component: CNavItem,\n      //   name: 'Alarm Thresholds',\n      //   to: '/alarm-thresholds',\n      //   icon: <CIcon icon={cilAudioSpectrum} customClassName=\"nav-icon ps-4\" />,\n      //   // permissions: [`${_organization}_${_view}`],\n      // },\n    ],\n  },\n];\n\n// Filter the items based on the user's permissions\n// const filteredNav = _nav\n//   .map((item) => {\n//     if (!item.permissions || hasPermissionToAction(userPermissions, ...item.permissions)) {\n//       if (item.items) {\n//         item.items = item.items.filter(\n//           (subItem) =>\n//             !subItem.permissions || hasPermissionToAction(userPermissions, ...subItem.permissions),\n//         )\n//       }\n//       return item\n//     }\n//     return null\n//   })\n//   .filter(Boolean) // Remove null items\n\n// export default filteredNav\nconst FilteredNav = () => {\n  const [userPermissions, setUserPermissions] = useState([]);\n  const [filteredNav, setFilteredNav] = useState([]);\n\n  useEffect(() => {\n    // Parse permissions once when the component mounts\n    const storedPermissions =\n      JSON.parse(localStorage.getItem(\"permissions\")) || [];\n    setUserPermissions(storedPermissions);\n  }, []); // Empty dependency array ensures it runs only once on mount\n\n  // Memoize the filtered navigation array\n  const memoizedFilteredNav = useMemo(() => {\n    return _nav\n      .map((item) => {\n        if (\n          !item.permissions ||\n          hasPermissionToAction(userPermissions, ...item.permissions)\n        ) {\n          if (item.items) {\n            const newItems = item.items.filter(\n              (subItem) =>\n                !subItem.permissions ||\n                hasPermissionToAction(userPermissions, ...subItem.permissions)\n            );\n            return { ...item, items: newItems };\n          }\n          return item;\n        }\n        return null;\n      })\n      .filter(Boolean);\n  }, [userPermissions, _nav]);\n\n  // Update state only when the filtered navigation changes\n  useEffect(() => {\n    setFilteredNav(memoizedFilteredNav);\n  }, [memoizedFilteredNav]);\n\n  return filteredNav;\n};\n\nexport default FilteredNav;\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { CSidebar, CSidebarBrand, CSidebarNav } from \"@coreui/react\";\n\nimport { AppSidebarNav } from \"./AppSidebarNav\";\n\nimport SimpleBar from \"simplebar-react\";\nimport \"simplebar/dist/simplebar.min.css\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\n// sidebar nav config\n// import filteredNav from \"../_nav\";\nimport FilteredNav from \"src/_nav\";\nimport { useMutation } from \"react-query\";\nimport { generalPermissions } from \"src/hooks/useAuth\";\nimport logo from \"./../assets/images/avatars/Logo-removebg-preview.png\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\n// const AppSidebar = () => {\n//   const dispatch = useDispatch();\n//   const unfoldable = useSelector((state) => state.sidebarUnfoldable);\n//   const sidebarShow = useSelector((state) => state.sidebarShow);\n//   const { darkMode, setDarkMode } = useGlobalInfo();\n//   const { mutate: permissions } = useMutation(generalPermissions);\n//   useEffect(() => {\n//     permissions(\"\", {\n//       onSuccess: (data) => {\n//         debugger\n//         localStorage.setItem(\"permissions\", JSON.stringify(data.permissions));\n//       },\n//       onError: (error) => {\n//         console.log(error);\n//       },\n//     });\n//   }, []);\n//   const filteredNav = FilteredNav();\n//   return (\n//     <CSidebar\n//       position=\"fixed\"\n//       unfoldable={unfoldable}\n//       visible={sidebarShow}\n//       onVisibleChange={(visible) => {\n//         dispatch({ type: \"set\", sidebarShow: visible });\n//       }}\n//       className={`sidebar-light ${darkMode ? \"sidebar-dark\" : \"\"}`}\n//     >\n//       <CSidebarBrand\n//         className={`d-none d-md-flex sidebar-light ${\n//           darkMode ? \"sidebar-dark\" : \"\"\n//         }`}\n//         to=\"/\"\n//       >\n//         {/* <CIcon className=\"sidebar-brand-full\" icon={logoNegative} height={35} />\n//         <CIcon className=\"sidebar-brand-narrow\" icon={sygnet} height={35} /> */}\n//         {/* <a\n//           href=\"#\"\n//           style={{\n//             color: \"#ffffff\",\n//             margin: \"0\",\n//             padding: \"15px 0\",\n//             textDecoration: \"none\",\n//             fontSize: \"30px\",\n//           }}\n//         >\n//           <img\n//             src={logo}\n//             alt=\"Logo\"\n//             style={{\n//               width: \"105px\",\n//               height: \"62px\",\n//               backgroundColor: \"transparent\",\n//             }}\n//           />\n//         </a> */}\n//       </CSidebarBrand>\n//       <CSidebarNav>\n//         <SimpleBar>\n//           <AppSidebarNav items={filteredNav} />\n//         </SimpleBar>\n//       </CSidebarNav>\n//       {/* <CSidebarToggler\n//         className=\"d-none d-lg-flex\"\n//         onClick={() => dispatch({ type: 'set', sidebarUnfoldable: !unfoldable })}\n//       /> */}\n//     </CSidebar>\n//   );\n// };\nconst AppSidebar = () => {\n  const dispatch = useDispatch();\n  const unfoldable = useSelector((state) => state.sidebarUnfoldable);\n  const sidebarShow = useSelector((state) => state.sidebarShow);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: permissions } = useMutation(generalPermissions);\n  const filteredNav = FilteredNav();\n\n  useEffect(() => {\n    permissions(\"\", {\n      onSuccess: (data) => {\n        localStorage.setItem(\"permissions\", JSON.stringify(data.permissions));\n      },\n      onError: (error) => {\n        console.log(error);\n      },\n    });\n  }, []);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  \n\n  // Use the FilteredNav component to get the filtered navigation items\n\n  return (\n    <CSidebar\n      position=\"fixed\"\n      unfoldable={unfoldable}\n      visible={sidebarShow}\n      onVisibleChange={(visible) => {\n        dispatch({ type: \"set\", sidebarShow: visible });\n      }}\n      className={`sidebar-light ${darkMode ? \"sidebar-dark\" : \"\"}`}\n    >\n      <CSidebarBrand\n        className={`d-none d-md-flex sidebar-light ${\n          darkMode ? \"sidebar-dark\" : \"\"\n        }`}\n        to=\"/\"\n      >\n    <div style={{ fontSize: \"25px\" }}>\n    {facilityPermission && !organizationPermission && (\n  <span>\n    {localStorage.getItem(\"organizationName\")}\n  </span>\n)}\n\n</div>\n        {/* Your existing CSidebarBrand content... */}\n      </CSidebarBrand>\n      <CSidebarNav>\n        <SimpleBar>\n          {/* Use the filteredNav instead of importing it directly */}\n          <AppSidebarNav items={filteredNav} />\n        </SimpleBar>\n      </CSidebarNav>\n      {/* Your existing CSidebarToggler... */}\n    </CSidebar>\n  );\n};\n\n// export default React.memo(AppSidebar);\n\nexport default React.memo(AppSidebar);\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport { CNav, CNavItem, CNavLink, CTabContent, CTabPane } from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilCode, cilMediaPlay } from '@coreui/icons'\n\nconst DocsExample = (props) => {\n  const { children, href } = props\n\n  const _href = `https://coreui.io/react/docs/${href}`\n\n  return (\n    <div className=\"example\">\n      <CNav variant=\"tabs\">\n        <CNavItem>\n          <CNavLink href=\"#\" active>\n            <CIcon icon={cilMediaPlay} className=\"me-2\" />\n            Preview\n          </CNavLink>\n        </CNavItem>\n        <CNavItem>\n          <CNavLink href={_href} target=\"_blank\">\n            <CIcon icon={cilCode} className=\"me-2\" />\n            Code\n          </CNavLink>\n        </CNavItem>\n      </CNav>\n      <CTabContent className=\"rounded-bottom\">\n        <CTabPane className=\"p-3 preview\" visible>\n          {children}\n        </CTabPane>\n      </CTabContent>\n    </div>\n  )\n}\n\nDocsExample.propTypes = {\n  children: PropTypes.node,\n  href: PropTypes.string,\n}\n\nexport default React.memo(DocsExample)\n","/* eslint-disable react/prop-types */\nimport { CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React from 'react'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nexport const GenericModal = ({ title, content, onClose, isOpen }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo()\n\n  return (\n    <CModal visible={isOpen} onClose={onClose}>\n      <CModalHeader closeButton className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n        <CModalTitle id={`${darkMode ? 'heading-dark' : ''}`}>{title}</CModalTitle>\n      </CModalHeader>\n      <CModalBody className={`modal-light pt-0 ${darkMode ? 'modal-dark' : ''}`}>\n        {content}\n      </CModalBody>\n      {/* <CModalFooter>\n        <CButton\n          color=\"primary\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Add Organization\n        </CButton>\n        <CButton\n          color=\"secondary\"\n          onClick={() => {\n            onClose()\n          }}\n        >\n          Close\n        </CButton>\n      </CModalFooter> */}\n    </CModal>\n  )\n}\n","// export const BASE_URL = \"https://fluttering-company-production.up.railway.app/\";\n// export const BASE_URL = \"http://192.168.18.53:3001/\";\nexport const BASE_URL =\n\"http://ec2-13-233-60-110.ap-south-1.compute.amazonaws.com:8000/\";\n// export const BASE_URL = \"http://3.27.159.97:5000/\";\n// export const BASE_URL = \"http://192.168.18.53:3000/\";\n","export const _create = 'create'\nexport const _view = 'view'\nexport const _delete = 'delete'\nexport const _update = 'update'\n\n// Constants\n\nexport const _user = 'user'\nexport const _roles = 'roles'\nexport const _organization = 'organization'\nexport const _facility = 'facility'\nexport const _department = 'department'\nexport const _device = 'device'\nexport const _sensor = 'sensor'\nexport const _logo = 'logo'\n\n\nexport const hasPermissionToActionAccess = (permissionList, pageAccess, pageAction) => {\n  let hasAccess = false\n  hasAccess = permissionList?.includes(`${pageAccess}_${pageAction}`)\n  return hasAccess\n}\n\nexport const hasPermissionToAction = (permissionList, pageData) => {\n  let hasAccess = false\n  hasAccess = permissionList?.includes(`${pageData}`)\n  return hasAccess\n}\n","import { setAuthToken } from './axios'\n// Function to set the authentication token\nconst setAuthenticationToken = (token) => {\n  setAuthToken(token)\n}\n\nexport { setAuthenticationToken }\n","import axios from 'axios'\nimport { BASE_URL } from 'src/constants/constants'\nconst axiosInstance = axios.create({\n  baseURL: BASE_URL, // Replace with your API's base URL\n  timeout: 50000, // Set a timeout (in milliseconds) for requests\n  headers: {\n    'Content-Type': 'application/json',\n    // You can add other default headers here\n  },\n})\n\nconst setAuthToken = (token) => {\n  if (token) {\n    axiosInstance.defaults.headers.common['Authorization'] = `Bearer ${token}`\n  } else {\n    delete axiosInstance.defaults.headers.common['Authorization']\n  }\n}\n\nexport { axiosInstance, setAuthToken }\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n// import { useQuery } from 'react-query'\nexport const loginPost = async (payload) => {\n  const { data } = await axiosInstance.post(`auth/login`, {\n    email: payload.email,\n    password: payload.password,\n  });\n  return data.data;\n};\nexport const generalPermissions = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`general`);\n  return data;\n};\nexport const addOrganization = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`organization`, payload);\n  return data;\n};\nexport const getOrganizationData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`organization`);\n  return data;\n};\n\nexport const getFacilitiesData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`facility/by-orgId/${id}`);\n  return data;\n};\nexport const EditOrganization = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `organization/${payload.editData.customerid}`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const getDepartmentsData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department/by-facId/${id}`);\n  return data;\n};\nexport const getAllDepByOrgId = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department/by-orgId/${id}`);\n  return data;\n};\n/**\n * This function is used to delete an organization by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Organization' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteOrganization = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`organization/${id}`);\n  return data;\n};\nexport const resetpassword = async (payload) => {\n  //debugger\n  const { data } = await axiosInstance.post(`auth/get-reset-token`, payload);\n  return data;\n};\n\nexport const SetNewPassword = async (payload) => {\n  const { data } = await axiosInstance.post(`/auth/reset-password`, payload);\n  return data;\n};\n\n// export const LogoUpload = async (payload) => {\n//   debugger\n//   setAuthenticationToken(localStorage.getItem(\"token\"));\n//   const { data } = await axiosInstance.post(`organization/upload`, payload);\n//   return data;\n// };\n\nexport const LogoUpload = async (payload) => {\n  const formData = new FormData();\n  formData.append('file', payload.file);\n  formData.append('organizationName', payload.organizationName);\n\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n\n  try {\n    const { data } = await axiosInstance.post(`organization/upload`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data', // Ensure proper content type for FormData\n      },\n    });\n    return data;\n  } catch (error) {\n    console.error(\"Error uploading file:\", error);\n    throw error;\n  }\n};\n\n\nexport const LogoUploadPatch = async (payload) => {\n  debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `organization/${localStorage.getItem(\"organizationid\")}`,\n    {\n      logo:payload\n    }\n  );\n  return data;\n};","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n// export const getAllDepartmentsData = async () => {\n//   setAuthenticationToken(localStorage.getItem('token'))\n//   const { data } = await axiosInstance.get(`Department/GetAllDepartments`)\n//   return data\n// }\n\nexport const getAllDepartmentsData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`department`);\n  return data;\n};\n\n// export function useAllDepartmentsData() {\n//   return useQuery(['repos'], getAllDepartmentsData)\n// }\n\n/**\n * This function is used to delete a Department by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Department/DeleteDepartment?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDepartment = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`department/${id}`);\n  return data;\n};\n\nexport const addDepartment = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`department`, payload);\n  return data;\n};\nexport const EditDepartment = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `department/${payload.editData.departmentid}`,\n    payload.handler\n  );\n  return data;\n};\n","import { useQuery } from 'react-query'\nimport { setAuthenticationToken } from './auth'\nimport { axiosInstance } from './axios'\n\nexport const getAllDevicesData = async () => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device`)\n  return data\n}\nexport function useAllDevicesData() {\n  return useQuery(['repos'], getAllDevicesData)\n}\n\nexport const getAllDevicesById = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-depId/${id}`)\n  return data\n}\nexport const getAllDevicesByFacId = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-facId/${id}`)\n  return data\n}\nexport const getAllDevicesByOrgId = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`device/by-orgId/${id}`)\n  return data\n}\n/**\n * This function is used to delete a Device by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'Device/DeleteDevice?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDevice = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.delete(`device/${id}`)\n  return data\n}\nexport const addDevice = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.post(`device`, payload)\n  return data\n}\nexport const EditDevice = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.patch(`device/${payload.editData.deviceid}`, payload.handler)\n  return data\n}\n","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDevicesSensorsData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `/sensor/get-sensors-by-deviceId/${id}`\n  );\n  return data;\n};\nexport const getAssignedOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-sensors-by-orgId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-orgId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofFac = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-facId/${id}`);\n  return data;\n};\nexport const getAllSensorsDataofDep = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-equipment-sensors-by-depId/${id}`);\n  return data;\n};\n/**\n * This function is used to delete a device sensor by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'SensorSetup/DeleteSensor?Id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteDeviceSensor = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/unAssigned-from-device/${id}`\n  );\n  return data;\n};\n\n// export function useAllDevicesSensorsData(id) {\n//   return useQuery(['repos', id], getAllDevicesSensorsData)\n// }\nexport const addDeviceSensor = async (payload) => {\n  const { data } = await axiosInstance.post(`sensor/assign-sensor`, payload);\n  return data;\n};\nexport const EditDeviceSensor = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/update-sensor/${payload.editData.sensorid}`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const addSensorConfiguration = async (payload) => {\n  const { data } = await axiosInstance.post(\n    `SensorDeviceConfiguration/CreateSensorDeviceConfiguration`,\n    payload\n  );\n  return data;\n};\n\nexport const getSensorConfigurationData = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `sensor/get-sensors-configuration/${id}`\n  );\n  return data;\n};\n\nexport const EditSensorConfigurationData = async ({ handler, id }) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `sensor/update-sensors-configuration`,\n    handler\n  );\n  return data;\n};\n","import { setAuthenticationToken } from './auth'\nimport { axiosInstance } from './axios'\n\nexport const getAllFacilitiesData = async () => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.get(`facility`)\n  return data\n}\n\n/**\n * This function is used to delete a facility by its 'id'.\n * Set the authentication token from local storage.Send a DELETE\n * request to the 'System' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteFacility = async (id) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.delete(`facility/${id}`)\n  return data\n}\nexport const addFacility = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.post(`facility`, {\n    facility_type: payload.facility_type,\n    name: payload.name,\n    customerid: Number(payload.customerid),\n    email: payload.email,\n    contactphonenumber: payload.contactphonenumber,\n    contactname: payload.contactname,\n    timezone: payload.timezone,\n    currency: payload.currency,\n    address: payload.address,\n    street: payload.street,\n    city: payload.city,\n    postcode: +payload.postcode,\n    latitude: +payload.latitude,\n    longitude: +payload.longitude,\n    isfacilityadmin: true,\n  })\n  return data\n}\nexport const EditFacility = async (payload) => {\n  setAuthenticationToken(localStorage.getItem('token'))\n  const { data } = await axiosInstance.patch(\n    `facility/${payload.editData.facilityid}`,\n    payload.handler,\n    // {\n    //   facilityType: payload.handler.facilityType,\n    //   name: payload.name,\n    //   customerid: Number(payload.customerid),\n    //   email: payload.email,\n    //   contactphonenumber: payload.contactphonenumber,\n    //   contactname: payload.handler.contactname,\n    //   timezone: payload.handler.timezone,\n    //   currency: payload.handler.currency,\n    //   address: payload.handler.address,\n    //   street: payload.handler.street,\n    //   city: payload.handler.city,\n    //   postcode: +payload.handler.postCode,\n    //   latitude: +payload.handler.latitude,\n    //   longitude: +payload.handler.longitude,\n    //   isfacilityadmin: true,\n    // }\n  )\n  return data\n}\n","import { useQuery } from \"react-query\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllOrgDevicesData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-assign-sensors`);\n  return data.data;\n};\nexport const getAllSensors = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`sensor/get-unassigned-sensors`);\n  return data;\n};\nexport const getAllAssignedSensorsofOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `sensor/get-all-sensors-by-orgId/${id}`\n  );\n  return data;\n};\n\nexport function useAllOrgDevicesData() {\n  return useQuery([\"repos\"], getAllOrgDevicesData);\n}\n\n/**\n * This function is used to delete an organization sensor by its 'id'.\n * Set the authentication token from local storage.Send a PATCH\n * request to the 'OrganizationSensor/UnassignSensor?id=' endpoint with the specified 'id'.\n * @param {*} id\n * @returns Return the response data\n */\nexport const deleteOrganizationSensor = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(`sensor/unAssigned/${id}`);\n  return data;\n};\nexport const addOrganizationSensor = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`sensor/assign-sensor`, payload);\n  return data;\n};\nexport const EditOrganizationSensor = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `/sensor/update-sensor/${payload.handler.id}`,\n    payload.handler\n  );\n  return data;\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllUnassignedUsersData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/unassigned-users`);\n  return data;\n};\nexport const getAllassignedUsersData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/assigned-users`);\n  return data;\n};\nexport const getAllUnassignedUsersDataByOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/unassigned-users/${id}`);\n  return data;\n};\nexport const getAllassignedUsersDataByOrg = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/assigned-users/${id}`);\n  return data;\n};\n\nexport const getAllRolesData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`roles`);\n  return data;\n};\nexport const addUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`user/create`, payload);\n  return data;\n};\n\nexport const EditUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/${payload.editData.userid}`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteUsers = async (userid) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`user/${userid}`);\n  return data;\n};\nexport const assignFacilityUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`facility/assignStaff`, payload);\n  return data;\n};\nexport const assignDepartmentUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`department/assignStaff`, payload);\n  return data;\n};\nexport const assignDeviceUser = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`device/assignStaff`, payload);\n  return data;\n};\nexport const UnassignFacilityUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteFacilityStaff?userid=${params.userid}&facilityid=${params.facilityid}`\n  );\n  return data;\n};\nexport const UnassignDepartmentUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDepartmentStaff?userid=${params.userid}&departmentid=${params.departmentid}`\n  );\n  return data;\n};\nexport const UnassignDeviceUser = async (params) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDeviceStaff?userid=${params.userid}&deviceid=${params.deviceid}`\n  );\n  return data;\n};\n","import create from 'zustand'\n\nconst useDataStore = create((set) => ({\n  data: [], // Initialize an empty array to store your data\n  addData: (newItem) => set((state) => ({ data: [newItem] })),\n}))\n\nexport default useDataStore\n","import React from 'react';\nimport './BlueGraph.css';\nimport ReactApexChart from 'react-apexcharts';\nimport PropTypes from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nfunction BlueGraph({ sensorId, sensorsData, loading }) {\n  const populateChart = () => {\n    if (!sensorsData) {\n      return {\n        updatedOptions: {\n          chart: {\n            type: 'area',\n            height: 350,\n          },\n          xaxis: {\n            categories: [],\n          },\n        },\n        updatedSeries: [],\n      };\n    }\n  \n    const { sensorName } = sensorsData;\n  \n    // Get the current date in the same format as your data\n    const currentDate = new Date().toISOString().split('T')[0];\n  \n    // Extract timestamps and measures from the data\n    const dataForCurrentDate = sensorsData[currentDate] || [];\n  \n    const timestamps = dataForCurrentDate.map((reading) => {\n      const date = new Date(reading.reading_timestamp);\n      return `${date.getHours()}:${(date.getMinutes() < 10 ? '0' : '') + date.getMinutes()}`;\n    });\n    const measures = dataForCurrentDate.map((reading) => parseFloat(reading.measure));\n  \n    // Update options with the extracted timestamps\n    const updatedOptions = {\n      chart: {\n        type: 'area',\n        height: 350,\n      },\n      xaxis: {\n        categories: timestamps,\n      },\n    };\n  \n    // Update series with the extracted measures\n    const updatedSeries = [\n      {\n        name: sensorName,\n        data: measures,\n      },\n    ];\n  \n    return { updatedOptions, updatedSeries };\n  };\n  \n\n  const { updatedOptions, updatedSeries } = populateChart();\n\n  return (\n    <div className=\"blue-top\">\n      <div className=\"main-container\">\n        {loading ? (\n          <Skeleton active paragraph={{ rows: 3 }} />\n        ) : (\n          <>\n            <div className=\"container\">\n              <p style={{color:'black'}}>{sensorsData?.sensorName}</p>\n            </div>\n            <div id=\"chart\">\n              <ReactApexChart\n                options={updatedOptions}\n                series={updatedSeries}\n                type=\"area\"\n                height={350}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nBlueGraph.propTypes = {\n  sensorId: PropTypes.string.isRequired,\n  sensorsData: PropTypes.object.isRequired,\n  loading: PropTypes.bool.isRequired,\n};\n\nexport default BlueGraph;\n","import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n// import { useLocation } from \"react-router-dom\";\nimport { CButton, CRow } from '@coreui/react' // Import CoreUI components\n// import { useNavigate } from \"react-router-dom\";\nimport DatePicker from 'react-datepicker'\n// import \"react-datepicker/dist/react-datepicker.css\";\n// import \"./index.css\";\n// import { FaCalendar } from \"react-icons/fa\";\n// import { getSensorDataById } from \"services/sensor\";\nimport BlueGraph from './BlueGraph/BlueGraph'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport { useNavigate , useLocation } from 'react-router-dom'\nexport default function GraphPage({}) {\n  const location = useLocation();\n  const sensorGraphData = location.state?.sensorGraphData || {};\n  const [startDate, setStartDate] = useState(new Date())\n  const [endDate, setEndDate] = useState(new Date())\n  const navi = useNavigate()\n  const CustomInput = ({ value, onClick }) => (\n    <div className=\"custom-input\">\n      <input type=\"text\" value={value} onClick={onClick} placeholder=\"Select a date\" />\n      {/* <FaCalendar onClick={onClick} className=\"calendar-icon\" /> */}\n    </div>\n  )\n  const onFormSubmit = (e) => {\n    e.preventDefault()\n  }\n  //   const location = useLocation();\n  //   const navi = useNavigate();\n  const [sensorData, setSensorsData] = useState()\n  const [loading, setLoading] = useState(true)\n  const [isSensorId, setIsSensorId] = useState()\n  useEffect(() => {\n    // let sensorId = location?.search?.split('&')[0].split('=')[1]\n    // let sensorName = location?.search?.split('&')[1]?.split('=')[1]\n    // sensorName = decodeURIComponent(sensorName)\n    // if (sensorName == 'undefined') {\n    //   sensorName = sensorId\n    // }\n    // setIsSensorId(sensorName)\n    // setLoading(true)\n    const utcstartDate = startDate.toISOString()\n    const utcEndDate = endDate.toISOString()\n    // Replace the following line with your CoreUI equivalent for fetching data\n    // getSensorDataById(sensorId, sensorName, utcstartDate, utcEndDate)\n    //   .then((res) => {\n    //     setLoading(false);\n    //     setSensorsData(res?.data);\n    //   })\n    //   .catch((err) => {\n    //     setLoading(false);\n    //     console.error(err);\n    //   });\n\n    // Dummy data for demonstration\n    const dummyData = {\n      // Your dummy data here\n    }\n    setLoading(false)\n    setSensorsData(dummyData)\n  }, [startDate, endDate])\n\n  const handleButtonClick = () => {\n    navi('/dashboard')\n    // const storedSystemId = localStorage.getItem('systemId')\n    // const storedThemeColor = localStorage.getItem('themeColor')\n    // const params = new URLSearchParams()\n    // params.set('systemId', storedSystemId)\n    // params.set('themeColor', storedThemeColor)\n    // navi(`/?${params.toString()}`)\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo()\n  return (\n    <div>\n      <div style={{ flexDirection: 'column', padding: { base: '10px', md: '20px' } }}>\n        <CButton w=\"20\" onClick={handleButtonClick}>\n          Back\n        </CButton>\n        <form onSubmit={onFormSubmit}>\n          <CRow\n            className=\"d-inline-flex p-2 docs-highlight\"\n            style={{ display: 'flex ', gap: '10px' }}\n          >\n            <div className=\"DatePicker\">\n              <div>\n                <div>\n                  <p style={{ fontWeight: 'bold' }} id={`${darkMode ? 'heading-dark' : ''}`}>\n                    Select a Start Date\n                  </p>\n                </div>\n                <DatePicker\n                  className={` form-select ${darkMode ? 'select-dark' : ''}`}\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  name=\"startDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select start date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n              <div>\n                <div>\n                  <p style={{ fontWeight: 'bold' }} id={`${darkMode ? 'heading-dark' : ''}`}>\n                    Select an End Date\n                  </p>\n                </div>\n                <DatePicker\n                  className={` form-select ${darkMode ? 'select-dark' : ''}`}\n                  selected={endDate}\n                  onChange={(date) => setEndDate(date)}\n                  name=\"endDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select end date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n            </div>\n          </CRow>\n        </form>\n        <div>\n          <BlueGraph sensorId={isSensorId} sensorsData={sensorGraphData} loading={loading} />\n        </div>\n      </div>\n    </div>\n  )\n}\nGraphPage.propTypes = {\n  value: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n};","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgBattery(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 13,\n    height: 22,\n    viewBox: \"0 0 13 22\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.2401 4.37L10.4401 4.37L10.4401 19.5367L3.2401 19.5367L3.2401 4.37ZM8.6401 3.20333L8.6401 2.03667L5.04009 2.03667L5.04009 3.20333L2.34009 3.20333C2.25259 3.20333 2.18072 3.23067 2.12447 3.28536C2.06822 3.34005 2.04009 3.40992 2.04009 3.495L2.04009 20.4117C2.04009 20.4967 2.06822 20.5666 2.12447 20.6213C2.18072 20.676 2.25259 20.7033 2.34009 20.7033L11.3401 20.7033C11.4276 20.7033 11.4995 20.676 11.5557 20.6213C11.612 20.5666 11.6401 20.4967 11.6401 20.4117L11.6401 3.49499C11.6401 3.40992 11.612 3.34005 11.5557 3.28536C11.4995 3.23067 11.4276 3.20333 11.3401 3.20333L8.6401 3.20333ZM5.04009 0.869995L8.6401 0.869995C8.97134 0.869995 9.25415 0.983928 9.48852 1.2118C9.7229 1.43965 9.84009 1.71461 9.84009 2.03667L11.3401 2.03667C11.7526 2.03667 12.1057 2.17946 12.3995 2.46505C12.6932 2.75064 12.8401 3.09396 12.8401 3.49499L12.8401 20.4117C12.8401 20.8127 12.6932 21.156 12.3995 21.4416C12.1057 21.7272 11.7526 21.87 11.3401 21.87L2.34009 21.87C1.9276 21.87 1.57447 21.7272 1.28072 21.4416C0.986965 21.156 0.840088 20.8127 0.840088 20.4117L0.840087 3.495C0.840087 3.09396 0.986964 2.75064 1.28072 2.46505C1.57447 2.17946 1.9276 2.03667 2.34009 2.03667L3.84009 2.03667C3.84009 1.71461 3.95728 1.43965 4.19165 1.21178C4.42603 0.983925 4.70884 0.869995 5.04009 0.869995Z\",\n    fill: \"#64748b\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgBattery);\nexport default __webpack_public_path__ + \"static/media/battery.1affb5b487e65028f8caf95b8e5df642.svg\";\nexport { ForwardRef as ReactComponent };","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport GaugeChart from \"react-gauge-chart\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport \"./Guage.css\";\n// import { calculatePercentage } from \"variables/DonutData\";\nconst Gauge = memo(\n  ({ minValue, maxValue, currentValue, readingTime, awsId, devicename }) => {\n    // debugger;\n    const safeCurrentValue = Math.min(\n      Math.max(currentValue, minValue),\n      maxValue\n    );\n    const percentage =\n      currentValue === null\n        ? 0\n        : (currentValue - minValue) / (maxValue - minValue);\n    const { darkMode, setDarkMode } = useGlobalInfo();\n\n    function calculateTimeDifference(readingDateTime) {\n      // debugger;\n      if (currentValue == null) {\n        return <span style={{ color: \"red\" }}>Offline</span>;\n      }\n\n      const currentDateTime = new Date();\n      const readingTime = new Date(readingDateTime);\n\n      const timeDifferenceMinutes = Math.floor(\n        (currentDateTime - readingTime) / (60 * 1000)\n      );\n\n      if (timeDifferenceMinutes < 60) {\n        return (\n          <span\n            style={{ color: \"red\" }}\n          >{`${timeDifferenceMinutes} minutes ago`}</span>\n        );\n      } else {\n        const timeDifferenceHours = Math.floor(timeDifferenceMinutes / 60);\n        return (\n          <span\n            style={{ color: \"red\" }}\n          >{`${timeDifferenceHours} hours ago`}</span>\n        );\n      }\n    }\n\n    function getTimeDifference(currentTime, prevTime) {\n      const standardizedReadingDateString =\n        prevTime.slice(0, 23).replace(\" \", \"T\") + \"Z\";\n      prevTime = new Date(standardizedReadingDateString);\n      currentTime = new Date(currentTime); // Convert to Date object\n\n      const prevTimeValid = !isNaN(prevTime.getTime());\n      const currentTimeValid = !isNaN(currentTime.getTime());\n\n      if (!prevTimeValid || !currentTimeValid) {\n        return <span style={{ color: \"red\" }}>Offline</span>;\n      }\n\n      const timeDifference = currentTime - prevTime;\n      const seconds = Math.floor(timeDifference / 1000);\n      const minutes = Math.floor(seconds / 60);\n      const hours = Math.floor(minutes / 60);\n      const days = Math.floor(hours / 24);\n\n      const timeAgo = (value, unit) =>\n        `${value} ${unit}${value > 1 ? \"s\" : \"\"} ago`;\n\n      if (days > 0) {\n        return <span style={{ color: \"red\" }}>{timeAgo(days, \"day\")}</span>;\n      } else if (hours > 0) {\n        return <span style={{ color: \"red\" }}>{timeAgo(hours, \"hour\")}</span>;\n      } else if (minutes > 0) {\n        return (\n          <span style={{ color: \"red\" }}>{timeAgo(minutes, \"minute\")}</span>\n        );\n      } else {\n        return (\n          <span style={{ color: \"red\" }}>{timeAgo(seconds, \"second\")}</span>\n        );\n      }\n    }\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n        }}\n      >\n        <div style={{ marginRight: \"00px\" }}>\n          {devicename}-{awsId}{\" \"}\n        </div>\n        <div></div>\n        <div>\n          <GaugeChart\n            id=\"gauge-chart2\"\n            nrOfLevels={20}\n            colors={[\"#2ECC71\", \"#ca0035\"]}\n            arcWidth={0.3}\n            percent={percentage}\n            needleColor=\"#BFC9CA\"\n            animate={true}\n            animDelay={1000}\n            animateDuration={2000}\n            style={{ height: \"auto\", width: \"auto\" }}\n          />\n        </div>\n        <div className=\"text\">\n          <div\n            className=\"Min-Max  d-flex\"\n            style={{ gap: \"28px\" }}\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          >\n            <span>\n              {minValue} <span>&#8451;</span>\n            </span>\n            <span>\n              {currentValue} <span>&#8451;</span>\n            </span>\n            <span>\n              {maxValue} <span>&#8451;</span>\n            </span>\n          </div>\n          <div\n            style={{\n              marginTop: \"3px\",\n              color: isNaN(currentValue) ? \"red\" : \"black\",\n            }}\n          >\n            {/* {calculateTimeDifference(readingTime)} */}\n            {getTimeDifference(new Date(), readingTime)}\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nGauge.displayName = \"Gauge\";\n\nexport default Gauge;\nGauge.propTypes = {\n  minValue: PropTypes.number.isRequired,\n  maxValue: PropTypes.number.isRequired,\n  currentValue: PropTypes.number.isRequired,\n  readingTime: PropTypes.number.isRequired,\n  awsId: PropTypes.number.isRequired,\n  devicename: PropTypes.number.isRequired,\n};\n// {\"sensortypeid\":59,\"property\":\"temp\",\"unit\":\"C\",\"minvalue\":5,\"maxvalue\":60,\"sensorid\":14,\"aws_sensorid\":\"9720101\",\"is_hidden\":false,\"is_deleted\":false,\"date_created\":\"2024-01-03T17:46:31.168Z\",\"date_updated\":\"2024-01-04T08:00:08.073Z\",\"updated_by\":1,\"description\":\" describes temperature\",\"name\":\"Electric\",\"is_active\":true,\"sensors\":{\"sensorid\":14,\"deviceid\":11,\"is_active\":true,\"customerid\":4,\"is_deleted\":false,\"aws_sensorid\":\"9720101\",\"date_created\":\"2024-01-03T17:52:36.550Z\",\"date_updated\":\"2024-01-03T17:52:36.550Z\",\"assigned_by\":1,\"sensorname\":\"Electric\",\"devices\":{\"deviceid\":11,\"devicename\":\"Freezer1\",\"departmentid\":9,\"devicetype\":null,\"manufacturer\":\"LG\",\"is_active\":true,\"date_created\":\"2023-12-21T03:15:41.667Z\",\"date_updated\":\"2023-12-21T03:15:41.667Z\",\"is_deleted\":false,\"facilityid\":6,\"customerid\":4,\"created_by\":1,\"updated_by\":1,\"email\":\"info@safelineit.com\",\"delaytime\":0},\"customers\":{\"customerid\":4,\"customername\":\"MicroSoft\",\"contactperson\":\"+12345678900\",\"email\":\"abdulwahab@gmail.com\",\"phone\":\"1234518644\",\"address\":\"123 Main Street\",\"city\":\"Your City\",\"is_active\":true,\"date_created\":\"2023-12-11T13:06:36.398Z\",\"date_updated\":\"2023-12-11T13:06:36.398Z\",\"is_deleted\":false,\"created_by\":1,\"updated_by\":1,\"street\":\"Street no 16\",\"postcode\":2456,\"credit\":0,\"calibration_date\":\"2023-12-11T13:06:36.398Z\",\"logo\":null,\"interval1\":6,\"interval2\":8,\"interval3\":10,\"interval4\":12}},\"value\":\"14.75\",\"batteryValue\":\"3.16\",\"readingDateTime\":\"2024-02-12 13:33:37.170\"}\n","import { BASE_URL } from \"src/constants/constants\";\nimport { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\nconst userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\nconst organizationPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _organization,\n  _view\n);\nconst facilityPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _facility,\n  _view\n);\nconst departmentPermission = hasPermissionToActionAccess(\n  userPermissions,\n  _department,\n  _view\n);\nconst devicepermission = hasPermissionToActionAccess(\n  userPermissions,\n  _device,\n  _view\n);\nexport const getAllSensorData = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  let { data } = await axiosInstance.get(\n    `sensor/get-assign-sensors-widget/${id}`\n  );\n\n  // const sse = new EventSource(`${BASE_URL}sse/${id}`);\n  // sse.onopen = function () {\n  //   console.log(\"Connection to server opened.\");\n  // };\n  // sse.onerror = function () {\n  //   console.log(\"EventSource failed.\");\n  // };\n\n  // sse.onmessage = function (event) {\n  //   const updatedData = JSON.parse(event.data);\n\n  //   let returnUpdatedData = {\n  //     data: \"\",\n  //   };\n  //   console.log(\"updatedData\", updatedData);\n\n  //   returnUpdatedData.data = data.data.map((item) => {\n  //     debugger;\n  //     if (\n  //       item.awsSensorId === updatedData.aws_sensorid &&\n  //       item.property === updatedData.property\n  //     ) {\n  //       console.log(\"updatedData\", updatedData);\n  //       console.log(\"item\", item);\n  //       item.value = updatedData.value;\n  //       return item;\n  //     }\n  //     return item;\n  //   });\n  //   data = returnUpdatedData.data;\n  //   console.log(\"new data\", data);\n  // };\n  return data;\n};\n\nexport const FindDashboard = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `dashboard/find`,\n    payload\n    //  {\n    //   customerid: Number(payload),\n    // }\n  );\n  return data;\n};\n\nexport const ReportData = async (payload) => {\n  // debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`aws/save-sensor-data`, payload);\n  return data;\n};\nexport const CheckPointReportData = async (payload, id) => {\n  if (payload.id !== undefined) {\n    setAuthenticationToken(localStorage.getItem(\"token\"));\n    const { data } = await axiosInstance.post(\n      `sensor/checkpoint-report/${payload.id}`,\n      payload.payload\n    );\n    return data;\n  }\n};\nexport const SensorGraphData = async ({ awsSensorId, ...payload }) => {\n  debugger;\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `sensor/graph-report/${awsSensorId}`,\n    payload\n  );\n  return data;\n};\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { BASE_URL } from \"src/constants/constants\";\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n} from \"@coreui/react\";\nimport Skeleton from \"react-loading-skeleton\";\nimport Battery from \"../../../assets/images/battery.svg\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n// import { getSensorsData } from \"services/sensor\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nimport Gauge from \"./Guage\";\nimport { getAllSensorData, SensorGraphData } from \"src/hooks/useSensors\";\nimport PropTypes from \"prop-types\";\n\nimport \"./Guage.css\";\nconst Donut = ({\n  setAlarms,\n  setoffline,\n  setOk,\n  setwarnings,\n  showAlarms,\n  showoffline,\n  showok,\n  showwarnings,\n}) => {\n  const { mutate: SensorsData } = useMutation(getAllSensorData);\n  const { mutate: SensorGraph } = useMutation(SensorGraphData);\n  const [widgetsData, setWidgetsData] = useState();\n  const [sensorData, setSensorData] = useState([]);\n  const [loadingDonut, setLoadingDonut] = useState(false);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  function getAllSensorsData(id) {\n    debugger;\n    SensorsData(id, {\n      onSuccess: (data) => {\n        debugger;\n        setWidgetsData(data.data);\n        setSensorData(data.data); // Set sensorData here\n      },\n      onError: (error) => {\n        // Handle error if needed\n      },\n    });\n  }\n  function getSensorGraphData(payload, item) {\n    debugger;\n    SensorGraph(payload, {\n      onSuccess: (data) => {\n        const stateData = {\n          sensorGraphData: data.data,\n          item: item,\n        };\n        navi(`/sensor/graph`, { state: stateData });\n        // Set sensorData here\n      },\n      onError: (error) => {\n        // Handle error if needed\n      },\n    });\n  }\n  const handleCardClick = (item) => {\n    debugger;\n    const currentDate = new Date();\n    const formattedDate = currentDate.toISOString();\n\n    const payload = {\n      sensorTypeId: item.sensorTypeId,\n      awsSensorId: item.awsSensorId,\n      startDate: formattedDate,\n      endDate: formattedDate,\n    };\n\n    getSensorGraphData(payload, item);\n    // navi(`/sensor/graph`);\n  };\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  useEffect(() => {\n    const fetchData = () => {\n      if (organizationPermission) {\n        debugger;\n        const orgId = localStorage.getItem(\"OrganizationId\");\n        if (\n          orgId !== null &&\n          orgId !== undefined &&\n          orgId !== \"Select Organization\"\n        ) {\n          setLoadingDonut(true);\n          getAllSensorsData(orgId);\n          setLoadingDonut(false);\n        }\n      } else {\n        const orgId = localStorage.getItem(\"organizationid\");\n        if (orgId !== null) {\n          setLoadingDonut(true);\n          getAllSensorsData(orgId);\n          setLoadingDonut(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 300000);\n\n    return () => clearInterval(intervalId);\n  }, [organizationPermission]);\n  useEffect(() => {\n    const orgId = localStorage.getItem(\"OrganizationId\");\n\n    if (\n      orgId !== null &&\n      orgId !== undefined &&\n      orgId !== \"Select Organization\"\n    ) {\n      const sse = new EventSource(`${BASE_URL}sse/${orgId}`);\n\n      sse.onmessage = (event) => {\n        const updatedSensorData = JSON.parse(event.data);\n\n        setWidgetsData((prevWidgetsData) => {\n          const updatedWidgetsData = prevWidgetsData.map((widget) => {\n            if (\n              widget.awsSensorId === updatedSensorData.aws_sensorid &&\n              widget.property === updatedSensorData.property\n            ) {\n              return {\n                ...widget,\n                value: updatedSensorData.value,\n                readingDateTime: updatedSensorData.readingDateTime,\n                batteryValue: updatedSensorData.batteryValue,\n              };\n            }\n\n            return widget;\n          });\n          console.log(updatedWidgetsData);\n          setSensorData(updatedWidgetsData);\n          return updatedWidgetsData;\n        });\n      };\n\n      return () => {\n        sse.close();\n      };\n    }\n  }, []);\n\n  let newWarnings = 0;\n  let newOffline = 0;\n  let newOk = 0;\n  let warningSensors = [];\n  let offlineSensors = [];\n  let okSensors = [];\n  sensorData?.forEach((item) => {\n    if (\n      item?.value !== null &&\n      (item?.value < item?.minValue || item?.value > item?.maxValue)\n    ) {\n      newWarnings++;\n      warningSensors.push(item);\n    } else if (item?.value === null) {\n      newOffline++;\n      offlineSensors.push(item);\n    } else {\n      newOk++;\n      okSensors.push(item);\n    }\n  });\n\n  setwarnings(newWarnings);\n  setoffline(newOffline);\n  setOk(newOk);\n  let sensorsToMap = sensorData;\n  if (showwarnings) {\n    sensorsToMap = warningSensors;\n  } else if (showoffline) {\n    sensorsToMap = offlineSensors;\n  } else if (showok) {\n    sensorsToMap = okSensors;\n  } else {\n    sensorsToMap = sensorData;\n  }\n  const navi = useNavigate();\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <div className=\"card-top\" style={{ width: \"100vw\" }}>\n      <CRow className=\"sensor_Container my-5 justify-content-start\">\n        {loadingDonut ? (\n          <>\n            {[...Array(2)].map((_, index) => (\n              <CCol\n                key={index}\n                sm=\"12\"\n                md=\"6\"\n                lg=\"3\"\n                className={` ${\n                  darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n              >\n                <CCard>\n                  <CCardBody>\n                    <Skeleton active paragraph={{ rows: 3 }} />\n                  </CCardBody>\n                </CCard>\n              </CCol>\n            ))}\n            <div></div>\n          </>\n        ) : (\n          sensorsToMap?.map((item, index) => (\n            <CCol\n              key={index}\n              sm=\"12\"\n              className={` ${\n                darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n              style={{\n                border: \"1px solid rgba(163, 163, 163, 0.32)\",\n                borderRadius: \"5px\",\n                padding: \"0\",\n                width: \"auto\",\n                height: \"100%\",\n              }}\n            >\n              <CCard\n                style={{ cursor: \"pointer\" }}\n                className={` ${\n                  darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n                onClick={() => handleCardClick(item)}\n              >\n                <CCardHeader\n                  className=\"d-flex justify-content-between p-2 align-items-center\"\n                  id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                  style={{ height: \"45px\" }}\n                >\n                  <p className=\"m-0\">\n                    {item?.sensorName ? item.sensorName : item.sensorId}\n                  </p>\n                  <CCol className=\"battery\">\n                    <img\n                      src={Battery}\n                      alt=\"Battery\"\n                      style={{\n                        width: \"20px\",\n                        height: \"20px\",\n                        marginLeft: \"5px\",\n                      }}\n                    />\n                    <div\n                      style={{\n                        color: item.batteryValue < 3.5 ? \"red\" : \"green\",\n                      }}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      {item.batteryValue}\n                    </div>\n                  </CCol>\n                </CCardHeader>\n                <CCardBody\n                  style={{\n                    backgroundColor:\n                      item?.value === null\n                        ? \"rgb(157, 223, 228)\"\n                        : item?.value < item?.minValue ||\n                          item?.value > item?.maxValue\n                        ? \"rgb(238, 141, 141)\"\n                        : \"rgb(144, 238, 144 )\",\n                  }}\n                >\n                  <Gauge\n                    devicename={item?.deviceName}\n                    awsId={item?.awsSensorId}\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    minValue={item?.minValue}\n                    maxValue={item?.maxValue}\n                    currentValue={isNaN(item?.value) ? 0 : item?.value}\n                    readingTime={\n                      item?.value !== null ? item?.readingDateTime : \"\"\n                    }\n                  />\n                </CCardBody>\n\n                {/* <CCardFooter>\n                  <CRow>\n                    <CCol className=\"min\">\n                      <div style={{ display: \"flex\", gap: \"3px\" }}>\n                        <div\n                          className=\"min-heading\"\n                          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                        >\n                          Min\n                        </div>\n                        <div id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                          {item.minValue}\n                        </div>\n                      </div>\n                    </CCol>\n                    <CCol className=\"max\">\n                      <div\n                        style={{\n                          display: \"flex\",\n                          gap: \"3px\",\n                          justifyContent: \"flex-end\",\n                          fontSize: \"14px\",\n                        }}\n                      >\n                        <div\n                          className=\"max-heading\"\n                          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                        >\n                          Max\n                        </div>\n                        <div id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                          {item.maxValue}\n                        </div>\n                      </div>\n                    </CCol>\n                  </CRow>\n                  <Divider />\n                  <CRow>\n                    <CCol className=\"hours\">\n                      {getTimeDifference(new Date(), item?.readingDateTime)}\n                    </CCol>\n                  </CRow>\n                </CCardFooter> */}\n              </CCard>\n            </CCol>\n          ))\n        )}\n      </CRow>\n    </div>\n  );\n};\n\nexport default Donut;\n\nDonut.propTypes = {\n  setAlarms: PropTypes.func.isRequired,\n  setoffline: PropTypes.func.isRequired,\n  setOk: PropTypes.func.isRequired,\n  setwarnings: PropTypes.func.isRequired,\n  showAlarms: PropTypes.bool.isRequired,\n  showoffline: PropTypes.bool.isRequired,\n  showok: PropTypes.bool.isRequired,\n  showwarnings: PropTypes.bool.isRequired,\n};\n","/* eslint-disable react/prop-types */\n// import React, { useState, useEffect } from \"react\";\n// import { Table } from \"antd\";\n// import { getSensorsDataHCCAP } from \"services/sensor\";\n// import \"./ReportTable.css\";\n\n// const ReportTable = ({ date, day }) => {\n//   const handleDateChange = (event) => {\n//     setSelectedDate(event.target.value);\n//   };\n//   const [loading, setLoading] = useState(false);\n//   const [hccpColumns, setHccpColumns] = useState([]);\n//   const [hccpData, setHccpData] = useState([]);\n\n//   useEffect(() => {\n//     setLoading(true);\n//     console.log(date, day);\n//     getSensorsDataHCCAP({ date, day })\n//       .then((res) => {\n//         console.log(\"res\", res);\n//         setLoading(false);\n//         setHccpData(res.data);\n//       })\n//       .catch((err) => {\n//         setLoading(false);\n//       });\n//   }, [date, day]);\n\n//   const uniqueDates = [\n//     ...new Set(\n//       hccpData.flatMap((sensor) => sensor.dates.map((date) => date.date))\n//     ),\n//   ];\n//   const uniqueIntervals = [\n//     ...new Set(\n//       hccpData.flatMap((sensor) =>\n//         sensor.dates.flatMap((date) =>\n//           date.intervals.map((interval) => interval.interval)\n//         )\n//       )\n//     ),\n//   ];\n//   return (\n//     <>\n//       <table>\n//         <thead>\n//           <tr>\n//             <th>Sensor Name</th>\n//             {uniqueDates.map((date) => (\n//               <th key={date} colSpan={uniqueIntervals.length}>\n//                 {date}\n//               </th>\n//             ))}\n//           </tr>\n//           <tr>\n//             <th></th>\n//             {uniqueDates.map((date) =>\n//               uniqueIntervals.map((interval) => (\n//                 <th key={`${date}-${interval}`}>{interval}</th>\n//               ))\n//             )}\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {hccpData.map((sensor) => (\n//             <tr key={sensor.name}>\n//               <td>{sensor.name}</td>\n//               {uniqueDates.map((date) =>\n//                 uniqueIntervals.map((interval) => (\n//                   <td key={`${date}-${interval}`}>\n//                     {sensor.dates\n//                       .find((item) => item.date === date)\n//                       ?.intervals.find((item) => item.interval === interval)\n//                       ?.value || 0}\n//                   </td>\n//                 ))\n//               )}\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//     </>\n//   );\n// };\n\n// export default ReportTable;\n\nimport React from \"react\";\nimport { useState, useEffect } from \"react\";\nimport \"./ReportTable.css\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst ReportTable = ({ date, day, data }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const [sensorData, setSensorData] = useState(data || []);\n  // const [intervals,setIntervals]=useState(data.intervals)\n\n  useEffect(() => {\n    // If data changes externally, update the state\n    if (data) {\n      setSensorData(data);\n    }\n  }, [data]);\n  // Dummy data for sensors\n  const dummyData = [\n    {\n      name: \"Heater\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 25 },\n            { interval: \"2:00\", value: 30 },\n            { interval: \"3:00\", value: 25 },\n            { interval: \"4:00\", value: 30 },\n            { interval: \"5:00\", value: 25 },\n            { interval: \"6:00\", value: 30 },\n            // Add more intervals as needed\n          ],\n        },\n        // Add more dates as needed\n      ],\n    },\n    {\n      name: \"Freezer\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 20 },\n            { interval: \"2:00\", value: 22 },\n            { interval: \"3:00\", value: 20 },\n            { interval: \"4:00\", value: 22 },\n            { interval: \"5:00\", value: 20 },\n            { interval: \"6:00\", value: 22 },\n          ],\n        },\n      ],\n    },\n    {\n      name: \"temp\",\n      dates: [\n        {\n          date: \"2023-01-01\",\n          intervals: [\n            { interval: \"1:00\", value: 20 },\n            { interval: \"2:00\", value: 35 },\n            { interval: \"3:00\", value: 20 },\n            { interval: \"4:00\", value: 35 },\n            { interval: \"5:00\", value: 20 },\n            { interval: \"6:00\", value: 35 },\n          ],\n        },\n      ],\n    },\n  ];\n  const uniqueDates = [...new Set(sensorData.map((sensor) => sensor.date))];\n  const uniqueIntervals = [\n    ...new Set(\n      sensorData.flatMap((sensor) =>\n        sensor.readings.map((reading) => reading.interval)\n      )\n    ),\n  ];\n\n  const measuresMap = new Map();\n\n  sensorData.forEach((sensor) => {\n    const awsId = sensor.aws_id;\n    const sensorName = sensor.sensorValue;\n    const key = `${awsId}-${sensorName}`;\n\n    const measures = measuresMap.get(key) || {\n      awsId,\n      sensorName,\n      measures: [],\n    };\n\n    uniqueIntervals.forEach((interval) => {\n      const intervalMeasures = sensor.readings\n        .filter((reading) => reading.interval === interval)\n        .map((reading) => ({\n          measure: reading.measure,\n          interval: reading.interval,\n          min: sensor.min, // Include min from the sensor object\n          max: sensor.max, // Include max from the sensor object\n        }));\n      measures.measures.push(intervalMeasures);\n    });\n\n    measuresMap.set(key, measures);\n  });\n\n  return (\n    <>\n      <table className=\"w-100 hccp_report_table\">\n        <thead>\n          <tr>\n            <th id={`${darkMode ? \"heading-dark\" : \"\"}`}>Sensor Name</th>\n            {uniqueDates.map((uniqueDate) => (\n              <th\n                id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                key={uniqueDate}\n                colSpan={uniqueIntervals.length}\n              >\n                {uniqueDate}\n              </th>\n            ))}\n          </tr>\n          <tr>\n            <th></th>\n            {uniqueDates.map(() =>\n              uniqueIntervals.map((interval) => (\n                <th key={interval}>{`${interval}:00`}</th>\n              ))\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {[...measuresMap.values()].map(({ awsId, sensorName, measures }) => (\n            <tr key={`${awsId}-${sensorName}`}>\n              <td id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                {sensorName}-{awsId}\n              </td>\n              {measures.flat().map((reading, index) => {\n                // Extract the relevant data from the reading\n                const { measure, interval, min, max } = reading;\n                // console.log(\"Measures:\", measures);\n\n                // Handle the case where measure is 0\n                if (parseFloat(measure) === 0) {\n                  return (\n                    <td\n                      key={`${awsId}-${sensorName}-${index}`}\n                      style={{\n                        backgroundColor: \"lightgrey\", // Gray for 0 value\n                        border: \"3px solid #bababa\",\n                        padding: \"5px\",\n                      }}\n                    >\n                      n/a\n                    </td>\n                  );\n                }\n\n                return (\n                  <td\n                    key={`${awsId}-${sensorName}-${index}`}\n                    style={{\n                      backgroundColor:\n                        parseFloat(measure) > parseFloat(max) ||\n                        parseFloat(measure) < parseFloat(min)\n                          ? \"#FF0000\" // Red for values outside the min-max range\n                          : \"#90EE90\", // Green for normal values\n                      border: \"3px solid #bababa\",\n                      padding: \"5px\",\n                    }}\n                  >\n                    {measure}\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n        ;\n      </table>\n    </>\n  );\n};\n\nexport default ReportTable;\n","import React, { useEffect, useState } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport ReportTable from \"./ReportTable/ReportTable\";\nimport { useMutation } from \"react-query\";\nimport Select from \"react-select\";\nimport {\n  CCard,\n  CCardBody,\n  CCardFooter,\n  CCardHeader,\n  CCol,\n  CRow,\n  CButton,\n} from \"@coreui/react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { ReportData, CheckPointReportData } from \"src/hooks/useSensors\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n\nfunction TableCard() {\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [startDate, setStartDate] = useState(new Date());\n  const [day, setDay] = useState(1);\n  const [data, setData] = useState([]);\n  const [sensors, setSensors] = useState([]);\n  const [intervals, setIntervals] = useState([]);\n  const payload = {\n    days: day,\n    startDate: startDate.toISOString(), // Convert the date to ISO format\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: reportData } = useMutation(ReportData);\n  const { mutate: checkpointReport } = useMutation(CheckPointReportData);\n  function reportDataFetch(selectedId) {\n    reportData(selectedId, {\n      onSuccess: (data) => {\n        // console.log(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function checkpointReportDataFetch(payload, id) {\n    debugger;\n    const combinedData = {\n      payload,\n      id,\n    };\n\n    checkpointReport(combinedData, {\n      onSuccess: (data) => {\n        debugger;\n        setData(data.data?.checkPoints);\n        setIntervals(data.data?.intervals);\n        setSensors(data.data?.sensors);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  useEffect(() => {\n    const fetchData = () => {\n      reportDataFetch();\n    };\n    fetchData();\n\n    const intervalId = setInterval(fetchData, 300000);\n\n    return () => clearInterval(intervalId);\n  }, []);\n  useEffect(() => {\n    const payload = {\n      days: day,\n      startDate: startDate.toISOString(),\n      sensorIds: [],\n    };\n    if (organizationPermission) {\n      debugger;\n      const orgId = localStorage.getItem(\"OrganizationId\");\n      if (\n        orgId !== null &&\n        orgId !== undefined &&\n        orgId !== \"Select Organization\"\n      ) {\n        debugger;\n        checkpointReportDataFetch(payload, orgId);\n      }\n    } else {\n      debugger;\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"organizationid\")\n      );\n    }\n  }, [startDate, day, organizationPermission]);\n  const handleDatePickerChange = (date) => {\n    setStartDate(date);\n    const payload = {\n      days: day,\n      startDate: date.toISOString(),\n    };\n\n    checkpointReportDataFetch(payload);\n  };\n  const handleSelectChange = (e) => {\n    const selectedDay = Number(e.target.value);\n    setDay(selectedDay);\n    const payload = {\n      days: selectedDay,\n      startDate: startDate.toISOString(),\n    };\n\n    checkpointReportDataFetch(payload);\n  };\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const handleMultiSelectChange = (selectedOptions) => {\n    // Store an array of sensor type IDs in the selectedSensors state\n    const selectedSensorTypeIds = selectedOptions.map((sensor) => sensor.value);\n    setSelectedSensors(selectedSensorTypeIds);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    const payload = {\n      days: day,\n      startDate: startDate.toISOString(),\n      sensorIds: selectedSensors,\n    };\n\n    if (organizationPermission) {\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"OrganizationId\")\n      );\n    } else {\n      checkpointReportDataFetch(\n        payload,\n        localStorage.getItem(\"organizationid\")\n      );\n    }\n  };\n  return (\n    <CCard\n      className={`table_container_light ${\n        darkMode ? \"table_container_dark\" : \"\"\n      }`}\n      style={{\n        marginTop: \"2rem\",\n        borderRadius: \"5px\",\n        padding: \"25px\",\n        border: \"1px solid rgba(163, 163, 163, 0.32)\",\n      }}\n    >\n      <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>CheckPoint Report</h3>\n      <form className=\"d-flex\">\n        <div className=\"d-flex gap-5 mt-2 \">\n          <div className=\"Custom-Date items-center d-flex gap-2 w-50\">\n            <label\n              htmlFor=\"datePicker\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            >\n              Select a Date\n            </label>\n            <DatePicker\n              className={`date form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              selected={startDate}\n              name=\"startDate\"\n              dateFormat=\"MM/dd/yyyy\"\n              placeholderText=\"Select a date\"\n              onChange={handleDatePickerChange}\n              // style={{ width: \"300px\" }}\n            />\n          </div>\n          <div className=\"d-flex\">\n            <label\n              htmlFor=\"datePicker\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              style={{ marginRight: \"20px\", marginLeft: \"30px\" }}\n            >\n              Select Sensors\n            </label>\n            <Select\n              isMulti\n              className={`form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              value={selectedSensors.map((sensorTypeId) => ({\n                label: sensors.find(\n                  (sensor) => sensor.sensorTypeId === sensorTypeId\n                )?.sensorValue,\n                value: sensorTypeId,\n              }))}\n              options={sensors.map((sensor) => ({\n                label: sensor.sensorValue,\n                value: sensor.sensorTypeId,\n              }))}\n              onChange={handleMultiSelectChange}\n              styles={{\n                container: (provided) => ({\n                  ...provided,\n                  width: 300,\n                }),\n              }}\n            />\n\n            <button\n              onClick={handleSubmit}\n              style={{\n                width: \"100px\",\n                height: \"45px\",\n                borderColor: \"lightgray\",\n                borderBottomColor: \"lightgray\",\n                borderRadius: \"5px\",\n                boxShadow: \"3px 3px  0 rgba(212, 211, 209, 0.9) \",\n                marginLeft: \"10px\",\n                marginTop: \"0px\",\n              }}\n            >\n              Submit\n            </button>\n\n            <div className=\"d-flex\" style={{ marginRight: \"0px\" }}>\n              <label\n                htmlFor=\"datePicker\"\n                id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                style={{ marginRight: \"20px\", marginLeft: \"30px\" }}\n              >\n                Days\n              </label>\n              <select\n                className={`form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                value={day}\n                style={{ width: \"80px\" }}\n                onChange={handleSelectChange}\n              >\n                {[1, 2, 3, 4, 5, 6, 7].map((value) => (\n                  <option key={value} value={value}>\n                    {value}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"d-flex gap-2\" style={{ marginLeft: \"5px\" }}>\n              {Object?.entries(intervals).map(\n                ([intervalName, intervalValue]) => (\n                  <button\n                    key={intervalValue}\n                    color=\"primary\"\n                    className=\"float-end mr-3\"\n                    style={{\n                      width: \"50px\",\n                      height: \"45px\",\n                      borderColor: \"lightgray\",\n                      borderBottomColor: \"lightgray\",\n                      borderRadius: \"5px\",\n                      boxShadow: \"3px 3px  0 rgba(212, 211, 209, 0.9) \",\n                    }}\n                    onClick={(e) => e.preventDefault()}\n                  >\n                    {intervalValue}\n                  </button>\n                )\n              )}\n            </div>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"overflow-x-scroll w-100\">\n        <ReportTable date={startDate} day={day} data={data} />\n      </div>\n    </CCard>\n  );\n}\n\nexport default TableCard;\n","/* eslint-disable react/prop-types */\n// /* eslint-disable prettier/prettier */\nimport React from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport \"../dashboard/Dashboard.css\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst CounterComp = ({ name, count, icon }) => {\n  const orgId = localStorage.getItem(\"OrganizationId\")\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const customStyle = {\n    ...(orgId && orgId !== \"Select Organization\" && { width: \"20%\" }), // If orgId is selected and not \"Select Organization\", add width: \"20%\"\n    visibility: \"visible\",\n    // Add other styles as needed\n  };\n  return (\n    <>\n      {/* <div className=\"counter_cards mb-3\">\n        <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>{name}</h3>\n        <div\n          className=\"count\"\n          id={`${darkMode ? \"count-dark\" : \"count-light\"}`}\n        >\n          <p id={`${darkMode ? \"heading-dark\" : \"\"}`}>{count}</p>\n        </div>\n      </div> */}\n      {/* new */}\n      <div\n        className=\"item wow fadeInUpBig animated animated\"\n        style={customStyle}\n        id={`${darkMode ? \"count-dark\" : \"count-light\"}`}\n      >\n        <CIcon icon={icon} alt=\"Count\" />\n        <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`}>{count}</h3>\n        <span></span>\n        <p id={`${darkMode ? \"heading-dark\" : \"\"}`}>{name}</p>\n      </div>\n    </>\n  );\n};\n\nexport default CounterComp;\n","import React, { useEffect, useState } from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\n// import Charts from \"../charts/Charts\";\nimport { useMutation } from \"react-query\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilTriangle,\n  cilAirplay,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport Donut from \"../Components/Donut\";\nimport TableCard from \"../Components/TableCard\";\n// import GraphPage from \"./Components/GraphPage\";\n// import CounterComp from \"./Counter_Comp\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CCardTitle,\n  CCardText,\n  CRow,\n  CCardHeader,\n  CCardFooter,\n  CHeader,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from \"@coreui/react\";\nimport { FindDashboard } from \"src/hooks/useSensors\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\n\nfunction ConditionSummary() {\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <div>\n        <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Conditions summary</h1>\n        <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n          Keep track of your Sensor status\n        </h6>\n      </div>\n\n      <div style={{ marginTop: \"30px\", marginBottom: \"30px\", color: \"black\" }}>\n        <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n      </div>\n\n      <div>\n        <CRow\n          className=\"justify-content-between\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            flexDirection: \"column\",\n            flexWrap: \"wrap\",\n            marginTop: \"40px\",\n            gap: \"1rem\",\n          }}\n        >\n          {/* card red */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"rgb(255 179 179)\",\n            }}\n          >\n            <CCardText style={{ color: \"#FF0505\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>00</h1>\n              <p>\n                <CIcon\n                  icon={cilTriangle}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Warning\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card yellow */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#fff374\",\n            }}\n          >\n            <CCardText style={{ color: \"#da582c\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#da582c\" }}>01</h1>\n              <p>\n                <CIcon\n                  icon={cilAirplay}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Alarm\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card green */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#6EF768\",\n            }}\n          >\n            <CCardText style={{ color: \"#32712F\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>02</h1>\n              <p>\n                <CIcon\n                  icon={cilCheckAlt}\n                  alt=\"Name\"\n                  size=\"xl\"\n                  style={{ marginLeft: \"10px\" }}\n                />\n                Okay\n              </p>\n            </CCardText>\n          </CCol>\n          {/* card blue */}\n          <CCol\n            sm={6}\n            style={{\n              display: \"flex\",\n              alignItems: \"center\",\n              justifyContent: \"center\",\n              width: \"auto\",\n              height: \"auto\",\n              padding: \"12px 60px\",\n              borderRadius: \"20px\",\n              backgroundColor: \"#9DDFE4\",\n            }}\n          >\n            <CCardText style={{ color: \"#349FC4\" }}>\n              <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>01</h1>\n              <p>\n                <CIcon icon={cilSortAscending} alt=\"Name\" size=\"xl\" />\n                Offline\n              </p>\n            </CCardText>\n          </CCol>\n        </CRow>\n        <>\n          <CRow>\n            <Donut />\n          </CRow>\n          <TableCard />\n        </>\n      </div>\n    </>\n  );\n}\n\nexport default ConditionSummary;\n","import React, { useEffect, useState } from \"react\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport Charts from \"../charts/Charts\";\nimport { useMutation } from \"react-query\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilWarning,\n  cilAirplay,\n  cilAlarm,\n  cilToggleOff,\n  cilLibraryBuilding,\n  cilPeople,\n  cilBuilding,\n  cilDevices,\n  cilAudio,\n  cilAudioSpectrum,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport Donut from \"./Components/Donut\";\nimport TableCard from \"./Components/TableCard\";\nimport GraphPage from \"./Components/GraphPage\";\nimport CounterComp from \"./Counter_Comp\";\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CCol,\n  CCardTitle,\n  CCardText,\n  CRow,\n  CCardHeader,\n  CCardFooter,\n  CHeader,\n  CToast,\n  CToastBody,\n  CToastHeader,\n  CToaster,\n} from \"@coreui/react\";\nimport { FindDashboard } from \"src/hooks/useSensors\";\nimport Counter from \"./Components/condition_cards/ConditionCards\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport ConditionSummary from \"./ConditionSummary/ConditionSummary\";\n\nimport \"./Dashboard.css\";\nconst Dashboard = () => {\n  const { dispatch } = useLoader();\n  const { departmentId } = useGlobalInfo();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: dashboardFind } = useMutation(FindDashboard);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [organizationCount, setOrganiztionCount] = useState(0);\n  const [facilityCount, setFacilityCount] = useState(0);\n  const [departmentCount, setDepartmentCount] = useState(0);\n  const [deviceCount, setDeviceCount] = useState(0);\n  const [unAssignedSensorCount, setUnAssignedSensorCount] = useState(0);\n  const [assignedSensorCount, setAssignedSensorCount] = useState(0);\n  const orgID = localStorage.getItem(\"OrganizationId\");\n  const facID = localStorage.getItem(\"facilityId\");\n  const depID = localStorage.getItem(\"departmentId\");\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  function DashboardData(id, idType) {\n    const payload = {\n      [idType]: Number(id),\n    };\n\n    setTimeout(() => {\n      dashboardFind(payload, {\n        onSuccess: (res) => {\n          setOrganiztionCount(res.data.counts?.OrganizationCount);\n          setFacilityCount(res.data.counts?.FacilityCount);\n          setDepartmentCount(res.data.counts?.DepartmentCount);\n          setDeviceCount(res.data.counts?.DeviceCount);\n          setUnAssignedSensorCount(res.data.counts?.UnAssignedSensorCount);\n          setAssignedSensorCount(res.data.counts?.AssignedSensorCount);\n          hideLoader();\n        },\n        onError: (error) => {\n          setFacilityCount(0);\n          setDepartmentCount(0);\n          setDeviceCount(0);\n          setUnAssignedSensorCount(0);\n          setAssignedSensorCount(0);\n          hideLoader();\n        },\n      });\n    }, 0);\n  }\n  const [warnings, setwarnings] = useState(0);\n  const [offline, setoffline] = useState(0);\n  const [ok, setOk] = useState(0);\n  const [Alarms, setAlarms] = useState(0);\n  const [showwarnings, setShowwarnings] = useState(false);\n  const [showoffline, setShowoffline] = useState(false);\n  const [showok, setShowOk] = useState(false);\n  const [showAlarms, setShowAlarms] = useState(false);\n  const handleOkClick = () => {\n    setShowOk(true);\n    setShowoffline(false);\n    setShowwarnings(false);\n  };\n  const handleOfflineClick = () => {\n    setShowoffline(true);\n    setShowwarnings(false);\n    setShowOk(false);\n  };\n  const handleWarningsClick = () => {\n    setShowwarnings(true);\n    setShowoffline(false);\n    setShowOk(false);\n  };\n  const handleClearClick = () => {\n    setShowOk(false);\n    setShowoffline(false);\n    setShowwarnings(false);\n  };\n  // useEffect(() => {\n  //   if (\n  //     orgID !== null &&\n  //     orgID !== undefined &&\n  //     orgID !== \"Select Organization\"\n  //   ) {\n  //     DashboardData(orgID, \"customerid\");\n  //   } else {\n  //     DashboardData();\n  //   }\n  // }, [orgID, facID]);\n  useEffect(() => {\n    let filterValue, filterType;\n    if (\n      depID !== null &&\n      depID !== undefined &&\n      depID !== \"Select Department\"\n    ) {\n      filterValue = depID;\n      filterType = \"departmentid\";\n    } else if (\n      facID !== null &&\n      facID !== undefined &&\n      facID !== \"Select Facility\"\n    ) {\n      filterValue = facID;\n      filterType = \"facilityid\";\n    } else if (orgID !== null && orgID !== undefined) {\n      if (orgID !== \"Select Organization\") {\n        filterValue = orgID;\n        filterType = \"customerid\";\n      } else {\n        // orgID is \"Select Organization,\" call DashboardData() without filters\n        DashboardData();\n        return;\n      }\n    }\n\n    if (filterValue !== undefined && filterType !== undefined) {\n      DashboardData(filterValue, filterType);\n    } else {\n      DashboardData();\n    }\n  }, [depID, facID, orgID]);\n  return (\n    <>\n      {/* <Charts/> */}\n      {organizationPermission ? (\n        (localStorage.getItem(\"OrganizationId\") &&\n          localStorage.getItem(\"OrganizationId\") !== \"Select Organization\" &&\n          localStorage.getItem(\"OrganizationId\") !== undefined) ||\n        (localStorage.getItem(\"facilityId\") &&\n          localStorage.getItem(\"facilityId\") !== \"Select Facility\") ||\n        (localStorage.getItem(\"departmentId\") &&\n          localStorage.getItem(\"departmentId\") !== \"Select Department\") ? (\n          <>\n            <div>\n              <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                Conditions Summary\n              </h1>\n              <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                Keep track of your Sensor status\n              </h6>\n            </div>\n\n            <div\n              style={{\n                marginTop: \"30px\",\n                marginBottom: \"30px\",\n                color: \"black\",\n              }}\n            >\n              <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n              <button\n                style={{ borderRadius: \"5px\", padding: \"5px\" }}\n                onClick={handleClearClick}\n              >\n                Clear Filter\n              </button>\n            </div>\n\n            <div>\n              <CRow className=\"status_card_container\">\n                {/* card red */}\n                <CCol\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_red\"\n                  onClick={handleWarningsClick}\n                >\n                  <CIcon\n                    icon={cilWarning}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#FF0505\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>\n                      {warnings}\n                    </h1>\n                    <p>Warning</p>\n                  </CCardText>\n                </CCol>\n                {/* card yellow */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_yellow\"\n                  // onClick={setShowAlarms(true)}\n                >\n                  <CIcon\n                    icon={cilAlarm}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#DA582C\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#DA582C\" }}>\n                      {Alarms}\n                    </h1>\n                    <p>Alarm</p>\n                  </CCardText>\n                </CCol>\n                {/* card green */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_green\"\n                  onClick={handleOkClick}\n                >\n                  <CIcon\n                    icon={cilCheckAlt}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#32712F\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>{ok}</h1>\n                    <p>Ok</p>\n                  </CCardText>\n                </CCol>\n                {/* card blue */}\n                <CCol\n                  sm={6}\n                  md={6}\n                  lg={3}\n                  className=\"status_card\"\n                  id=\"status_card_blue\"\n                  onClick={handleOfflineClick}\n                >\n                  <CIcon\n                    icon={cilSortAscending}\n                    alt=\"Name\"\n                    size=\"xl\"\n                    style={{ marginLeft: \"10px\" }}\n                  />\n                  <CCardText style={{ color: \"#349FC4\" }}>\n                    <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>\n                      {offline}\n                    </h1>\n                    <p>Offine</p>\n                  </CCardText>\n                </CCol>\n                <CRow>\n                  <Donut\n                    setAlarms={setAlarms}\n                    setoffline={setoffline}\n                    setOk={setOk}\n                    setwarnings={setwarnings}\n                    showwarnings={showwarnings}\n                    showoffline={showoffline}\n                    showok={showok}\n                    showAlarms={showAlarms}\n                  />\n                </CRow>\n              </CRow>\n\n              <>\n                {/* <CRow> */}\n                {/* </CRow> */}\n\n                <TableCard />\n              </>\n            </div>\n          </>\n        ) : // </CCard>\n\n        null\n      ) : (\n        // <>\n        //   <ConditionSummary />\n        // </>\n        <>\n          <div>\n            <h1 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Conditions summary</h1>\n            <h6 id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Keep track of your Sensor status\n            </h6>\n          </div>\n\n          <div\n            style={{ marginTop: \"30px\", marginBottom: \"30px\", color: \"black\" }}\n          >\n            <h4 id={`${darkMode ? \"heading-dark\" : \"\"}`}>Overview</h4>\n          </div>\n          <CRow className=\"status_card_container\">\n            {/* card red */}\n            <CCol md={6} lg={3} className=\"status_card\" id=\"status_card_red\">\n              <CIcon\n                icon={cilWarning}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#FF0505\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#FF0505\" }}>\n                  {warnings}\n                </h1>\n                <p>Warning</p>\n              </CCardText>\n            </CCol>\n            {/* card yellow */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_yellow\"\n            >\n              <CIcon\n                icon={cilAlarm}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#DA582C\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#DA582C\" }}>{Alarms}</h1>\n                <p>Alram</p>\n              </CCardText>\n            </CCol>\n            {/* card green */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_green\"\n            >\n              <CIcon\n                icon={cilCheckAlt}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#32712F\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#32712F\" }}>{ok}</h1>\n                <p>Ok</p>\n              </CCardText>\n            </CCol>\n            {/* card blue */}\n            <CCol\n              sm={6}\n              md={6}\n              lg={3}\n              className=\"status_card\"\n              id=\"status_card_blue\"\n            >\n              <CIcon\n                icon={cilSortAscending}\n                alt=\"Name\"\n                size=\"xl\"\n                style={{ marginLeft: \"10px\" }}\n              />\n              <CCardText style={{ color: \"#349FC4\" }}>\n                <h1 style={{ fontSize: \"60px\", color: \"#349FC4\" }}>\n                  {offline}\n                </h1>\n                <p>Offine</p>\n              </CCardText>\n            </CCol>\n            <CRow>\n              <Donut\n                setAlarms={setAlarms}\n                setoffline={setoffline}\n                setOk={setOk}\n                setwarnings={setwarnings}\n                showwarnings={showwarnings}\n                showoffline={showoffline}\n                showok={showok}\n                showAlarms={showAlarms}\n              />\n            </CRow>\n          </CRow>\n          <div>\n            <>\n              {/* <CRow> */}\n              {/* </CRow> */}\n\n              <TableCard />\n            </>\n          </div>\n        </>\n      )}\n      {/* <CCard> */}\n      <div\n        style={{\n          color: \"black\",\n          marginTop: \"20px\",\n        }}\n      >\n        <CRow\n          className=\"my-3\"\n          style={{\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n            flexDirection: \"column\",\n            flexWrap: \"wrap\",\n          }}\n        >\n          <div className=\"projectFactsWrap\">\n            {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"Organizations\"\n                  icon={cilLibraryBuilding}\n                  count={organizationCount}\n                />\n              )}\n            {facilityPermission && (!facID || facID === \"Select Facility\") && (\n              <CounterComp\n                name=\"Facilities\"\n                icon={cilPeople}\n                count={facilityCount}\n              />\n            )}\n            <CounterComp\n              name=\"Devices \"\n              icon={cilDevices}\n              count={deviceCount}\n            />\n            {departmentPermission &&\n              (!depID || depID === \"Select Department\") && (\n                <CounterComp\n                  name=\"Departments \"\n                  icon={cilBuilding}\n                  count={departmentCount}\n                />\n              )}\n            {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && ( */}\n            <CounterComp\n              name=\"Assigned Sensors \"\n              icon={cilAudio}\n              count={assignedSensorCount}\n            />\n            {/* )} */}\n            {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"UnAssigned Sensors \"\n                  icon={cilAudioSpectrum}\n                  count={unAssignedSensorCount}\n                />\n              )}\n          </div>\n        </CRow>\n        {/* <CRow>\n        <Counter icon=\"fa-rocket\" value=\"29\" title=\"Web Development\" isBlue />\n        </CRow> */}\n      </div>\n      {/* </CCard> */}\n\n      {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && ( */}\n      {/* <CounterComp name=\"Assigned Sensors \" count={assignedSensorCount} /> */}\n      {/* )} */}\n      {/* {organizationPermission &&\n              (!orgID || orgID === \"Select Organization\") && (\n                <CounterComp\n                  name=\"UnAssigned Sensors \"\n                  count={unAssignedSensorCount}\n                />\n              )}\n          </div>\n        </CRow> */}\n      {/* <CRow>\n        <Counter icon=\"fa-rocket\" value=\"29\" title=\"Web Development\" isBlue />\n        </CRow> */}\n      {/* </div>p */}\n    </>\n  );\n};\n\nexport default Dashboard;\n","import React, { useState, useEffect } from \"react\";\nimport AddSensorConfigration from \"../add-sensor-configration/add-sensor-configration\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cibMailchimp,\n  cil3d,\n  cil4k,\n  cilActionUndo,\n  cilAirplay,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilTerminal,\n} from \"@coreui/icons\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getAllSensors } from \"src/hooks/useOrganizationDevices\";\nimport { getAssignedOrg } from \"src/hooks/useDevicesSensors\";\nimport {\n  getAllDevicesData,\n  useAllDevicesData,\n  addDevice,\n  EditDevice,\n  deleteDevice,\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nconst AddDeviceSensor = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const { data: allDevices } = useAllDevicesData();\n  const navigate = useNavigate();\n  const [deviceData, setDevicesData] = useState([]);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const [AddsensorConfiguration, setIsAddsensorConfiguration] = useState(false);\n  const [validated, setValidated] = useState(false);\n  const orgID = localStorage.getItem(\"OrganizationId\");\n  const organizationId = localStorage.getItem(\"organizationid\");\n  // const [orgID , setorgID] = useState()\n  const [deviceId, setDeviceId] = useState();\n  const [formData, setFormData] = useState({\n    aws_sensorid: \"\",\n    sensorname: \"\",\n    deviceid: deviceId,\n    customerid: Number(orgID),\n    // active: true,\n  });\n  useEffect(() => {\n    //debugger\n    if (data) {\n      setFormData({\n        customerid: data.customerid,\n        aws_sensorid: data.aws_sensorid,\n        sensorname: data.sensorname,\n        deviceid: data.deviceid,\n        // active: true,\n      });\n    }\n  }, [data]);\n  const { mutate: getAllSensorsData, data: sensorData } =\n    useMutation(getAssignedOrg);\n  // const { mutate: getAllSensorsOrgData, data: sensorData } = useMutation(getAllSensorsDataofOrg)\n  const { mutate: getDevices } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    getDevices(\"\", {\n      onSuccess: (data) => {\n        setDevicesData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrgID } = useMutation(getAllDevicesByOrgId);\n  function devicesDataByOrg(selectedId) {\n    // showLoader();\n    getDevicesByOrgID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFacID } = useMutation(getAllDevicesByFacId);\n  function devicesDataByFac(selectedId) {\n    // showLoader();\n    getDevicesByFacID(selectedId, {\n      onSuccess: (data) => {\n        // hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        // hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    if (organizationPermission) {\n      // debugger;\n      getAllSensorsData(orgID, {\n        onSuccess: (data) => {\n          //debugger\n        },\n        onError: (error) => {},\n      });\n    } else if (!organizationPermission) {\n      debugger;\n      getAllSensorsData(organizationId, {\n        onSuccess: (data) => {\n          //debugger\n        },\n        onError: (error) => {},\n      });\n    }\n  }, []);\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n    const departmentId = localStorage.getItem(\"departmentId\");\n\n    if (departmentId && departmentId !== \"Select Department\") {\n      // Only departmentId is selected\n      devicesDataFetch(departmentId);\n    } else if (facilityId && facilityId !== \"Select Facility\") {\n      // facilityId is selected, prioritize it over organizationId\n      devicesDataByFac(facilityId);\n    } else if (organizationId && organizationId !== \"Select Organization\") {\n      // Only organizationId is selected and it's not \"Select Organization\"\n      devicesDataByOrg(organizationId);\n    } else {\n      // Fallback: getAllDevices\n      getAllDevices();\n    }\n  }, [\n    localStorage.getItem(\"OrganizationId\"),\n    localStorage.getItem(\"facilityId\"),\n    localStorage.getItem(\"departmentId\"),\n  ]);\n\n  const sensorConfigure = () => {\n    navigate(\"/devices-sensors/sensor-configration\");\n  };\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      // sensorConfigure()\n      closeModal();\n    }\n  };\n  const handledeviceChange = (e) => {\n    const selectedDeviceId = parseInt(e.target.value, 10) || 0; // Parse as an integer or default to 0\n    setDeviceId(selectedDeviceId);\n    setFormData({\n      ...formData,\n      deviceid: selectedDeviceId,\n    });\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Sensor Id */}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationSensorId\">\n          Sensor Id *\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            name=\"sensorId\"\n            value={formData.sensorId}\n            onChange={handleInputChange}\n            feedbackInvalid=\" Sensor Id is required\"\n            id=\"validationSensorId\"\n            disabled={data ? true : false}\n            required\n          />\n        </CInputGroup>\n      </CCol> */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationSensorId\"\n        >\n          Sensor Id*\n        </CFormLabel>\n        <CFormSelect\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid sensor id\"\n          name=\"aws_sensorid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.aws_sensorid}\n          id=\"validationSensorId\"\n          onChange={handleInputChange}\n          disabled={data ? true : false}\n        >\n          <option>Select Sensors</option>\n          {sensorData?.data?.map((item, index) => {\n            return (\n              <option value={item.aws_sensorid} key={index}>\n                {item.aws_sensorid}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/*Sensor name*/}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationSensorname\"\n        >\n          Sensor Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"sensorname\"\n            value={formData.sensorname}\n            onChange={handleInputChange}\n            feedbackInvalid=\" Sensor Name is required\"\n            id=\"validationSensorname\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Device Selection */}\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDeviceSelection\"\n        >\n          Equipment Selection*\n        </CFormLabel>\n        <CFormSelect\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          name=\"deviceSelection\"\n          value={deviceId}\n          feedbackInvalid=\"Please select a valid Device Selection\"\n          id=\"validationDeviceSelection\"\n          onChange={handledeviceChange}\n          required\n        >\n          <option>Select Equipment</option>\n          {deviceData?.data?.map((item) => {\n            return (\n              <option key={item.deviceid} value={item.deviceid}>\n                {item.devicename}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Device Sensor\" : \"Add Device Sensor\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  // TableHide: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    sensorId: PropTypes.string,\n    aws_sensorid: PropTypes.string,\n    sensorname: PropTypes.string,\n    deviceid: PropTypes.number,\n    customerid: PropTypes.number,\n    active: PropTypes.bool,\n  }),\n};\nexport default AddDeviceSensor;\n","/* eslint-disable react/prop-types */\nimport React, { useEffect, useState } from \"react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useMutation } from \"react-query\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CFormTextarea,\n  CCard,\n} from \"@coreui/react\";\nimport {\n  addSensorConfiguration,\n  EditSensorConfigurationData,\n} from \"src/hooks/useDevicesSensors\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\n\nconst AddSensorConfigration = ({ data, sensorData }) => {\n  const { mutate: AddSensorConfiguration } = useMutation(\n    addSensorConfiguration\n  );\n  const { mutate: editSensorConfiguration } = useMutation(\n    EditSensorConfigurationData\n  );\n  const [selectedSensors, setSelectedSensors] = useState([]);\n  const [validated, setValidated] = useState(false);\n  const [tempOneChecked, setTempOneChecked] = useState(false);\n  const [tempTwoChecked, setTempTwoChecked] = useState(false);\n  const [co2Checked, setCo2Checked] = useState(false);\n  const [humidityChecked, setHumidityChecked] = useState(false);\n  const { dispatch } = useLoader();\n  const { setShowToast } = useGlobalInfo();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const sensorId = localStorage.getItem(\"sensorId\");\n  const deviceId = localStorage.getItem(\"deviceid\");\n\n  const [tempOne, settempOne] = useState({\n    property: \"temp\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"description\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [tempTwo, settempTwo] = useState({\n    property: \"temp2\",\n    name: \"\",\n    maxvalue: 0,\n    minvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [co2, setco2] = useState({\n    property: \"co2\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  const [humidity, sethumidity] = useState({\n    property: \"humidity\",\n    name: \"\",\n    minvalue: 0,\n    maxvalue: 0,\n    unit: \"\",\n    description: \"\",\n    deviceId: Number(deviceId),\n    sensorId: Number(sensorId),\n    hidden: false,\n    is_active: true,\n  });\n  // useEffect(() => {\n  //   if (data) {\n  //     //debugger\n  //     const propertyMap = {\n  //       temp: 'tempOne',\n  //       temp2: 'tempTwo',\n  //       co2: 'co2',\n  //       humidity: 'humidity',\n  //     }\n  //     const defaultProperties = {\n  //       name: '',\n  //       minvalue: '',\n  //       maxvalue: '',\n  //       unit: '',\n  //       description: '',\n  //       deviceId: '',\n  //       // sensorId: '',\n  //       is_hidden: false,\n  //     }\n\n  //     const mappedData = Object.keys(propertyMap).map((property) => {\n  //       const item = data.find((item) => item.property === property)\n\n  //       if (item) {\n  //         // Exclude 'id' from the item if it exists\n  //         const { id, ...rest } = item\n  //         return {\n  //           property: property,\n  //           ...defaultProperties,\n  //           ...rest,\n  //         }\n  //       } else {\n  //         return {\n  //           property: property,\n  //           ...defaultProperties,\n  //         }\n  //       }\n  //     })\n\n  //     mappedData.forEach((item) => {\n  //       const propertyName = propertyMap[item.property]\n  //       if (propertyName) {\n  //         switch (propertyName) {\n  //           case 'tempOne':\n  //             settempOne(item)\n  //             break\n  //           case 'tempTwo':\n  //             settempTwo(item)\n  //             break\n  //           case 'co2':\n  //             setco2(item)\n  //             break\n  //           case 'humidity':\n  //             sethumidity(item)\n  //             break\n  //           default:\n  //             break\n  //         }\n  //       }\n  //     })\n  //   }\n  // }, [data])\n  useEffect(() => {\n    if (data) {\n      const propertyMap = {\n        temp: \"tempOne\",\n        temp2: \"tempTwo\",\n        co2: \"co2\",\n        humidity: \"humidity\",\n      };\n      const defaultProperties = {\n        name: \"\",\n        minvalue: \"\",\n        maxvalue: \"\",\n        unit: \"\",\n        description: \"\",\n        deviceId: \"\",\n        // sensorId: '',\n        is_hidden: false,\n        is_active: true,\n      };\n\n      const mappedData = Object.keys(propertyMap).map((property) => {\n        const item = data.find((item) => item.property === property);\n\n        if (item) {\n          // Exclude 'date_created' and 'date_updated' from the item if they exist\n          const {\n            date_created,\n            date_updated,\n            is_deleted,\n            updated_by,\n            deviceId,\n            ...rest\n          } = item;\n          return {\n            property: property,\n            ...defaultProperties,\n            ...rest,\n          };\n        } else {\n          return {\n            property: property,\n            ...defaultProperties,\n          };\n        }\n      });\n\n      mappedData.forEach((item) => {\n        const propertyName = propertyMap[item.property];\n        if (propertyName) {\n          switch (propertyName) {\n            case \"tempOne\":\n              settempOne(item);\n              break;\n            case \"tempTwo\":\n              settempTwo(item);\n              break;\n            case \"co2\":\n              setco2(item);\n              break;\n            case \"humidity\":\n              sethumidity(item);\n              break;\n            default:\n              break;\n          }\n        }\n      });\n    }\n  }, [data]);\n  useEffect(() => {\n    if (data) {\n      data.forEach((sensor) => {\n        switch (sensor.property) {\n          case \"temp\":\n            setTempOneChecked(sensor.is_active);\n            break;\n          case \"temp2\":\n            setTempTwoChecked(sensor.is_active);\n            break;\n          case \"co2\":\n            setCo2Checked(sensor.is_active);\n            break;\n          case \"humidity\":\n            setHumidityChecked(sensor.is_active);\n            break;\n          default:\n            break;\n        }\n      });\n    }\n  }, [data]);\n\n  const [formData, setFormData] = useState([]);\n  const handleTempOneCheckBoxChange = (checked) => {\n    setTempOneChecked(checked);\n  };\n  const handleTempTwoCheckBoxChange = (checked) => {\n    setTempTwoChecked(checked);\n  };\n  const handleCo2CheckBoxChange = (checked) => {\n    setCo2Checked(checked);\n  };\n  const handleHumidityCheckBoxChange = (checked) => {\n    setHumidityChecked(checked);\n  };\n  const handleTempOneChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    // Check if the value is an empty string\n    if (value === \"\") {\n      settempOne((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return; // Exit the function early if the value is empty\n    }\n\n    // Check if the value can be parsed to a valid number for minvalue and maxvalue\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    // Update the state only if the value is a valid number or it's not minvalue or maxvalue\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      settempOne((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleTempTwoChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      settempTwo((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      settempTwo((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleCo2Change = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      setco2((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      setco2((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  const handleHumidityChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      sethumidity((prevState) => ({\n        ...prevState,\n        [name]: value,\n      }));\n      return;\n    }\n\n    const parsedValue =\n      (name === \"minvalue\" || name === \"maxvalue\") && type !== \"checkbox\"\n        ? /^-?\\d*\\.?\\d+$/.test(value)\n          ? +value\n          : value\n        : value;\n\n    if (!isNaN(parsedValue) || name !== \"minvalue\" || name !== \"maxvalue\") {\n      sethumidity((prevState) => ({\n        ...prevState,\n        [name]: parsedValue,\n      }));\n    }\n  };\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      //debugger;\n      if (data) {\n        const id = sensorData.sensorid;\n        editSensorConfiguration(\n          { handler, id },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Sensor Configuration Edited Successfully\",\n              }));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data?.title,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      } else {\n        AddSensorConfiguration(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Sensor Configured Successfully\",\n            }));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.title,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      }\n    }, 0);\n  }\n\n  const navigate = useNavigate();\n  const deviceSensor = () => {\n    navigate(\"/devices-sensors\");\n  };\n  // const handleSubmit = (event) => {\n  //   event.preventDefault();\n  //   const updatedFormData = [];\n  //   if (tempOneChecked) {\n  //     updatedFormData.push(tempOne);\n  //   }\n  //   if (tempTwoChecked) {\n  //     updatedFormData.push(tempTwo);\n  //   }\n  //   if (co2Checked) {\n  //     updatedFormData.push(co2);\n  //   }\n  //   if (humidityChecked) {\n  //     updatedFormData.push(humidity);\n  //   }\n  //   if (data) {\n  //     debugger\n  //     setFormData(updatedFormData);\n  //     saveHandler(updatedFormData);\n  //     deviceSensor();\n  //   } else {\n  //     setFormData(updatedFormData);\n  //     saveHandler(updatedFormData);\n  //     deviceSensor();\n  //   }\n  // };\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const updatedFormData = [];\n\n    // Create a helper function to set is_active to true\n    const setTrueIsActive = (item) => ({\n      ...item,\n      is_active: true,\n    });\n\n    if (tempOneChecked) {\n      updatedFormData.push(setTrueIsActive(tempOne));\n    }\n    if (tempTwoChecked) {\n      updatedFormData.push(setTrueIsActive(tempTwo));\n    }\n    if (co2Checked) {\n      updatedFormData.push(setTrueIsActive(co2));\n    }\n    if (humidityChecked) {\n      updatedFormData.push(setTrueIsActive(humidity));\n    }\n\n    if (data) {\n      // Debugging point\n      debugger;\n      setFormData(updatedFormData);\n      saveHandler(updatedFormData);\n      deviceSensor();\n    } else {\n      setFormData(updatedFormData);\n      saveHandler(updatedFormData);\n      deviceSensor();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <CCard\n      className={`table_container_light p-5 ${\n        darkMode ? \"table_container_dark\" : \"\"\n      }`}\n    >\n      <CForm\n        className=\"row g-3 needs-validation\"\n        noValidate\n        validated={validated}\n        onSubmit={handleSubmit}\n      >\n        {/*Temperature 1*/}\n        <CFormCheck\n          id=\"tempOneCheckbox\"\n          label=\"Temperature 1\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          onChange={(e) => handleTempOneCheckBoxChange(e.target.checked)}\n          checked={tempOneChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"name\"\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={tempOne.name}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"temponeName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={tempOne.minvalue}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"tempMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={tempOne.maxvalue}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"tempMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-label=\"Default select example\"\n            id=\"tempunit\"\n            name=\"unit\"\n            value={tempOne.unit}\n            onChange={handleTempOneChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n            label=\"Hide on dashboard\"\n          ></CFormLabel>\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"temponedescribe\"\n            rows={3}\n            name=\"description\"\n            value={tempOne.description}\n            onChange={handleTempOneChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/* Temperature 2*/}\n        <CFormCheck\n          id=\"tempTwoCheckbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label=\"Temperature 2\"\n          onChange={(e) => handleTempTwoCheckBoxChange(e.target.checked)}\n          checked={tempTwoChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={tempTwo.name}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"temptwoName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={tempTwo.minvalue}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"validationMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={tempTwo.maxvalue}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"validationMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            id=\"temptwounit\"\n            name=\"unit\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={tempTwo.unit}\n            onChange={handleTempTwoChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            reverse\n            id=\"temptwoCheckbox1\"\n            name=\"hidden\"\n            checked={tempTwo.hidden}\n            onChange={handleTempTwoChange}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            id=\"temptwodescribe\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            rows={3}\n            name=\"description\"\n            value={tempTwo.description}\n            onChange={handleTempTwoChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*CO^2*/}\n        <CFormCheck\n          id=\"co2Checkbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label={\n            <span>\n              CO<sub>2</sub>\n            </span>\n          }\n          onChange={(e) => handleCo2CheckBoxChange(e.target.checked)}\n          checked={co2Checked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={co2.name}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Name is required\"\n            id=\"co2Name\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={co2.minvalue}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"validationMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={co2.maxvalue}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"validationMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            id=\"co2unit\"\n            name=\"unit\"\n            value={co2.unit}\n            onChange={handleCo2Change}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            reverse\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"co2Checkbox1\"\n            name=\"hidden\"\n            checked={co2.hidden}\n            onChange={handleCo2Change}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"co2describe\"\n            rows={3}\n            name=\"description\"\n            value={co2.description}\n            onChange={handleCo2Change}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*Humadity*/}\n        <CFormCheck\n          id=\"humidityCheckbox\"\n          className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n          label=\"Humidity\"\n          onChange={(e) => handleHumidityCheckBoxChange(e.target.checked)}\n          checked={humidityChecked}\n        />\n        {/*Name*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Name*\n          </CFormLabel>\n          <CFormInput\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            placeholder=\"Enter Sensor Name\"\n            name=\"name\"\n            value={humidity.name}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Name is required\"\n            id=\"humidityName\"\n            required\n          />\n        </CCol>\n        {/* Min*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMin\"\n          >\n            Min*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Minimum Value\"\n            name=\"minvalue\"\n            value={humidity.minvalue}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Minimum value is required\"\n            id=\"humidityMin\"\n            required\n          />\n        </CCol>\n\n        {/* Max */}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationMax\"\n          >\n            Max*\n          </CFormLabel>\n          <CFormInput\n            type=\"text\"\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            placeholder=\"Enter Maximum Value\"\n            name=\"maxvalue\"\n            value={humidity.maxvalue}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"Maximum Value is required\"\n            id=\"humidityMax\"\n            required\n          />\n        </CCol>\n        {/*unit*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationunit\"\n          >\n            unit*\n          </CFormLabel>\n          <CFormSelect\n            aria-label=\"Default select example\"\n            id=\"humidityunit\"\n            name=\"unit\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={humidity.unit}\n            onChange={handleHumidityChange}\n            feedbackInvalid=\"unit is required\"\n            required\n          >\n            <option>Open this select menu</option>\n            <option value=\"--Name--\">--Name--</option>\n            <option value=\"C\">C*</option>\n            <option value=\"F\">F-</option>\n          </CFormSelect>\n        </CCol>\n        {/* Hide on dashboard*/}\n        <CCol xs=\"auto\">\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationTypeSensorId\"\n          ></CFormLabel>\n          <CFormCheck\n            reverse\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"humidityCheckbox1\"\n            name=\"hidden\"\n            checked={humidity.hidden}\n            onChange={handleHumidityChange}\n            label=\"Hide on dashboard\"\n          />\n        </CCol>\n        {/*Description*/}\n        <CForm>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationName\"\n          >\n            Description\n          </CFormLabel>\n          <CFormTextarea\n            className={`input-light   ${darkMode ? \"input-dark\" : \"\"}`}\n            id=\"humiditydescribe\"\n            rows={3}\n            name=\"description\"\n            value={humidity.description}\n            onChange={handleHumidityChange}\n            placeholder=\"Describe Your Way\"\n          ></CFormTextarea>\n        </CForm>\n        {/*Button*/}\n        {!data ? (\n          <CCol xs=\"auto\">\n            <CButton variant=\"outline\" onClick={deviceSensor}>\n              Back\n            </CButton>\n          </CCol>\n        ) : null}\n\n        {/* Submit Button */}\n        <CCol xs=\"auto\">\n          <CButton color=\"primary\" type=\"submit\">\n            Configure\n          </CButton>\n        </CCol>\n      </CForm>\n    </CCard>\n  );\n};\n\nexport default AddSensorConfigration;\n\nAddSensorConfigration.propTypes = {\n  data: PropTypes.func.isRequired,\n  sensorData: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    deviceId: PropTypes.number,\n    sensorId: PropTypes.string,\n  }),\n};\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDepartmentStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-admins?name=DepartmentAdmin`\n  );\n  return data;\n};\n\nexport const addDepartmentStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `user/create/departmentAdmin`,\n    payload\n  );\n  return data;\n};\nexport const EditDepartmentStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateDepartmentStaff`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteDepartmentStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDepartmentStaff?userid=${payload.userid}&departmentid=${payload.departmentid}`\n  );\n  return data;\n};\nexport const getAllDepartmentUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-facId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-orgId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\nexport const getAllDepartmentUserbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-depId/${id}?name=DepartmentUser`\n  );\n  return data;\n};\n\nexport const getAllDepartmentStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\nexport const getAllDepartmentStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\nexport const getAllDepartmentStaffbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-depId/${id}?name=DepartmentAdmin`\n  );\n  return data;\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormCheck,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddDepartmentStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [departmentsData, setDepartmentsData] = useState();\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    departmentid: \"\",\n    is_admin: false,\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        departmentid: data.departmentid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    const parsedValue = name === \"departmentid\" ? parseInt(value, 10) : value;\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    getAllDepartments();\n  }, []);\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationManufacturerName\"\n        >\n          Department Selection*\n        </CFormLabel>\n        <CFormSelect\n          name=\"departmentid\"\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility.\"\n          id=\"validationDepartment\"\n          value={formData.departmentid}\n          onChange={handleInputChange}\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select Department</option>\n          {departmentsData?.map((item) => {\n            return (\n              <option key={item.departmentid} value={item.departmentid}>\n                {item.departmentname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"ContactNumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Organization DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"organizationDropdown\"\n         value={formData.organizationDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*facility Dropdown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Facility DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"facilityDropdown\"\n         value={formData.facilityDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol>   */}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked });\n          }}\n        />\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Department Staff \" : \"Add Department Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDepartmentStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstname: PropTypes.string,\n      lastname: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      contactNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n      facilityDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddDepartmentStaff;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getDepartmentsData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport {\n  getAllDepartmentStaffData,\n  addDepartmentStaff,\n  EditDepartmentStaff,\n  getAllDepartmentUserData,\n  deleteDepartmentStaff,\n  getAllDepartmentStaffbyOrgID,\n  getAllDepartmentUserbyOrgID,\n  getAllDepartmentStaffbyFacID,\n  getAllDepartmentStaffbyDepID,\n  getAllDepartmentUserbyDepID,\n  getAllDepartmentUserbyFacID,\n} from \"src/hooks/useDepartmentstaff\";\nimport AddDepartmentStaff from \"src/views/forms/add-department-staff-form/add-department-staff\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"departments.departmentname\", label: \"Department\" },\n  { key: \"users.email\", label: \"Contact Email\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"users.phonenumber\", label: \"PhoneNumber\" },\n];\nconst DepartmentStaff = () => {\n  const { dispatch } = useLoader();\n  const { mutate: departmentStaffAdd } = useMutation(addDepartmentStaff);\n  const { mutate: departmentStaffEdit } = useMutation(EditDepartmentStaff);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, departmentsData, setDepartmentsData } = useGlobalInfo();\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [DepartmentStaffData, setdepartmentStaffData] = useState([]);\n  const { mutate: departmentStaff } = useMutation(getAllDepartmentStaffData);\n  const { mutate: departmentUser } = useMutation(getAllDepartmentUserData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const deleteDepartmentStaffById = useMutation(deleteDepartmentStaff);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [deldepstaffId, setDeldepstaffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const navigate = useNavigate();\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartmentStaff() {\n    departmentStaff(\"\", {\n      onSuccess: (data) => {\n        setdepartmentStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartmentUser() {\n    departmentUser(\"\", {\n      onSuccess: (data) => {\n        setdepartmentStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: departmentSatffbyOrgID } = useMutation(\n    getAllDepartmentStaffbyOrgID\n  );\n  function departmentStaffDataFetch(selectedId) {\n    departmentSatffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentSatffbyFacID } = useMutation(\n    getAllDepartmentStaffbyFacID\n  );\n  function departmentStaffDataByOrg(selectedId) {\n    departmentSatffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentSatffbydepID } = useMutation(\n    getAllDepartmentStaffbyDepID\n  );\n  function departmentStaffDataByDep(selectedId) {\n    departmentSatffbydepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyOrgID } = useMutation(\n    getAllDepartmentUserbyOrgID\n  );\n  function departmentUserDataFetch(selectedId) {\n    departmentUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyFacID } = useMutation(\n    getAllDepartmentUserbyOrgID\n  );\n  function departmentUserDataByOrg(selectedId) {\n    departmentUserbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: departmentUserbyDepID } = useMutation(\n    getAllDepartmentUserbyDepID\n  );\n  function departmentUserDataByDep(selectedId) {\n    departmentUserbyDepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdepartmentStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a department by its ID.\n   * @param {number} departmentId - The ID of the department to be deleted.\n   */\n  const deleteDepartments = (departmentId) => {\n    showLoader();\n    deleteDepartmentStaffById.mutate(departmentId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Department Staff deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"facilityId\") === null ||\n          localStorage.getItem(\"facilityId\") === undefined\n        ) {\n          getAllDepartmentStaff();\n        } else {\n          departmentStaffDataFetch(localStorage.getItem(\"facilityId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        departmentStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Department Staff Created Successfully\",\n            }));\n\n            getAllDepartmentStaff();\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        departmentStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Department Staff Edited Successfully\",\n              }));\n\n              getAllDepartmentStaff();\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const departmentId = localStorage.getItem(\"departmentId\");\n  const handleRoleChange = (e) => {\n    const selectedValue = e.target.value;\n\n    setSelectedRole(selectedValue);\n\n    if (selectedValue === \"Admins\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentStaff();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (organizationId && facilityId && !departmentId) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (selectedValue === \"Users\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentUser();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentUserDataByOrg(organizationId);\n      } else if (organizationId && facilityId && !departmentId) {\n        // Both organizationId and facilityId are selected\n        departmentUserDataFetch(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentUserDataByDep(departmentId);\n      }\n    }\n  };\n  // useEffect(() => {\n  //   if (\n  //     localStorage.getItem('facilityId') === undefined ||\n  //     localStorage.getItem('facilityId') === null\n  //   ) {\n  //     getAllDepartmentStaff()\n  //   } else {\n  //     departmentStaffDataFetch(localStorage.getItem('facilityId'))\n  //   }\n  // }, [localStorage.getItem('facilityId')])\n  // useEffect(() => {\n  //   //debugger;\n\n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === null ||\n  //       organizationId === \"Select Organization\") &&\n  //     (facilityId === undefined ||\n  //       facilityId === null ||\n  //       facilityId === \"Select Facility\") &&\n  //     (departmentId === undefined ||\n  //       departmentId === null ||\n  //       departmentId === \"Select Department\")\n  //   ) {\n  //     // No organizationId, facilityId, or departmentId is selected\n  //     getAllDepartmentStaff();\n  //   } else if (organizationId && !facilityId && !departmentId) {\n  //     // Only organizationId is selected\n  //     departmentStaffDataByOrg(organizationId);\n  //   } else if (organizationId && facilityId !='Select Facility' && !departmentId) {\n  //     // Both organizationId and facilityId are selected\n  //     departmentStaffDataFetch(facilityId);\n  //   } else if (organizationId && facilityId =='Select Facility' && !departmentId) {\n  //     // Both organizationId and facilityId are selected\n  //     departmentStaffDataByOrg(organizationId);\n  //   } else if (organizationId && facilityId && departmentId =='Select Department') {\n  //     // All organizationId, facilityId, and departmentId are selected\n  //     departmentStaffDataFetch(facilityId);\n  //   }else if (organizationId && facilityId && departmentId != 'Select Department') {\n  //     // All organizationId, facilityId, and departmentId are selected\n  //     departmentStaffDataByDep(departmentId);\n  //   }\n  // }, [\n  //   localStorage.getItem(\"OrganizationId\"),\n  //   localStorage.getItem(\"facilityId\"),\n  //   localStorage.getItem(\"departmentId\"),\n  // ]);\n  useEffect(() => {\n    //debugger;\n\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDepartmentStaff();\n      } else if (organizationId && !facilityId && !departmentId) {\n        // Only organizationId is selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId !== \"Select Facility\" &&\n        !departmentId\n      ) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (\n        organizationId &&\n        facilityId === \"Select Facility\" &&\n        !departmentId\n      ) {\n        // Both organizationId and facilityId are selected\n        departmentStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        departmentId === \"Select Department\"\n      ) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataFetch(facilityId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        departmentId !== \"Select Department\"\n      ) {\n        // All organizationId, facilityId, and departmentId are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (!facilityId || facilityId === \"Select Facility\") {\n        // No facilityId or facilityId is 'Select Facility'\n        getAllDepartmentStaff();\n      } else if (!departmentId || departmentId === \"Select Department\") {\n        // Facility is selected but no department is selected\n        departmentStaffDataFetch(facilityId);\n      } else if (departmentId !== \"Select Department\") {\n        // Facility and department are selected\n        departmentStaffDataByDep(departmentId);\n      }\n    } else if (departmentPermission) {\n      // Department permission is true, adjust the logic\n      if (!departmentId || departmentId === \"Select Department\") {\n        // No departmentId or departmentId is 'Select Department'\n        getAllDepartmentStaff();\n      } else if (departmentId !== \"Select Department\") {\n        // Department is selected\n        departmentStaffDataByDep(departmentId);\n      }\n    }\n  }, [organizationId, facilityId, departmentId]);\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Department Satff\" : \"Edit Department Staff\"}\n        content={\n          isAddMode ? (\n            <AddDepartmentStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddDepartmentStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Departments Staff\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Department Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {DepartmentStaffData ? (\n          <GenericTable\n            columns={columns}\n            data={DepartmentStaffData}\n            openEditModal={openEditModal}\n            OnDeleteItem={deleteDepartments}\n            deldepstaffId={deldepstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default DepartmentStaff;\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useAllDevicesData } from \"src/hooks/useDevices\";\n// eslint-disable-next-line react/prop-types\nconst AddDeviceStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const { data: allDevices } = useAllDevicesData();\n  const [validated, setValidated] = useState(false);\n  const [deviceId, setDeviceId] = useState();\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    deviceid: 0,\n    is_admin: true,\n  });\n  useEffect(() => {\n    if (data) {\n      // //debugger\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        deviceid: data.users.deviceid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"deviceid\") {\n      // Parse the \"deviceid\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDeviceSelection\"\n        >\n          Equipment Selection*\n        </CFormLabel>\n        <CFormSelect\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          name=\"deviceid\"\n          value={formData.deviceid}\n          feedbackInvalid=\"Please select a valid Device Selection\"\n          id=\"validationDeviceSelection\"\n          onChange={handleInputChange}\n          required\n        >\n          <option>Select Equipment</option>\n          {allDevices?.data?.map((item) => {\n            return (\n              <option key={item.deviceid} value={item.deviceid}>\n                {item.devicename}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstname\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastname\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"phonenumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Organization DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"organizationDropdown\"\n         value={formData.organizationDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*facility DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Department DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"facilityDropdown\"\n         value={formData.facilityDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n      {/*department DropDown*/}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Department DropDown\n        </CFormLabel>\n      <CFormSelect \n         aria-label=\"Default select example\"\n         name=\"departmentDropdown\"\n         value={formData.departmentDropdown}\n        onChange={handleInputChange}\n  options={[\n    'Open this select menu',\n    { label: 'One', value: '1' },\n    { label: 'Two', value: '2' },\n    { label: 'Three', value: '3', disabled: true }\n  ]}\n/>\n</CCol> */}\n\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked })\n          }}\n        />\n      </CCol> */}\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Device Staff \" : \"Add Device Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n      facilityDropdown: PropTypes.string,\n      departmentDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddDeviceStaff;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllDeviceStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`user/find-admins?name=DeviceAdmin`);\n  return data;\n};\n\nexport const addDeviceStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(`user/create/deviceAdmin`, payload);\n  return data;\n};\nexport const EditDeviceStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateDeviceStaff`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteDeviceStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteDeviceStaff?userid=${payload.userid}&deviceid=${payload.deviceid}`\n  );\n  return data;\n};\n\nexport const getAllDeviceUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=DeviceUser`\n  );\n  return data;\n};\nexport const getAllDeviceUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-depId/${id}?name=DeviceUser`\n  );\n  return data;\n};\n\nexport const getAllDeviceStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-depId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\nexport const getAllDeviceStaffbyDepID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\nexport const getAllDeviceStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=DeviceAdmin`\n  );\n  return data;\n};\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllDevicesData,\n  deleteDevice,\n  getAllDevicesById,\n} from \"src/hooks/useDevices\";\nimport AddDeviceStaff from \"src/views/forms/add-device-staff-form/add-device-staff\";\nimport {\n  getAllDeviceStaffData,\n  getAllDeviceUserData,\n} from \"src/hooks/useDeviceStaff\";\nimport {\n  addDeviceStaff,\n  EditDeviceStaff,\n  deleteDeviceStaff,\n  getAllDeviceStaffbyOrgID,\n  getAllDeviceUserbyOrgID,\n  getAllDeviceStaffbyDepID,\n  getAllDeviceStaffbyFacID,\n} from \"src/hooks/useDeviceStaff\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"users.email\", label: \"Email\" },\n  { key: \"users.phonenumber\", label: \"Contact Number\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"devices.devicename\", label: \"Device\" },\n];\nconst DevicesStaff = () => {\n  const { dispatch } = useLoader();\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const departmentId = localStorage.getItem(\"departmentId\");\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, devicesData, setDevicesData } = useGlobalInfo();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const navigate = useNavigate();\n  const [DeviceStaffData, setdeviceStaffData] = useState([]);\n  const { mutate: deviceStaff } = useMutation(getAllDeviceStaffData);\n  const { mutate: deviceUser } = useMutation(getAllDeviceUserData);\n  const { mutate: deviceStaffAdd } = useMutation(addDeviceStaff);\n  const { mutate: deviceStaffEdit } = useMutation(EditDeviceStaff);\n  const deleteDeviceStaffById = useMutation(deleteDeviceStaff);\n  const [deldevstaffId, setDeldevstaffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicePermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a device by its ID.\n   * @param {number} deviceId - The ID of the device to be deleted.\n   */\n  const deleteDevices = (deviceId) => {\n    //debugger;\n    showLoader();\n    deleteDeviceStaffById.mutate(deviceId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device Staff deleted Successfully\",\n        }));\n        // refetchDevices()\n        if (\n          localStorage.getItem(\"departmentId\") === null ||\n          localStorage.getItem(\"departmentId\") === undefined\n        ) {\n          getAllDeviceStaff();\n        } else {\n          getAllDeviceStaff(localStorage.getItem(\"departmentId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n\n  function getAllDeviceStaff() {\n    deviceStaff(\"\", {\n      onSuccess: (data) => {\n        setdeviceStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDeviceUser() {\n    deviceUser(\"\", {\n      onSuccess: (data) => {\n        setdeviceStaffData(data.data);\n        hideLoader();\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: deviceSatffbyOrgID } = useMutation(getAllDeviceStaffbyOrgID);\n  function deviceStaffDataFetch(selectedId) {\n    deviceSatffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceSatffbyDepID } = useMutation(getAllDeviceStaffbyDepID);\n  function deviceStaffDataByOrg(selectedId) {\n    deviceSatffbyDepID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceSatffbyFacID } = useMutation(getAllDeviceStaffbyFacID);\n  function deviceStaffDataByFac(selectedId) {\n    deviceSatffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: deviceUserbyOrgID } = useMutation(getAllDeviceUserbyOrgID);\n  function deviceUserDataFetch(selectedId) {\n    deviceUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setdeviceStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  // useEffect(() => {\n  //   if (\n  //     localStorage.getItem('departmentId') === undefined ||\n  //     localStorage.getItem('departmentId') === null\n  //   ) {\n  //     getAllDeviceStaff()\n  //   } else {\n  //     deviceStaffDataFetch(localStorage.getItem('departmentId'))\n  //   }\n  // }, [localStorage.getItem('departmentId')])\n  useEffect(() => {\n    //debugger;\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // No organizationId, facilityId, or departmentId is selected\n        getAllDeviceStaff();\n      } else if (\n        organizationId &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\") &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // Only organizationId is selected\n        deviceStaffDataByOrg(organizationId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        (departmentId === undefined ||\n          departmentId === null ||\n          departmentId === \"Select Department\")\n      ) {\n        // Both organizationId and facilityId are selected\n        deviceStaffDataByFac(facilityId);\n      } else if (organizationId && facilityId && departmentId) {\n        // All organizationId, facilityId, and departmentId are selected\n        deviceStaffDataFetch(departmentId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (\n        (!facilityId || facilityId === \"Select Facility\") &&\n        (!departmentId || departmentId === \"Select Department\")\n      ) {\n        // No facilityId or facilityId is 'Select Facility' and no departmentId or departmentId is 'Select Department'\n        getAllDeviceStaff();\n      } else if (\n        departmentId &&\n        facilityId &&\n        departmentId !== \"Select Department\"\n      ) {\n        // Facility is selected, department is selected\n        deviceStaffDataFetch(departmentId);\n      } else if (\n        departmentId &&\n        facilityId &&\n        departmentId == \"Select Department\"\n      ) {\n        // Facility is selected, department is selected\n        deviceStaffDataByFac(facilityId);\n      } else if (facilityId) {\n        //debugger;\n        // Only facility is selected, department is 'Select Department'\n        deviceStaffDataByFac(facilityId);\n      }\n    } else if (departmentPermission) {\n      //debugger\n      // Department permission is true, adjust the logic\n      if (!departmentId || departmentId === \"Select Department\") {\n        // No departmentId or departmentId is 'Select Department'\n        getAllDeviceStaff();\n      } else {\n        // Department is selected\n        deviceStaffDataFetch(departmentId);\n      }\n    } else if (devicePermission) {\n      // Device permission is true\n      getAllDeviceStaff();\n    }\n  }, [\n    organizationPermission,\n    facilityPermission,\n    departmentPermission,\n    devicePermission,\n    organizationId,\n    facilityId,\n    departmentId,\n  ]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        // //debugger\n        deviceStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Staff Created Successfully\",\n            }));\n\n            if (\n              (organizationId === undefined ||\n                organizationId === null ||\n                organizationId === \"Select Organization\") &&\n              (facilityId === undefined ||\n                facilityId === null ||\n                facilityId === \"Select Facility\") &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // No organizationId, facilityId, or departmentId selected\n              getAllDeviceStaff();\n            } else if (\n              organizationId &&\n              (facilityId === undefined ||\n                facilityId === null ||\n                facilityId === \"Select Facility\") &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // Only organizationId is selected\n              deviceStaffDataByOrg(organizationId);\n            } else if (\n              organizationId &&\n              facilityId &&\n              (departmentId === undefined ||\n                departmentId === null ||\n                departmentId === \"Select Department\")\n            ) {\n              // Both organizationId and facilityId are selected\n              deviceStaffDataByFac(facilityId);\n            } else if (organizationId && facilityId && departmentId) {\n              // All organizationId, facilityId, and departmentId are selected\n              deviceStaffDataFetch(departmentId);\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        deviceStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Staff Edited Successfully\",\n              }));\n\n              if (\n                (organizationId === undefined ||\n                  organizationId === null ||\n                  organizationId === \"Select Organization\") &&\n                (facilityId === undefined ||\n                  facilityId === null ||\n                  facilityId === \"Select Facility\") &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // No organizationId, facilityId, or departmentId selected\n                getAllDeviceStaff();\n              } else if (\n                organizationId &&\n                (facilityId === undefined ||\n                  facilityId === null ||\n                  facilityId === \"Select Facility\") &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // Only organizationId is selected\n                deviceStaffDataByOrg(organizationId);\n              } else if (\n                organizationId &&\n                facilityId &&\n                (departmentId === undefined ||\n                  departmentId === null ||\n                  departmentId === \"Select Department\")\n              ) {\n                // Both organizationId and facilityId are selected\n                deviceStaffDataByFac(facilityId);\n              } else if (organizationId && facilityId && departmentId) {\n                // All organizationId, facilityId, and departmentId are selected\n                deviceStaffDataFetch(departmentId);\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  // const handleRoleChange = (e) => {\n  //   const selectedValue = e.target.value\n\n  //   setSelectedRole(selectedValue)\n\n  //   if (selectedValue === 'Admins') {\n  //     if (\n  //       localStorage.getItem('departmentId') === undefined ||\n  //       localStorage.getItem('departmentId') === null\n  //     ) {\n  //       getAllDeviceStaff()\n  //     } else {\n  //       deviceStaffDataFetch(localStorage.getItem('departmentId'))\n  //     }\n  //   } else if (selectedValue === 'Users') {\n  //     if (\n  //       localStorage.getItem('departmentId') === undefined ||\n  //       localStorage.getItem('departmentId') === null\n  //     ) {\n  //       getAllDeviceUser()\n  //     } else {\n  //       deviceUserDataFetch(localStorage.getItem('departmentId'))\n  //     }\n  //   }\n  // }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Equipment Staff\" : \"Edit Equipment Staff\"}\n        content={\n          isAddMode ? (\n            <AddDeviceStaff closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddDeviceStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n            Equipment Staff\n            </h3>\n          </CCol>\n          {/* <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? 'select-dark' : ''}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol> */}\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Equipment Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {devicesData ? (\n          <GenericTable\n            columns={columns}\n            data={DeviceStaffData}\n            OnDeleteItem={deleteDevices}\n            openEditModal={openEditModal}\n            deldevstaffId={deldevstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default DevicesStaff;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllFacilitiesStaffData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-admins?name=FacilityAdmin`\n  );\n  return data;\n};\nexport const getAllFacilitiesStaffbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-orgId/${id}?name=FacilityAdmin`\n  );\n  return data;\n};\nexport const getAllFacilitiesStaffbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/admins-by-facId/${id}?name=FacilityAdmin`\n  );\n  return data;\n};\n\nexport const addFacilityStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `user/create/facilityAdmin`,\n    payload\n  );\n  return data;\n};\n\nexport const EditFacilityStaff = async (payload) => {\n  // //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `user/staff/updateFacilityStaff`,\n    payload.handler\n  );\n  return data;\n};\n\nexport const deleteFacilityStaff = async (payload) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(\n    `user/staff/deleteFacilityStaff?userid=${payload.userid}&facilityid=${payload.facilityid}`\n  );\n  return data;\n};\n\nexport const getAllFacilitiesUserData = async () => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/find-user-staff?name=FacilityUser`\n  );\n  return data;\n};\n\nexport const getAllFacilitiesUserbyOrgID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-orgId/${id}?name=FacilityUser`\n  );\n  return data;\n};\nexport const getAllFacilitiesUserbyFacID = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `user/user-staff-by-facId/${id}?name=FacilityUser`\n  );\n  return data;\n};\n","// /* eslint-disable prettier/prettier */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CFormCheck,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nimport { useMutation } from \"react-query\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddFacilityStaff = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [facilityData, setFacilityData] = useState([]);\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    firstname: \"\",\n    lastname: \"\",\n    email: \"\",\n    address: \"\",\n    phonenumber: \"\",\n    facilityid: \"\",\n    is_admin: false,\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        firstname: data.users.firstname,\n        lastname: data.users.lastname,\n        email: data.users.email,\n        address: data.users.address,\n        phonenumber: data.users.phonenumber,\n        facilityid: data.facilityid,\n        is_admin: true,\n        userid: data.userid,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (name === \"facilityid\") {\n      // Parse the \"facilityid\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      // //debugger\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n  function getAllFacilities() {\n    // // //debugger\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  useEffect(() => {\n    getAllFacilities();\n  }, []);\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility*\n        </CFormLabel>\n        <CFormSelect\n          name=\"facilityid\"\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility.\"\n          id=\"validationFacility\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.facilityid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n        >\n          <option>Select Facility</option>\n          {facilityData?.map((item) => {\n            return (\n              <option key={item.facilityid} value={item.facilityid}>\n                {item.name}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* First Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFirstName\"\n        >\n          First Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            {/*   <CIcon icon={cilBuilding} alt=\"Name\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"firstname\"\n            value={formData.firstname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"First Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Last Name */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationLastName\"\n        >\n          Last Name\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            {/*  <CIcon icon={cilPhone} alt=\"Contact\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"lastname\"\n            value={formData.lastname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Last name is required\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*  Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationEmail\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\" Email is required\"\n            id=\"validationEmail\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Contact Number */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPhoneNumber\"\n        >\n          Conatct Number\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"ContactNumber\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"phonenumber\"\n            value={formData.phonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Contact Number is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Organization DropDown*/}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Is Admin\n        </CFormLabel>\n        <CFormCheck\n          id=\"flexCheckDefault\"\n          label=\" \"\n          checked={formData.is_admin} // Set the checked state based on formData.is_admin\n          onChange={(e) => {\n            setFormData({ ...formData, is_admin: e.target.checked });\n          }}\n        />\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Facility Staff \" : \"Add Facility Staff \"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddFacilityStaff.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      firstName: PropTypes.string,\n      lastName: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      phoneNumber: PropTypes.string,\n      organizationDropdown: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddFacilityStaff;\n","// /* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllFacilitiesStaffData,\n  addFacilityStaff,\n  EditFacilityStaff,\n  deleteFacilityStaff,\n  getAllFacilitiesUserData,\n  getAllFacilitiesUserbyOrgID,\n  getAllFacilitiesStaffbyOrgID,\n  getAllFacilitiesStaffbyFacID,\n  getAllFacilitiesUserbyFacID,\n} from \"src/hooks/useFacilitiesStaff\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport AddFacilityStaff from \"src/views/forms/add-facility-staff-form/add-facility-staff\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"users.firstname\", label: \"Name\" },\n  { key: \"users.email\", label: \"Email\" },\n  { key: \"users.phonenumber\", label: \"Contact Number\" },\n  { key: \"users.address\", label: \"Address\" },\n  { key: \"facilities.name\", label: \"Facility\" },\n];\nconst FacilitiesStaff = () => {\n  const organizationId = localStorage.getItem(\"OrganizationId\");\n  const facilityId = localStorage.getItem(\"facilityId\");\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: facilityStaffAdd } = useMutation(addFacilityStaff);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { mutate: facilityStaffEdit } = useMutation(EditFacilityStaff);\n  const [facilityStaffData, setFacilityStaffData] = useState([]);\n  const { mutate: facilityStaff } = useMutation(getAllFacilitiesStaffData);\n  const { mutate: facilityUser } = useMutation(getAllFacilitiesUserData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteFacilityStaffById = useMutation(deleteFacilityStaff);\n  const [delfacstaffId, setDelfacsatffId] = useState(true);\n  const [selectedRole, setSelectedRole] = useState(\"Select Role\");\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  const { mutate: facilityStaffbyOrgID } = useMutation(\n    getAllFacilitiesStaffbyOrgID\n  );\n  const { mutate: facilityUserbyOrgID } = useMutation(\n    getAllFacilitiesUserbyOrgID\n  );\n  const { mutate: facilityStaffbyFacID } = useMutation(\n    getAllFacilitiesStaffbyFacID\n  );\n  const { mutate: facilityUserbyFacID } = useMutation(\n    getAllFacilitiesUserbyFacID\n  );\n\n  function facilitiesStaffDataFetch(selectedId) {\n    facilityStaffbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesStaffDataBYfacId(selectedId) {\n    facilityStaffbyFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesUserDataFetch(selectedId) {\n    //debugger;\n    facilityUserbyOrgID(selectedId, {\n      onSuccess: (data) => {\n        //debugger;\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  function facilitiesUserDataByFacId(selectedId) {\n    //debugger;\n    facilityUserbyFacID(selectedId, {\n      onSuccess: (data) => {\n        //debugger;\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n\n  const handleRoleChange = (e) => {\n    const selectedValue = e.target.value;\n\n    setSelectedRole(selectedValue);\n\n    if (selectedValue === \"Admins\") {\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesStaff();\n      } else if (organizationId && facilityId) {\n        // Only organizationId and facilityId are selected\n        facilitiesStaffDataBYfacId(facilityId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesStaffDataFetch(organizationId);\n      }\n    } else if (selectedValue === \"Users\") {\n      const organizationId = localStorage.getItem(\"OrganizationId\");\n      const facilityId = localStorage.getItem(\"facilityId\");\n\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesUser();\n      } else if (organizationId && facilityId) {\n        // Only organizationId and facilityId are selected\n        facilitiesUserDataByFacId(facilityId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesUserDataFetch(organizationId);\n      }\n    }\n  };\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes a Fecility by its ID.\n   * @param {number} facilityId - The ID of the Facility to be deleted.\n   */\n  const deleteFacilities = (facilityId) => {\n    showLoader();\n    deleteFacilityStaffById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Facility Staff deleted Successfully\",\n        }));\n\n        getAllFacilitiesStaff();\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllFacilitiesStaff() {\n    facilityStaff(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllFacilitiesUser() {\n    hideLoader();\n    facilityUser(\"\", {\n      onSuccess: (data) => {\n        setFacilityStaffData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  // useEffect(() => {\n  //   //debugger\n  //   if (\n  //     localStorage.getItem('OrganizationId') === undefined ||\n  //     localStorage.getItem('OrganizationId') === null ||\n  //     localStorage.getItem('OrganizationId') === 'Select Organization'\n  //   ) {\n  //     getAllFacilitiesStaff()\n  //   } else {\n  //     //debugger\n  //     facilitiesStaffDataFetch(localStorage.getItem('OrganizationId'))\n  //   }\n  // }, [localStorage.getItem('OrganizationId')])\n  // useEffect(() => {\n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === null ||\n  //       organizationId === \"Select Organization\") &&\n  //     (facilityId === undefined ||\n  //       facilityId === null ||\n  //       facilityId === \"Select Facility\")\n  //   ) {\n  //     getAllFacilitiesStaff();\n  //   } else if (\n  //     organizationId &&\n  //     facilityId &&\n  //     facilityId != \"Select Facility\"\n  //   ) {\n  //     facilitiesStaffDataBYfacId(facilityId);\n  //   } else if (\n  //     organizationId &&\n  //     facilityId &&\n  //     facilityId == \"Select Facility\"\n  //   ) {\n  //     //debugger;\n  //     facilitiesStaffDataFetch(organizationId);\n  //   } else if (organizationId) {\n  //     // Only organizationId is selected\n  //     facilitiesStaffDataFetch(organizationId);\n  //   }\n  // }, [\n  //   localStorage.getItem(\"OrganizationId\"),\n  //   localStorage.getItem(\"facilityId\"),\n  // ]);\n  useEffect(() => {\n    if (organizationPermission) {\n      // Continue with the existing organization flow\n      if (\n        (organizationId === undefined ||\n          organizationId === null ||\n          organizationId === \"Select Organization\") &&\n        (facilityId === undefined ||\n          facilityId === null ||\n          facilityId === \"Select Facility\")\n      ) {\n        getAllFacilitiesStaff();\n      } else if (\n        organizationId &&\n        facilityId &&\n        facilityId !== \"Select Facility\"\n      ) {\n        facilitiesStaffDataBYfacId(facilityId);\n      } else if (\n        organizationId &&\n        facilityId &&\n        facilityId === \"Select Facility\"\n      ) {\n        facilitiesStaffDataFetch(organizationId);\n      } else if (organizationId) {\n        // Only organizationId is selected\n        facilitiesStaffDataFetch(organizationId);\n      }\n    } else if (facilityPermission) {\n      // Facility permission is true, adjust the logic\n      if (!facilityId || facilityId === \"Select Facility\") {\n        getAllFacilitiesStaff();\n      } else {\n        facilitiesStaffDataBYfacId(facilityId);\n      }\n    }\n  }, [organizationId, facilityId]);\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        // // //debugger\n        facilityStaffAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Facility Staff Created Successfully\",\n            }));\n            // if (\n            //   localStorage.getItem('OrganizationId') === null ||\n            //   localStorage.getItem('OrganizationId') === undefined\n            // ) {\n            getAllFacilitiesStaff();\n            // } else {\n            //   facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n            // }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        // //debugger\n        facilityStaffEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Facility Staff Edited Successfully\",\n              }));\n\n              getAllFacilitiesStaff();\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Facility Staff\" : \"Edit Facility Staff\"}\n        content={\n          isAddMode ? (\n            <AddFacilityStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddFacilityStaff\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Facility Staff\n            </h3>\n          </CCol>\n          <CCol md={3} className=\"float-end\">\n            <select\n              size=\"sm\"\n              className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n              aria-label=\"Department\"\n              defaultValue=\"Admins\"\n              onChange={handleRoleChange}\n              // value={deviceId}\n            >\n              <option>Select Role</option>\n              <option>Admins</option>\n              <option>Users</option>\n            </select>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Facility Staff\n            </CButton>\n          </CCol>\n        </CRow>\n        {facilityStaffData ? (\n          <GenericTable\n            columns={columns}\n            OnDeleteItem={deleteFacilities}\n            data={facilityStaffData}\n            openEditModal={openEditModal}\n            delfacstaffId={delfacstaffId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default FacilitiesStaff;\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cibMailchimp,\n  cil3d,\n  cil4k,\n  cilActionUndo,\n  cilAirplay,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilTerminal,\n} from '@coreui/icons'\nimport { useLoader } from 'src/global-context/LoaderContext'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport useDataStore from 'src/store/state'\nimport { getFacilitiesData } from 'src/hooks/useAuth'\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from 'src/constants/permissionContant'\nimport { getAllFacilitiesData } from 'src/hooks/useFacilities'\nimport { useMutation } from 'react-query'\nconst AddDepartmentForm = ({ closeModal, saveHandler, data }) => {\n  const dataOrganization = useDataStore((state) => state.data)\n  const { dispatch } = useLoader()\n  const [facilityData, setFacilityData] = useState()\n  const showLoader = () => dispatch({ type: 'SHOW_LOADER' })\n  const [validated, setValidated] = useState(false)\n  const userPermissions = JSON.parse(localStorage.getItem('permissions'))\n  const { mutate: facility } = useMutation(getAllFacilitiesData)\n  const organizationPermission = hasPermissionToActionAccess(userPermissions, _organization, _view)\n  const facilityPermission = hasPermissionToActionAccess(userPermissions, _facility, _view)\n  const departmentPermission = hasPermissionToActionAccess(userPermissions, _department, _view)\n  const [formData, setFormData] = useState({\n    departmentname: '',\n    email: '',\n    description: '',\n    customerid: 'Selected Organization',\n    facilityid: '',\n  })\n  useEffect(() => {\n    if (data) {\n      facilitiesDataFetch(data?.customerid)\n      setFormData(() => ({\n        departmentname: data?.departmentname,\n        email: data?.email,\n        description: data?.description,\n        customerid: data?.customerid,\n        facilityid: data?.facilityid,\n      }))\n    }\n  }, [data])\n\n  const { mutate: getFacilities } = useMutation(getFacilitiesData)\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data)\n        },\n        onError: (error) => {},\n      })\n    }\n  }\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target\n    console.log(e.target.value)\n    const parsedValue =\n      (name === 'customerid' || name === 'facilityid') &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value\n    setFormData({\n      ...formData,\n      [name]: type === 'checkbox' ? checked : parsedValue,\n    })\n    if (name === 'customerid') {\n      facilitiesDataFetch(value)\n    }\n  }\n  function getAllFacilities() {\n    facility('', {\n      onSuccess: (data) => {\n        setFacilityData(data)\n      },\n      onError: (error) => {},\n    })\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget\n    const phoneNumber = formData.organizationContact\n    event.preventDefault()\n    if (form.checkValidity() === false) {\n      event.stopPropagation()\n    }\n\n    setValidated(true)\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader()\n      saveHandler(formData)\n      event.preventDefault()\n      closeModal()\n    }\n  }\n  useEffect(() => {\n    if (facilityPermission) {\n      getAllFacilities()\n    }\n  },[facilityPermission])\n  // useEffect(() => {\n  //   if (formData.customerid !== '') {\n  //     facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n  //   }\n  // }, [])\n  const { darkMode, setDarkMode } = useGlobalInfo()\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? 'select-dark' : ''}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              )\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n\n      {/* Facility */}\n      {facilityPermission && (\n        <CCol md={12}>\n          <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n            Facility*\n          </CFormLabel>\n          <CFormSelect\n            name=\"facilityid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationFacility\"\n            className={` form-select ${darkMode ? 'select-dark' : ''}`}\n            value={formData.facilityid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Facility</option>\n            {facilityData?.data?.map((item) => {\n              return (\n                <option key={item.facilityid} value={item.facilityid}>\n                  {item.name}\n                </option>\n              )\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Department Name */}\n      <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationDepartmentName\">\n          Department Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            type=\"text\"\n            name=\"departmentname\"\n            value={formData.departmentname}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Department Name is required\"\n            id=\"validationDepartmentName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/*Department Email */}\n      <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationDepartmentEmail\">\n          Department Email*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilEnvelopeClosed} alt=\"Departmentemail\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            aria-describedby=\"validationDepartmentEmail\"\n            feedbackInvalid=\"Department Email is required.\"\n            id=\"validationDepartmentEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Description*/}\n      <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"description\">\n          Description*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"description\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            type=\"text\"\n            name=\"description\"\n            value={formData.description}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Description is required\"\n            id=\"validationDescription\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Active*/}\n      <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationFacilityName\">\n          Active\n        </CFormLabel>\n        <CFormCheck id=\"flexCheckDefault\" label=\" \" />\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? 'Edit Department' : 'Add Department'}\n        </CButton>\n      </CCol>\n    </CForm>\n  )\n}\nAddDepartmentForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    departmentname: PropTypes.string,\n    system: PropTypes.string,\n    email: PropTypes.string,\n    description: PropTypes.string,\n    customerid: PropTypes.number,\n    facilityid: PropTypes.number,\n  }),\n}\n\nexport default AddDepartmentForm\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { getDepartmentsData } from \"src/hooks/useAuth\";\nimport {\n  useAllDepartmentsData,\n  deleteDepartment,\n  addDepartment,\n  EditDepartment,\n  getAllDepartmentsData,\n} from \"src/hooks/useDepartments\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllDepByOrgId } from \"src/hooks/useAuth\";\nimport AddDepartmentForm from \"src/views/forms/add-department-form/add-department-form\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"departmentname\", label: \"Department Name\" },\n  { key: \"email\", label: \"Contact Email\" },\n  { key: \"description\", label: \"Description\" },\n  // { key: 'active', label: 'Active' },\n  // { key: 'id', label: 'ID' },\n  // Add more columns as needed\n];\nconst Department = () => {\n  const { dispatch } = useLoader();\n  const { mutate: departmentAdd } = useMutation(addDepartment);\n  const { mutate: departmentEdit } = useMutation(EditDepartment);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, departmentsData, setDepartmentsData } = useGlobalInfo();\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const deleteDepartmentById = useMutation(deleteDepartment);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const [deldepId, setDeldepId] = useState(true);\n  const navigate = useNavigate();\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    showLoader();\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDepartmentsByOrg } = useMutation(getAllDepByOrgId);\n  function departmentsDataFetchByOrg(selectedId) {\n    // showLoader();\n    getDepartmentsByOrg(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDepartmentsData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a department by its ID.\n   * @param {number} departmentId - The ID of the department to be deleted.\n   */\n  const deleteDepartments = (departmentId) => {\n    showLoader();\n    deleteDepartmentById.mutate(departmentId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Department deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"facilityId\") === null ||\n          localStorage.getItem(\"facilityId\") === undefined\n        ) {\n          getAllDepartments();\n        } else {\n          departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        departmentAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Department Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"facilityId\") === null ||\n              localStorage.getItem(\"facilityId\") === undefined\n            ) {\n              getAllDepartments();\n            } else {\n              departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        departmentEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Department Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"facilityId\") === null ||\n                localStorage.getItem(\"facilityId\") === undefined\n              ) {\n                getAllDepartments();\n              } else {\n                departmentsDataFetch(localStorage.getItem(\"facilityId\"));\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  // useEffect(() => {\n  //   if (\n  //     (localStorage.getItem(\"OrganizationId\") === undefined ||\n  //       localStorage.getItem(\"OrganizationId\") === \"Select Organization\" ||\n  //       localStorage.getItem(\"OrganizationId\") === null) &&\n  //     (localStorage.getItem(\"facilityId\") === undefined ||\n  //       localStorage.getItem(\"facilityId\") === \"Select Facility\" ||\n  //       localStorage.getItem(\"facilityId\") === null)\n  //   ) {\n  //     getAllDepartments();\n  //   } else {\n  //     return;\n  //   }\n  // }, [\n  //   localStorage.getItem(\"facilityId\"),\n  //   localStorage.getItem(\"OrganizationId\"),\n  // ]);\n  // useEffect(() => {\n  //   const organizationId = localStorage.getItem(\"OrganizationId\");\n  //   const facilityId = localStorage.getItem(\"facilityId\");\n  \n  //   if (\n  //     (organizationId === undefined ||\n  //       organizationId === \"Select Organization\" ||\n  //       organizationId === null) &&\n  //     (facilityId === undefined ||\n  //       // facilityId === \"Select Facility\" ||\n  //       facilityId === null)\n  //   ) {\n  //     getAllDepartments();\n  //   } else if (facilityId === \"Select Facility\") {\n  //     // Call departmentsDataFetchByOrg() when facilityId is \"Select Facility\"\n  //     departmentsDataFetchByOrg(organizationId);\n  //   } else {\n  //     // Additional conditions or actions can be added here if needed\n  //     return;\n  //   }\n  // }, [localStorage.getItem(\"facilityId\"), localStorage.getItem(\"OrganizationId\")]);\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n  \n    if (\n      (organizationId === undefined ||\n        organizationId === \"Select Organization\" ||\n        organizationId === null) &&\n      (facilityId === undefined ||\n        // facilityId === \"Select Facility\" ||\n        facilityId === null)\n    ) {\n      getAllDepartments();\n    } else if (facilityPermission && facilityId === \"Select Facility\") {\n      // Call getAllDepartments when facilityPermission is true and facilityId is \"Select Facility\"\n      getAllDepartments();\n    } else if (facilityId === \"Select Facility\") {\n      // Call departmentsDataFetchByOrg() when facilityId is \"Select Facility\"\n      departmentsDataFetchByOrg(organizationId);\n    } else {\n      // Additional conditions or actions can be added here if needed\n      return;\n    }\n  }, [localStorage.getItem(\"facilityId\"), localStorage.getItem(\"OrganizationId\")]);\n  \n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Department\" : \"Edit Department\"}\n        content={\n          isAddMode ? (\n            <AddDepartmentForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddDepartmentForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Departments\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Department\n            </CButton>\n          </CCol>\n        </CRow>\n        {departmentsData ? (\n          <GenericTable\n            columns={columns}\n            data={departmentsData}\n            openEditModal={openEditModal}\n            OnDeleteItem={deleteDepartments}\n            deldepId={deldepId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Department;\n","/* eslint-disable react/prop-types */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormCheck,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilBuilding, cilSignalCellular0 } from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { getDepartmentsData, getFacilitiesData } from \"src/hooks/useAuth\";\nimport { getAllDepartmentsData } from \"src/hooks/useDepartments\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nimport { getAllFacilitiesData } from \"src/hooks/useFacilities\";\nconst AddDeviceForm = ({ closeModal, saveHandler, data }) => {\n  const dataOrganization = useDataStore((state) => state.data);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const [validated, setValidated] = useState(false);\n  const [facilityData, setFacilityData] = useState();\n  const [departmentsData, setDepartmentsData] = useState();\n  const { dispatch } = useLoader();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const { mutate: getAllDep } = useMutation(getAllDepartmentsData);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [formData, setFormData] = useState({\n    devicename: \"\",\n    manufacturer: \"\",\n    facilityid: 0,\n    departmentid: 0,\n    // active: true,\n    customerid: 0,\n    email: \"\",\n    delaytime:0,\n  });\n  useEffect(() => {\n    if (data) {\n      // // //debugger\n      // facilitiesDataFetch(data?.customerid)\n      // departmentsDataFetch(data?.departmentid)\n      setFormData(() => ({\n        devicename: data.devicename,\n        manufacturer: data.manufacturer,\n        facilityid: data?.facilityid,\n        departmentid: data?.departmentid,\n        customerid: data?.customerid,\n        email: data.email,\n        delaytime:data.delaytime,\n      }));\n    }\n  }, [data]);\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    if (selectedId !== null) {\n      getFacilities(selectedId, {\n        onSuccess: (data) => {\n          setFacilityData(data);\n        },\n        onError: (error) => {},\n      });\n    }\n  }\n  const { mutate: getDepartments } = useMutation(getDepartmentsData);\n  function departmentsDataFetch(selectedId) {\n    getDepartments(selectedId, {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleInputChange = (e) => {\n    console.log(e.target.value);\n    const { name, value, type, checked } = e.target;\n    console.log(e.target.value);\n    const parsedValue =\n      ( name === \"delaytime\" ||\n        name === \"customerid\" ||\n        name === \"facilityid\" ||\n        name === \"departmentid\") &&\n      value !== `Selected ${name.charAt(0).toUpperCase() + name.slice(1)}`\n        ? parseInt(value, 10)\n        : value;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n    if (name === \"customerid\") {\n      facilitiesDataFetch(value);\n    } else if (name === \"facilityid\") {\n      departmentsDataFetch(value);\n    }\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllDepartments() {\n    getAllDep(\"\", {\n      onSuccess: (data) => {\n        setDepartmentsData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  useEffect(() => {\n    if (facilityPermission) {\n      getAllFacilities();\n    } else if (departmentPermission) {\n      // //debugger\n      getAllDepartments();\n    }\n  }, [facilityPermission]);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n\n      {/* Facilities */}\n      {facilityPermission && (\n        <CCol md={12}>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationManufacturerName\"\n          >\n            Facility*\n          </CFormLabel>\n          <CFormSelect\n            name=\"facilityid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationFacilities\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={formData.facilityid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Facility</option>\n            {facilityData?.data?.map((item) => {\n              return (\n                <option key={item.facilityid} value={item.facilityid}>\n                  {item.name}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/*Department Selection */}\n      {departmentPermission && (\n        <CCol md={12}>\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationManufacturerName\"\n          >\n            Department Selection*\n          </CFormLabel>\n          <CFormSelect\n            name=\"departmentid\"\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid facility.\"\n            id=\"validationDepartment\"\n            value={formData.departmentid}\n            onChange={handleInputChange}\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Department</option>\n            {departmentsData?.data?.map((item) => {\n              return (\n                <option key={item.departmentid} value={item.departmentid}>\n                  {item.departmentname}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Device Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n          Equipment Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"devicename\"\n            value={formData.devicename}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Device Name is required\"\n            id=\"validationDeviceName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Manufacturer Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationManufacturerName\"\n        >\n          Manufacturer Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilSignalCellular0} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"manufacturer\"\n            value={formData.manufacturer}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Manufacturer Name is required\"\n            id=\"validationManufacturerName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n          Email\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Device Name is required\"\n            id=\"validationDeviceName\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationDevicesName\"\n        >\n        Time Delay in Minutes\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"delaytime\"\n            value={formData.delaytime}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Time Delay is required\"\n            id=\"validationDeviceName\"\n            required\n            // disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Device\" : \"Add Device\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddDeviceForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    deviceName: PropTypes.string,\n    name: PropTypes.string,\n    manufacturerName: PropTypes.string,\n    facilityid: PropTypes.string,\n    department: PropTypes.string,\n    manufacturer: PropTypes.string, // Added manufacturer validation\n    system: PropTypes.shape({\n      systemName: PropTypes.string, // Added system and systemName validation\n    }),\n  }),\n};\n\nexport default AddDeviceForm;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  getAllDevicesData,\n  useAllDevicesData,\n  addDevice,\n  EditDevice,\n  deleteDevice,\n  getAllDevicesById,\n  getAllDevicesByFacId,\n  getAllDevicesByOrgId,\n} from \"src/hooks/useDevices\";\nimport AddDeviceForm from \"src/views/forms/add-device-form/add-device-form\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport GenericTable from \"src/views/table/GenericTable\";\nconst columns = [\n  { key: \"devicename\", label: \"Equipment Name\" },\n  { key: \"manufacturer\", label: \"Manufacturer\" },\n];\nconst Devices = () => {\n  const { dispatch } = useLoader();\n\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast, devicesData, setDevicesData } = useGlobalInfo();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const navigate = useNavigate();\n  const { mutate: getDevices } = useMutation(getAllDevicesData);\n  // const { data, isSuccess, isError, refetch: refetchDevices } = useAllDevicesData()\n  const { mutate: deviceAdd } = useMutation(addDevice);\n  const { mutate: deviceEdit } = useMutation(EditDevice);\n  const deleteDeviceById = useMutation(deleteDevice);\n  const [deldevId, setDeldevId] = useState(true);\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByOrgID } = useMutation(getAllDevicesByOrgId);\n  function devicesDataByOrg(selectedId) {\n    // showLoader();\n    getDevicesByOrgID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesByFacID } = useMutation(getAllDevicesByFacId);\n  function devicesDataByFac(selectedId) {\n    // showLoader();\n    getDevicesByFacID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  /**\n   * Deletes a device by its ID.\n   * @param {number} deviceId - The ID of the device to be deleted.\n   */\n  const deleteDevices = (deviceId) => {\n    showLoader();\n    deleteDeviceById.mutate(deviceId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device deleted Successfully\",\n        }));\n        // refetchDevices()\n        if (\n          localStorage.getItem(\"departmentId\") === null ||\n          localStorage.getItem(\"departmentId\") === undefined\n        ) {\n          getAllDevices();\n        } else {\n          devicesDataFetch(localStorage.getItem(\"departmentId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllDevices() {\n    getDevices(\"\", {\n      onSuccess: (data) => {\n        setDevicesData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    const facilityId = localStorage.getItem(\"facilityId\");\n    const departmentId = localStorage.getItem(\"departmentId\");\n\n    if (departmentId && departmentId !== \"Select Department\") {\n      // Only departmentId is selected\n      devicesDataFetch(departmentId);\n    } else if (facilityId && facilityId !== \"Select Facility\") {\n      // facilityId is selected, prioritize it over organizationId\n      devicesDataByFac(facilityId);\n    } else if (organizationId && organizationId !== \"Select Organization\") {\n      // Only organizationId is selected and it's not \"Select Organization\"\n      devicesDataByOrg(organizationId);\n    } else {\n      // Fallback: getAllDevices\n      getAllDevices();\n    }\n  }, [\n    localStorage.getItem(\"OrganizationId\"),\n    localStorage.getItem(\"facilityId\"),\n    localStorage.getItem(\"departmentId\"),\n  ]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        deviceAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"departmentId\") === null ||\n              localStorage.getItem(\"departmentId\") === undefined\n            ) {\n              getAllDevices();\n            } else {\n              devicesDataFetch(localStorage.getItem(\"departmentId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        deviceEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"departmentId\") === null ||\n                localStorage.getItem(\"departmentId\") === undefined\n              ) {\n                getAllDevices();\n              } else {\n                devicesDataFetch(localStorage.getItem(\"departmentId\"));\n              }\n            },\n            onError: (error) => {\n              if (error.code === \"ERR_BAD_REQUEST\") {\n                localStorage.removeItem(\"token\");\n                localStorage.removeItem(\"OrganizationId\");\n                localStorage.removeItem(\"facilityId\");\n                localStorage.removeItem(\"departmentId\");\n                navigate(\"/login\");\n              }\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Equipment\" : \"Edit Equipment\"}\n        content={\n          isAddMode ? (\n            <AddDeviceForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <AddDeviceForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Equipment\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Equipment\n            </CButton>\n          </CCol>\n        </CRow>\n        {devicesData ? (\n          <GenericTable\n            columns={columns}\n            data={devicesData}\n            OnDeleteItem={deleteDevices}\n            openEditModal={openEditModal}\n            deldevId={deldevId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Devices;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport {\n  getAllUnassignedUsersData,\n  getAllUnassignedUsersDataByOrg,\n} from \"src/hooks/useUsers\";\nimport { useMutation } from \"react-query\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nconst AddFacilityFrom = ({ closeModal, saveHandler, data }) => {\n  const dataOrganization = useDataStore((state) => state.data);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const { mutate: Users } = useMutation(getAllUnassignedUsersData);\n  const [UserData, setUsersData] = useState([]);\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const [formData, setFormData] = useState({\n    name: \"\",\n    facility_type: \"\",\n    customerid: \"Selected Organization\",\n    timezone: \"\",\n    currency: \"\",\n    contactname: \"\",\n    contactphonenumber: \"\",\n    address: \"\",\n    city: \"\",\n    street: \"\",\n    postcode: 0,\n    latitude: 0,\n    longitude: 0,\n    isfacilityadmin: true,\n    userid: 0,\n  });\n  useEffect(() => {\n    getAllUsers();\n    // //debugger\n    if (data) {\n      setFormData(() => ({\n        name: data.name,\n        facility_type: data.facility_type,\n        customerid: Number(data.customerid),\n        timezone: data.timezone,\n        currency: data.currency,\n        contactname: data.contactname,\n        contactphonenumber: data.contactphonenumber,\n        address: data.address,\n        city: data.city,\n        street: data.street,\n        postcode: +data.postcode,\n        latitude: +data.latitude,\n        longitude: +data.longitude,\n        isfacilityadmin: true,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    if (value === \"\") {\n      setFormData({\n        ...formData,\n        [name]: value,\n      });\n      return;\n    }\n    const parsedValue =\n      (name === \"latitude\" || name === \"longitude\" || name === \"userid\") &&\n      type !== \"checkbox\"\n        ? parseFloat(value)\n        : value;\n\n    const postcodeValue =\n      name === \"postcode\" && type !== \"checkbox\" ? parseInt(value, 10) : value;\n\n    if (\n      (!isNaN(parsedValue) || name !== \"latitude\" || name !== \"longitude\") &&\n      (!isNaN(postcodeValue) || name !== \"postcode\")\n    ) {\n      setFormData({\n        ...formData,\n        [name]: name === \"postcode\" ? postcodeValue : parsedValue,\n      });\n    }\n  };\n  function getAllUsers() {\n    Users(\"\", {\n      onSuccess: (data) => {\n        setUsersData(data);\n      },\n      onError: (error) => {},\n    });\n  }\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    const phoneNumber = formData.organizationContact;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    if (form.checkValidity() === true) {\n      debugger;\n      showLoader();\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {organizationPermission && (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationFacilityName\"\n          >\n            Organization\n          </CFormLabel>\n          <CFormSelect\n            name=\"customerid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid Organization.\"\n            // id=\"validationOrganization\"\n            value={formData.customerid}\n            onChange={handleInputChange}\n            required\n            // eslint-disable-next-line react/prop-types\n            disabled={data ? true : false}\n          >\n            <option>Select Organization</option>\n            {dataOrganization[0]?.map((item) => {\n              return (\n                <option key={item.customerid} value={item.customerid}>\n                  {item.customername}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      )}\n      {/* Facility Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility Name*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil3d} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Facility Type */}\n\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Facility Type*\n        </CFormLabel>\n        <CFormSelect\n          name=\"facility_type\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid facility type.\"\n          id=\"validationFacilityType\"\n          value={formData.facility_type}\n          onChange={handleInputChange}\n          required\n        >\n          <option>Select Facility Type</option>\n          <option value={\"Mixed Dashboard\"}>Mixed Dashboard</option>\n          <option value={\"Energy Dashboard\"}>Energy Dashboard</option>\n          <option value={\"Condition Dashboard\"}>Condition Dashboard</option>\n        </CFormSelect>\n      </CCol>\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Time Zone*\n        </CFormLabel>\n        <CFormSelect\n          name=\"timezone\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.timezone}\n          onChange={handleInputChange}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid time zone.\"\n          id=\"validationTimeZone\"\n          required\n        >\n          <option>Select Timezone</option>\n          <option value={\"Asia/Colombo\"}>Asia/Colombo</option>\n          <option value={\"Asia/Dhaka\"}>Asia/Dhaka</option>\n          <option value={\"Asia/Dubai\"}>Asia/Dubai</option>\n        </CFormSelect>\n      </CCol>\n\n      {/*Currency */}\n      {/* <CFormLabel htmlFor=\"validationCurrency\">Currency*</CFormLabel>*/}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Currency*\n        </CFormLabel>\n        <CFormSelect\n          name=\"currency\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          value={formData.currency}\n          onChange={handleInputChange}\n          aria-describedby=\"validationCurrency\"\n          feedbackInvalid=\"Please select a valid currency.\"\n          id=\"validationCurrency\"\n          required\n        >\n          <option>Select Currency</option>\n          <option value={\"USD\"}>USD</option>\n          <option value={\"EUR\"}>EUR</option>\n          <option value={\"ZAR\"}>ZAR</option>\n        </CFormSelect>\n      </CCol>\n      {/* Site manager */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          Site Manager\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"contactname\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"contactname\"\n            value={formData.contactname}\n            onChange={handleInputChange}\n            aria-describedby=\"validationSiteManager\"\n            feedbackInvalid=\"Site Manager required.\"\n            id=\"validationSiteManager\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* Contact */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          Contact Number*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"tel\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"contactphonenumber\"\n            placeholder=\"+92xxxx\"\n            value={formData.contactphonenumber}\n            onChange={handleInputChange}\n            aria-describedby=\"validationContactNumber\"\n            feedbackInvalid=\"Phone Number is required.\"\n            id=\"validationContactNumber\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/*Contact Email*/}\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Select User\n        </CFormLabel>\n        <CFormSelect\n          name=\"userid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid User.\"\n          // id=\"validationOrganization\"\n          value={formData.userid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select User</option>\n          {UserData?.data?.map((item) => {\n            return (\n              <option key={item.userid} value={item.userid}>\n                {item.firstname}\n                {item.lastname}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilBuilding} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationAddress\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Street*/}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          Street*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"Street\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"street\"\n            value={formData.street}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Street is required.\"\n            id=\"validationStreet\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* City */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          City*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"City\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"City is required.\"\n            id=\"validationCity\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Postcode */}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Postcode\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"Postcode\" />*/}\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"postcode\"\n            value={formData.postcode}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Postcode is required\"\n            id=\"validationPostcode\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* latitude */}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Latitude*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"latitude\" /> */}\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"latitude\"\n            value={formData.latitude}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"latitude is required\"\n            id=\"validationLatitude\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/*Longitude*/}\n      <CCol md={4}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Longitude*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <CIcon icon={cilPaperclip} alt=\"longitude\" />*/}\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"number\"\n            name=\"longitude\"\n            value={formData.longitude}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"longitude is required\"\n            id=\"validationLongitude\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Facility\" : \"Add Facility\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddFacilityFrom.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    name: PropTypes.string,\n    facility_type: PropTypes.string,\n    customerid: PropTypes.string,\n    timezone: PropTypes.string,\n    currency: PropTypes.string,\n    contactname: PropTypes.string,\n    contactphonenumber: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.string,\n    city: PropTypes.string,\n    street: PropTypes.string,\n    postcode: PropTypes.string,\n    latitude: PropTypes.string,\n    longitude: PropTypes.string,\n  }),\n};\n\nexport default AddFacilityFrom;\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  useAllFacilitiesData,\n  addFacility,\n  EditFacility,\n  deleteFacility,\n  getAllFacilitiesData,\n} from \"src/hooks/useFacilities\";\nimport AddFacilityFrom from \"src/views/forms/add-facility-from/add-facility-from\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { getFacilitiesData } from \"src/hooks/useAuth\";\nconst columns = [\n  { key: \"name\", label: \"Facility Name\" },\n  { key: \"facility_type\", label: \"Facility Type\" },\n  { key: \"email\", label: \"Contact Email\" },\n  // { key: \"site_manager\", label: \"Site Manager\" },\n  { key: \"contactphonenumber\", label: \"Contact Number\" },\n  { key: \"address\", label: \"Address\" },\n  { key: \"street\", label: \"Street\" },\n  { key: \"city\", label: \"City\" },\n  { key: \"postcode\", label: \"Postcode\" },\n];\nconst Facilities = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: facilityAdd } = useMutation(addFacility);\n  const { mutate: facilityEdit } = useMutation(EditFacility);\n  const { facilityData, setFacilityData } = useGlobalInfo();\n  const { mutate: facility } = useMutation(getAllFacilitiesData);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteFacilityById = useMutation(deleteFacility);\n  const [delfacId, setDelfacId] = useState(true);\n\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes a Fecility by its ID.\n   * @param {number} facilityId - The ID of the Facility to be deleted.\n   */\n  const deleteFacilities = (facilityId) => {\n    showLoader();\n    deleteFacilityById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Facility deleted Successfully\",\n        }));\n        if (\n          localStorage.getItem(\"OrganizationId\") === null ||\n          localStorage.getItem(\"OrganizationId\") === undefined\n        ) {\n          getAllFacilities();\n        } else {\n          facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n        }\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllFacilities() {\n    facility(\"\", {\n      onSuccess: (data) => {\n        setFacilityData(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  const { mutate: getFacilities } = useMutation(getFacilitiesData);\n  function facilitiesDataFetch(selectedId) {\n    getFacilities(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setFacilityData(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    if (\n      localStorage.getItem(\"OrganizationId\") === undefined ||\n      localStorage.getItem(\"OrganizationId\") === \"Select Organization\" ||\n      localStorage.getItem(\"OrganizationId\") === null\n    ) {\n      getAllFacilities();\n    } else {\n      return;\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        facilityAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Facility Created Successfully\",\n            }));\n            if (\n              localStorage.getItem(\"OrganizationId\") === null ||\n              localStorage.getItem(\"OrganizationId\") === undefined\n            ) {\n              getAllFacilities();\n            } else {\n              facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n            }\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        facilityEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Facility Edited Successfully\",\n              }));\n              if (\n                localStorage.getItem(\"OrganizationId\") === null ||\n                localStorage.getItem(\"OrganizationId\") === undefined\n              ) {\n                getAllFacilities();\n              } else {\n                facilitiesDataFetch(localStorage.getItem(\"OrganizationId\"));\n              }\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Facility\" : \"Edit Facility\"}\n        content={\n          isAddMode ? (\n            <AddFacilityFrom\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddFacilityFrom\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Facilities\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Facilities\n            </CButton>\n          </CCol>\n        </CRow>\n        {facilityData ? (\n          <GenericTable\n            columns={columns}\n            OnDeleteItem={deleteFacilities}\n            data={facilityData}\n            openEditModal={openEditModal}\n            delfacId={delfacId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default Facilities;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cil3d, cilNotes, cilPhone } from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst Gateway = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const dataOrganization = useDataStore((state) => state.data);\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    gateway_id: \"\",\n    gateway_note: \"\",\n    customerid: Number(localStorage.getItem(\"OrganizationId\")),\n    location: \"\",\n    carrier: \"\",\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        gateway_id: data.gateway_id,\n        gateway_note: data.gateway_note,\n        customerid: data.customerid,\n        location:data.location,\n        carrier: data.carrier,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n\n    // If the name is 'customerid', parse the value as a number\n    const parsedValue = name === \"customerid\" ? parseInt(value, 10) : value;\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      //debugger;\n      saveHandler(formData);\n      console.log(formData);\n      closeModal();\n    }\n  };\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Organization\n        </CFormLabel>\n        <CFormSelect\n          name=\"customerid\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          aria-describedby=\"validationCustom04Feedback\"\n          feedbackInvalid=\"Please select a valid Organization.\"\n          // id=\"validationOrganization\"\n          value={formData.customerid}\n          onChange={handleInputChange}\n          required\n          // eslint-disable-next-line react/prop-types\n          disabled={data ? true : false}\n        >\n          <option>Select Organization</option>\n          {dataOrganization[0]?.map((item) => {\n            return (\n              <option key={item.customerid} value={item.customerid}>\n                {item.customername}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n      {/* Gateway ID */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Gateway ID*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil3d} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_id\"\n            value={formData.gateway_id}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Notes */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Notes*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.gateway_note}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Carrier*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.carrier}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationFacilityName\"\n        >\n          Location*\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilNotes} alt=\"Notes\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"gateway_note\"\n            value={formData.location}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Facility Name is required\"\n            id=\"validationFacilityName\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Facility\" : \"Add GateWay\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nGateway.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    gateway_id: PropTypes.string,\n    gateway_note: PropTypes.string,\n    customerid: PropTypes.string,\n    location: PropTypes.string,\n    carrier: PropTypes.string,\n  }),\n};\n\nexport default Gateway;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllGatewayData = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`gateway/get-all-gateways/${id}`);\n  return data;\n};\nexport const getAllGateways = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`gateway/get-all-gateways`);\n  return data;\n};\n\nexport const addGateWay = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `gateway/assign-to-organization`,\n    payload\n  );\n  return data;\n};\n\nexport const EditGateWay = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.patch(\n    `/gateway/update-gateway/${payload.editData.gatewayid}`,\n    payload.handler\n  );\n  return data;\n};\nexport const deleteGateway = async (id) => {\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.delete(`gateway/delete-gateway/${id}`);\n  return data;\n};\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport GatewayForm from \"../../../forms/gateway/GatewayForm\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport AddDeviceSensor from \"src/views/forms/add-device-sensors/add-device-sensor\";\nimport {\n  getAllGatewayData,\n  addGateWay,\n  deleteGateway,\n  EditGateWay,\n  getAllGateways,\n} from \"src/hooks/usegateway\";\nconst columns = [\n  { key: \"gateway_id\", label: \"Gateway ID\" },\n  { key: \"gateway_note\", label: \"Gateway Notes\" },\n  { key: \"carrier\", label: \"Carrier\" },\n  { key: \"location\", label: \"Location\" },\n\n  // { key: 'action', label: 'Action' },\n];\nconst Gateway = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: gatewayAdd } = useMutation(addGateWay);\n  // const dataOrganization = useDataStore((state) => state.data)\n  const { mutate: gatewayEdit } = useMutation(EditGateWay);\n  const { mutate: GatewayData } = useMutation(getAllGatewayData);\n  const { mutate: AllGatewayData } = useMutation(getAllGateways);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [gatewayData, setgatewaydata] = useState([]);\n  const [editData, setEditData] = useState();\n  //const [data, setData] = useState([]);\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteGatewayById = useMutation(deleteGateway);\n  const [delgatewayId, setdelgatewayId] = useState(true);\n  const navigate = useNavigate();\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function getAllGatewaysByOrg(id) {\n    GatewayData(id, {\n      onSuccess: (data) => {\n        hideLoader();\n        setgatewaydata(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  function getAllgateways() {\n    AllGatewayData(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setgatewaydata(data.data);\n      },\n      onError: (error) => {},\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n\n    if (organizationId && organizationId !== \"Select Organization\") {\n      // If organizationId is present and not 'Select Organization', call gByOrg\n      getAllGatewaysByOrg(organizationId);\n    } else {\n      // If organizationId is null, undefined, or 'Select Organization', call getAllGateways\n      getAllgateways();\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n\n  /**\n     * Deletes a Fecility by its ID.\n     * @param {number} facilityId - The ID of the Facility to be deleted.\n    //  */\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        gatewayAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"GateWay Created Successfully\",\n            }));\n            getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        gatewayEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"GateWay Edited Successfully\",\n              }));\n              getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const deleteFacilities = (facilityId) => {\n    // //debugger\n    showLoader();\n    deleteGatewayById.mutate(facilityId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"GateWay deleted Successfully\",\n        }));\n\n        getAllGatewaysByOrg(localStorage.getItem(\"OrganizationId\"));\n\n        hideLoader();\n      },\n      onError: (error) => {\n        if (error.code === \"ERR_BAD_REQUEST\") {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"OrganizationId\");\n          localStorage.removeItem(\"facilityId\");\n          localStorage.removeItem(\"departmentId\");\n          navigate(\"/login\");\n        }\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data.error,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add GateWay\" : \"Edit GateWay\"}\n        content={\n          isAddMode ? (\n            <GatewayForm closeModal={closeModal} saveHandler={saveHandler} />\n          ) : (\n            <GatewayForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              GateWay\n            </h3>\n          </CCol>\n          <CCol className=\"d-flex gap-5 justify-content-end\">\n            <div>\n              <CButton\n                color=\"primary\"\n                className=\"float-end mr-3\"\n                onClick={() => {\n                  setIsAddMode(true);\n                  setEditData(null);\n                  setIsModalOpen(true);\n                }}\n              >\n                Add GateWay\n              </CButton>\n            </div>\n            <div className=\"d-flex gap-2\">\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Day\n              </CButton>\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Week\n              </CButton>\n\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Month\n              </CButton>\n              <CButton color=\"primary\" className=\"float-end mr-3\">\n                Hour\n              </CButton>\n            </div>\n          </CCol>\n        </CRow>\n        {gatewayData ? (\n          <GenericTable\n            columns={columns}\n            data={gatewayData}\n            OnDeleteItem={deleteFacilities}\n            openEditModal={openEditModal}\n            delgatewayId={delgatewayId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\nexport default Gateway;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil4k,\n  cilBuilding,\n  cilLibraryBuilding,\n  cilLocationPin,\n  cilPaperPlane,\n  cilPaperclip,\n  cilPhone,\n  cilClock,\n  cilPeople,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n// eslint-disable-next-line react/prop-types\nconst AddOrganizationForm = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    customername: \"\",\n    contactperson: \"\",\n    email: \"\",\n    address: \"\",\n    city: \"\",\n    street: \"\",\n    postcode: \"\",\n    phone: \"\",\n    interval1: null,\n    interval2: null,\n    interval3: null,\n    interval4: null,\n  });\n  useEffect(() => {\n    // // //debugger\n    if (data) {\n      setFormData(() => ({\n        customername: data.customername,\n        contactperson: data.contactperson,\n        email: data.email,\n        address: data.address,\n        city: data.city,\n        street: data.street,\n        postcode: data.postcode,\n        phone: data.phone,\n        interval1: data.interval1,\n        interval2: data.interval2,\n        interval3: data.interval3,\n        interval4: data.interval4,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    let parsedValue = value;\n\n    if (\n      name === \"postcode\" ||\n      name === \"interval1\" ||\n      name === \"interval2\" ||\n      name === \"interval3\" ||\n      (name === \"interval4\" && type !== \"checkbox\")\n    ) {\n      // Parse the \"postcode\" value as an integer\n      parsedValue = parseInt(value, 10) || 0;\n\n      // If the parsed value is 0, set it to null\n      if (parsedValue === 0) {\n        parsedValue = null;\n      }\n    }\n\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : parsedValue,\n    });\n  };\n\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      debugger;\n      showLoader();\n      saveHandler(formData);\n      closeModal();\n    }\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Organization Name */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationName\"\n        >\n          Organization Name\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {/* <MdLocationPin /> */}\n            <CIcon icon={cilBuilding} alt=\"Name\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"customername\"\n            value={formData.customername}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Organization Name is required\"\n            id=\"validationCustom01\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Organization Contact */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationContact\"\n        >\n          Contact Person\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPeople} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"contactperson\"\n            value={formData.contactperson}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Please enter a valid phone number\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationContact\"\n        >\n          Phone\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPhone} alt=\"Contact\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"phone\"\n            value={formData.phone}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Please enter a valid phone number\"\n            id=\"validationCustom02\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Organization Email */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Organization Email\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilPaperPlane} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"email\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"email\"\n            value={formData.email}\n            onChange={handleEmailChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            feedbackInvalid=\"Organization Email is required\"\n            id=\"validationCustomorganizationEmail\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={12}>Set CheckPoint Intervals</CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 1\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval1\"\n            value={formData.interval1}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 2\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval2\"\n            value={formData.interval2}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 3\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval3\"\n            value={formData.interval3}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      <CCol md={3}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomorganizationEmail\"\n        >\n          Interval 4\n        </CFormLabel>\n        <CInputGroup className=\"has-validation\">\n          <CInputGroupText>\n            <CIcon icon={cilClock} alt=\"Email\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"number\"\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            name=\"interval4\"\n            value={formData.interval4}\n            onChange={handleInputChange}\n            aria-describedby=\"inputGroupPrependFeedback\"\n            // feedbackInvalid=\"CheckPoint Interval is required\"\n            // id=\"validationCustomorganizationEmail\"\n            // required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Address */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomAddress\"\n        >\n          Address\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLocationPin} alt=\"Address\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"address\"\n            value={formData.address}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom03Feedback\"\n            feedbackInvalid=\"Address is required.\"\n            id=\"validationCustom03\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* City */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomCity\"\n        >\n          City\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilLibraryBuilding} alt=\"City\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"city\"\n            value={formData.city}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"City is required.\"\n            id=\"validationCustom04\"\n            required\n          ></CFormInput>\n        </CInputGroup>\n      </CCol>\n      {/* Street */}\n      <CCol md={6}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomStreet\"\n        >\n          Street\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cil4k} alt=\"Street\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"street\"\n            value={formData.street}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Street is required.\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Postcode */}\n      <CCol md={12}>\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationCustomPostcode\"\n        >\n          Postcode\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            <CIcon icon={cilPaperclip} alt=\"Postcode\" />\n          </CInputGroupText>\n          <CFormInput\n            className={`input-light pt-0 ${darkMode ? \"input-dark\" : \"\"}`}\n            type=\"text\"\n            name=\"postcode\"\n            value={formData.postcode}\n            onChange={handleInputChange}\n            aria-describedby=\"validationCustom05Feedback\"\n            feedbackInvalid=\"Postcode is required\"\n            id=\"validationCustom05\"\n            required\n          />\n        </CInputGroup>\n      </CCol>\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton\n          color=\"primary\"\n          className=\"float-end\"\n          id={`${darkMode ? \"button-dark\" : \"\"}`}\n          type=\"submit\"\n        >\n          {data ? \"Edit Organization\" : \"Add Organization\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddOrganizationForm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.oneOfType([\n    PropTypes.array, // editdata can be an array\n    PropTypes.shape({\n      // Or an object\n      customername: PropTypes.string,\n      contactperson: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.string,\n      city: PropTypes.string,\n      street: PropTypes.string,\n      postcode: PropTypes.string,\n    }),\n  ]),\n};\n\nexport default AddOrganizationForm;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\n\nimport useDataStore from \"src/store/state\";\nimport Modals from \"src/views/notifications/modals/Modals\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport Facilities from \"../facilities/Facilities\";\nimport AddOrganizationForm from \"src/views/forms/add-organization-form/AddOrganizationForm\";\nimport { useMutation } from \"react-query\";\nimport {\n  addOrganization,\n  getOrganizationData,\n  EditOrganization,\n  deleteOrganization,\n} from \"src/hooks/useAuth\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nconst columns = [\n  { key: \"customername\", label: \"Organization Name\" },\n  { key: \"contactperson\", label: \"Organization Contact\" },\n  { key: \"email\", label: \"Contact Email\" },\n  { key: \"calibration_date\", label: \"Calibration Date\" },\n  { key: \"address\", label: \"Address\" },\n  { key: \"street\", label: \"Street\" },\n  { key: \"city\", label: \"City\" },\n  { key: \"postcode\", label: \"Postcode\" },\n];\nconst Organization = () => {\n  const addData = useDataStore((state) => state.addData);\n  const { mutate: organizationAdd } = useMutation(addOrganization);\n  const { mutate: organizationData } = useMutation(getOrganizationData);\n  const { mutate: organizationedit } = useMutation(EditOrganization);\n  const data = useDataStore((state) => state.data);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const [delorgId, setDelOrgId] = useState(true);\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n\n  /**\n   * Deletes an Organization by its ID.\n   * @param {number} organizationId - The ID of the Organization to be deleted.\n   */\n  const deleteOrganizations = (organizationId) => {\n    showLoader();\n    deleteOrganizationById.mutate(organizationId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Organization deleted Successfully\",\n        }));\n        organizationData(\"\", {\n          onSuccess: (data) => {\n            addData(data.data);\n          },\n          onError: (error) => {\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data,\n            }));\n          },\n        });\n        hideLoader();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const { dispatch } = useLoader();\n  const navigate = useNavigate();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const deleteOrganizationById = useMutation(deleteOrganization);\n  function saveHandler(handler) {\n    showLoader();\n\n    setTimeout(() => {\n      if (isAddMode) {\n        organizationAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Organization Created Successfully\",\n            }));\n            organizationData(\"\", {\n              onSuccess: (data) => {\n                // //debugger\n                addData(data.data);\n              },\n              onError: (error) => {\n                setShowToast(() => ({\n                  show: true,\n                  title: \"Error\",\n                  content: error.response.data,\n                }));\n              },\n            });\n          },\n          onError: (error) => {\n            // //debugger\n            if (error.code === \"ERR_BAD_REQUEST\") {\n              localStorage.removeItem(\"token\");\n              localStorage.removeItem(\"OrganizationId\");\n              localStorage.removeItem(\"facilityId\");\n              localStorage.removeItem(\"departmentId\");\n              navigate(\"/login\");\n            }\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error.response.data.error,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        organizationedit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Organization Edited Successfully\",\n              }));\n              organizationData(\"\", {\n                onSuccess: (data) => {\n                  addData(data.data);\n                },\n                onError: (error) => {\n                  setShowToast(() => ({\n                    show: true,\n                    title: \"Error\",\n                    content: error.response.data,\n                  }));\n                },\n              });\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data.error,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      <GenericModal\n        title={isAddMode ? \"Add Organization\" : \"Edit Organization\"}\n        content={\n          isAddMode ? (\n            <AddOrganizationForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddOrganizationForm\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 id={`${darkMode ? \"heading-dark\" : \"\"}`} className=\"pb-2\">\n              Organizations\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              className=\"float-end\"\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Organization\n            </CButton>\n          </CCol>\n        </CRow>\n        <GenericTable\n          columns={columns}\n          data={data[0]}\n          openEditModal={openEditModal}\n          OnDeleteItem={deleteOrganizations}\n          delorgId={delorgId}\n        />\n      </CCard>\n    </>\n  );\n};\n\nexport default Organization;\n","import { setAuthenticationToken } from \"./auth\";\nimport { axiosInstance } from \"./axios\";\n\nexport const getAllNotificationDataByEmail = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/${id}?type=email`\n  );\n  return data;\n};\nexport const getAllNotificationDataBySms = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/${id}?type=phone`\n  );\n  return data;\n};\nexport const getAllSelectedUsers = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(\n    `notificationsetup/selected-users/${id}`\n  );\n  return data;\n};\nconst orgid = localStorage.getItem(\"OrganizationId\");\nexport const addNotificationUsers = async (payload) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.post(\n    `notificationsetup/create/${orgid}`,\n    payload\n  );\n  return data;\n};\nexport const getAllOrganizationCredits = async (id) => {\n  //debugger\n  setAuthenticationToken(localStorage.getItem(\"token\"));\n  const { data } = await axiosInstance.get(`organization/credit/${id}`);\n  return data;\n};\n","import React, { useState, useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CFormCheck,\n  CInputGroupText,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilNotes,\n  cilPhone,\n} from '@coreui/icons'\nimport { useLoader } from 'src/global-context/LoaderContext'\nimport useDataStore from 'src/store/state'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nimport { addNotificationUsers, getAllNotificationDataByEmail } from 'src/hooks/useNotifications'\nimport { useMutation } from 'react-query'\nimport Organization from 'src/views/pages/admin/organization/Organization'\n\nconst NotificationAlarm = ({ closeModal, saveHandler, data }) => {\n  const [tableDataArray, setDataTableArray] = useState([])\n  const { dispatch } = useLoader()\n  const showLoader = () => dispatch({ type: 'SHOW_LOADER' })\n  const hideLoader = () => dispatch({ type: 'HIDE_LOADER' })\n  const { mutate: AllData } = useMutation(getAllNotificationDataByEmail)\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  \n  function EmailDataFetch(id) {\n    AllData(id, {\n      onSuccess: (data) => {\n        hideLoader()\n        setDataTableArray(data.data)\n      },\n      onError: (error) => {\n        hideLoader()\n      },\n    })\n  }\n  const [checkedItems, setCheckedItems] = useState([])\n  const [isAllNoneChecked, setIsAllNoneChecked] = useState(false)\n\n  // Handler for checkbox change\n  const handleCheckboxChange = (index) => {\n    const isChecked = checkedItems.includes(index)\n\n    // Create a copy of checkedItems to avoid mutating state directly\n    const updatedCheckedItems = [...checkedItems]\n\n    if (isChecked) {\n      // Item is checked, remove it\n      updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n    } else {\n      // Item is unchecked, add it\n      updatedCheckedItems.push(index)\n    }\n\n    setCheckedItems(updatedCheckedItems)\n  }\n  // const handleCheckboxChange = (index) => {\n  //   // Create a copy of checkedItems to avoid mutating state directly\n  //   const updatedCheckedItems = [...checkedItems]\n\n  //   // Toggle the checkbox state\n  //   if (updatedCheckedItems.includes(index)) {\n  //     updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n  //   } else {\n  //     updatedCheckedItems.push(index)\n  //   }\n\n  //   setCheckedItems(updatedCheckedItems)\n  // }\n\n  // Handler for \"All/None\" checkbox change\n  const handleAllNoneCheckboxChange = () => {\n    // If \"All/None\" is checked, set all checkboxes to be checked; otherwise, uncheck them\n    setIsAllNoneChecked((prev) => {\n      const updatedCheckedItems = prev\n        ? []\n        : Array.from({ length: tableDataArray.length }, (_, i) => i)\n      setCheckedItems(updatedCheckedItems)\n      return !prev\n    })\n  }\n\n  // Handler for Save button click\n  const handleSaveClick = () => {\n    const checkedItemsData = checkedItems.map((index) => tableDataArray[index])\n    // Log the checked items to the console\n    console.log('Checked Items:', checkedItemsData)\n    // Call the saveHandler function with the array parameter\n    saveHandler(checkedItemsData)\n\n    // Optionally, close the modal or perform other actions\n    closeModal()\n  }\n  useEffect(() => {\n    EmailDataFetch(localStorage.getItem('OrganizationId'))\n  }, [localStorage.getItem('OrganizationId')])\n  useEffect(() => {\n    // Initialize checkedItems based on is_email field\n    const initialCheckedItems = tableDataArray\n      .map((rowData, index) => (rowData.is_email ? index : null))\n      .filter((index) => index !== null)\n\n    setCheckedItems(initialCheckedItems)\n  }, [tableDataArray])\n  return (\n    <div>\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Name</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Email Address</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n              <CFormCheck\n                id=\"defaultCheckAllNone\"\n                label=\"All/None\"\n                checked={isAllNoneChecked}\n                onChange={handleAllNoneCheckboxChange}\n              />\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {/* Map over the array to render table rows */}\n          {tableDataArray.map((rowData, index) => (\n            <CTableRow key={index}>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.name}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.email}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n                {/* Use handleCheckboxChange to handle checkbox change */}\n                <CFormCheck\n                  id={`defaultCheck${index + 1}`}\n                  onChange={() => handleCheckboxChange(index)}\n                  checked={checkedItems.includes(index)}\n                  \n                />\n              </CTableDataCell>\n            </CTableRow>\n          ))}\n        </CTableBody>\n      </CTable>\n      {/* Button to trigger handleSaveClick */}\n      <button onClick={handleSaveClick}>Save</button>\n    </div>\n  )\n}\n\nexport default NotificationAlarm\nNotificationAlarm.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    data: PropTypes.array.isRequired,\n  }).isRequired,\n}\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CTable,\n  CTableHead,\n  CTableRow,\n  CTableHeaderCell,\n  CTableDataCell,\n  CTableBody,\n  CFormCheck,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cil3d,\n  cil4k,\n  cilBuilding,\n  cilEnvelopeClosed,\n  cilLibraryBuilding,\n  cilNotes,\n  cilPhone,\n} from \"@coreui/icons\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { getAllNotificationDataBySms } from \"src/hooks/useNotifications\";\nconst SmsNumber = ({ closeModal, saveHandler, data }) => {\n  const [tableDataArray, setDataTableArray] = useState([]);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: AllData } = useMutation(getAllNotificationDataBySms);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  function EmailDataFetch(id) {\n    AllData(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setDataTableArray(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const [checkedItems, setCheckedItems] = useState([]);\n  const [isAllNoneChecked, setIsAllNoneChecked] = useState(false);\n\n  // Handler for checkbox change\n  const handleCheckboxChange = (index) => {\n    const isChecked = checkedItems.includes(index);\n\n    // Create a copy of checkedItems to avoid mutating state directly\n    const updatedCheckedItems = [...checkedItems];\n\n    if (isChecked) {\n      // Item is checked, remove it\n      updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1);\n    } else {\n      // Item is unchecked, add it\n      updatedCheckedItems.push(index);\n    }\n\n    setCheckedItems(updatedCheckedItems);\n  };\n  // const handleCheckboxChange = (index) => {\n  //   // Create a copy of checkedItems to avoid mutating state directly\n  //   const updatedCheckedItems = [...checkedItems]\n\n  //   // Toggle the checkbox state\n  //   if (updatedCheckedItems.includes(index)) {\n  //     updatedCheckedItems.splice(updatedCheckedItems.indexOf(index), 1)\n  //   } else {\n  //     updatedCheckedItems.push(index)\n  //   }\n\n  //   setCheckedItems(updatedCheckedItems)\n  // }\n\n  // Handler for \"All/None\" checkbox change\n  const handleAllNoneCheckboxChange = () => {\n    // If \"All/None\" is checked, set all checkboxes to be checked; otherwise, uncheck them\n    setIsAllNoneChecked((prev) => {\n      const updatedCheckedItems = prev\n        ? []\n        : Array.from({ length: tableDataArray.length }, (_, i) => i);\n      setCheckedItems(updatedCheckedItems);\n      return !prev;\n    });\n  };\n\n  // Handler for Save button click\n  const handleSaveClick = () => {\n    const checkedItemsData = checkedItems.map((index) => tableDataArray[index]);\n    // Log the checked items to the console\n    console.log(\"Checked Items:\", checkedItemsData);\n    // Call the saveHandler function with the array parameter\n    saveHandler(checkedItemsData);\n\n    // Optionally, close the modal or perform other actions\n    closeModal();\n  };\n  useEffect(() => {\n    EmailDataFetch(localStorage.getItem(\"OrganizationId\"));\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  useEffect(() => {\n    // Initialize checkedItems based on is_email field\n    const initialCheckedItems = tableDataArray\n      .map((rowData, index) => (rowData.is_email ? index : null))\n      .filter((index) => index !== null);\n\n    setCheckedItems(initialCheckedItems);\n  }, [tableDataArray]);\n  return (\n    <div>\n      <CTable>\n        <CTableHead>\n          <CTableRow>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Name</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>Phone Number</CTableHeaderCell>\n            <CTableHeaderCell scope=\"col\"  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n              <CFormCheck\n                id=\"defaultCheckAllNone\"\n                label=\"All/None\"\n                checked={isAllNoneChecked}\n                onChange={handleAllNoneCheckboxChange}\n              />\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {/* Map over the array to render table rows */}\n          {tableDataArray.map((rowData, index) => (\n            <CTableRow key={index}>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.name}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>{rowData.phonenumber}</CTableDataCell>\n              <CTableDataCell  className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}>\n                {/* Use handleCheckboxChange to handle checkbox change */}\n                <CFormCheck\n                  id={`defaultCheck${index + 1}`}\n                  onChange={() => handleCheckboxChange(index)}\n                  checked={checkedItems.includes(index)}\n                />\n              </CTableDataCell>\n            </CTableRow>\n          ))}\n        </CTableBody>\n      </CTable>\n      {/* Button to trigger handleSaveClick */}\n      <button onClick={handleSaveClick}>Save</button>\n    </div>\n  );\n};\n\nexport default SmsNumber;\nSmsNumber.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    data: PropTypes.array.isRequired,\n  }).isRequired,\n};\n","import React, { useRef, useState, useEffect } from \"react\";\nimport {\n  CButton,\n  CCard,\n  CAccordion,\n  CAccordionBody,\n  CAccordionItem,\n  CAccordionHeader,\n  CTable,\n  CTableBody,\n  CTableRow,\n  CTableHead,\n  CTableHeaderCell,\n  CTableDataCell,\n  CCol,\n  CForm,\n  CFormInput,\n  CFormLabel,\n  CFormSelect,\n  CInputGroup,\n  CInputGroupText,\n  CFormTextarea,\n  CTextarea,\n} from \"@coreui/react\";\nimport {\n  cilSortAscending,\n  cilCheckAlt,\n  cilTriangle,\n  cilAirplay,\n  cilNotes,\n  cilCog,\n  cilEnvelopeOpen,\n  cilHeadphones,\n  cilBuilding,\n  cilList,\n} from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\nimport { cilLockLocked, cilUser } from \"@coreui/icons\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useMutation } from \"react-query\";\nimport { useNavigate } from \"react-router-dom\";\nimport NotificationAlarm from \"../../forms/Notification-alarm/NotificationAlarm\";\nimport SmsNumber from \"src/views/forms/smsnumber/SmsNumber\";\nimport {\n  getAllSelectedUsers,\n  addNotificationUsers,\n  getAllOrganizationCredits,\n} from \"src/hooks/useNotifications\";\nconst NotificationSetup = () => {\n  const [combinedData, setCombinedData] = useState([]);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { mutate: selectedUsers } = useMutation(getAllSelectedUsers);\n  const { mutate: OrganizationCredits } = useMutation(\n    getAllOrganizationCredits\n  );\n  const { mutate: AddUsers } = useMutation(addNotificationUsers);\n\n  function SelectedUsersDataFetch(id) {\n    // showLoader()\n    //debugger\n    selectedUsers(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setData(data.data);\n        setPhonedata(data.data);\n      },\n      onError: (error) => {\n        //debugger\n        hideLoader();\n      },\n    });\n  }\n  const [credits, setCredits] = useState([]);\n  function CreditsOrganization(id) {\n    //debugger\n    OrganizationCredits(id, {\n      onSuccess: (data) => {\n        //debugger\n        hideLoader();\n        setCredits(data.data);\n      },\n      onError: (error) => {\n        //debugger\n        hideLoader();\n      },\n    });\n  }\n  useEffect(() => {\n    const organizationId = localStorage.getItem(\"OrganizationId\");\n    if (!organizationId || organizationId === \"Select Organization\") {\n      setShowToast({\n        show: true,\n        title: \"Error\",\n        content: \"Please select an organization first.\",\n        color: \"#FF0000\",\n      });\n      return;  // Prevent further execution of the useEffect\n    }\n  \n    if (organizationId && organizationId !== \"Select Organization\") {\n      SelectedUsersDataFetch(organizationId);\n      CreditsOrganization(organizationId);\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  \n  const [isAddMode, setIsAddMode] = useState(false);\n  const [editData, setEditData] = useState(null);\n  const [isSmsNumberModalOpen, setIsSmsNumberModalOpen] = useState(false);\n  const [isAlarmNotificationModalOpen, setIsAlarmNotificationModalOpen] =\n    useState(false);\n  const [showState, setShowState] = useState(true);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  // const [editData, setEditData] = useState()\n  //const [data, setData] = useState([]);\n  // const [isAddMode, setIsAddMode] = useState(false)\n  const { setShowToast } = useGlobalInfo();\n  // const deleteGatewayById = useMutation(deleteGatewayById)\n  const navigate = useNavigate();\n  const openSmsNumberTable = () => {\n    setIsAddMode(true);\n    setEditData(null);\n    setIsSmsNumberModalOpen(true);\n    setShowState(false);\n  };\n\n  const openAlarmNotificationTable = () => {\n    setIsAddMode(true);\n    setEditData(null);\n    setIsAlarmNotificationModalOpen(true);\n    setShowState(false);\n  };\n  const closeSmsNumberModal = () => {\n    setIsSmsNumberModalOpen(false);\n    // Additional cleanup if needed\n  };\n\n  const closeAlarmNotificationModal = () => {\n    setIsAlarmNotificationModalOpen(false);\n    // Additional cleanup if needed\n  };\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const [data, setdata] = useState([]);\n  const [validated, setValidated] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    textemailaddress: \"\",\n    smsnumber: \"\",\n    texttospeechnumber: \"\",\n  });\n  useEffect(() => {\n    if (data) {\n      setFormData(() => ({\n        email: data.email,\n        textemailaddress: data.textemailaddress,\n        smsnumber: data.smsnumber,\n        texttospeechnumber: data.texttospeechnumber,\n      }));\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n  const handleEmailChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n    const inputEmail = e.target.value;\n    const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\n    const isValid = emailRegex.test(inputEmail);\n\n    setValidated(isValid);\n  };\n\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    // setValidated(true)\n\n    // Handle form submission here\n    // if (form.checkValidity() === true) {\n    // showLoader()\n    saveHandler(formData);\n    console.log(formData);\n    closeModal();\n    // }\n  };\n  const [Data, setData] = useState([]);\n  const [phoneData, setPhonedata] = useState([]);\n  function emailhandler(handler) {\n    setData(handler);\n  }\n  function numberhandler(handler) {\n    setPhonedata(handler);\n  }\n  function saveHandler(event) {\n    const combinedArray = [...Data, ...phoneData];\n    event.preventDefault();\n    //debugger\n    // setData(handler)\n    // setPhonedata(handler)\n    // showLoader()\n    // setTimeout(() => {\n    //   if (isAddMode) {\n    AddUsers(combinedArray, {\n      onSuccess: () => {\n        //debugger\n        hideLoader();\n        // setShowToast(() => ({\n        //   show: true,\n        //   title: 'Success',\n        //   content: 'Facility Created Successfully',\n        // }))\n        SelectedUsersDataFetch(localStorage.getItem(\"OrganizationId\"));\n      },\n      onError: (error) => {\n        hideLoader();\n        SelectedUsersDataFetch(localStorage.getItem(\"OrganizationId\"));\n      },\n    });\n    //   } else {\n    //     facilityEdit(\n    //       { handler, editData },\n    //       {\n    //         onSuccess: () => {\n    //           hideLoader()\n    //           setShowToast(() => ({\n    //             show: true,\n    //             title: 'Success',\n    //             content: 'Facility Edited Successfully',\n    //           }))\n    //           if (\n    //             localStorage.getItem('OrganizationId') === null ||\n    //             localStorage.getItem('OrganizationId') === undefined\n    //           ) {\n    //             getAllFacilities()\n    //           } else {\n    //             facilitiesDataFetch(localStorage.getItem('OrganizationId'))\n    //           }\n    //         },\n    //         onError: (error) => {\n    //           hideLoader()\n    //           setShowToast(() => ({\n    //             show: true,\n    //             title: 'Error',\n    //             content: error.response.data.error,\n    //             color: '#FF0000',\n    //           }))\n    //         },\n    //       },\n    //     )\n    //   }\n    // }, 0)\n  }\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      {!showState && isSmsNumberModalOpen && (\n        <GenericModal\n          title={isAddMode ? \"Select User\" : \"Edit SMS Number\"}\n          content={\n            <SmsNumber\n              closeModal={closeSmsNumberModal}\n              saveHandler={numberhandler}\n              data={editData}\n            />\n          }\n          isOpen={isSmsNumberModalOpen}\n          onClose={closeSmsNumberModal}\n        />\n      )}\n\n      {!showState && isAlarmNotificationModalOpen && (\n        <GenericModal\n          title={isAddMode ? \"Select User\" : \"Edit Alarm Notification\"}\n          content={\n            <NotificationAlarm\n              closeModal={closeAlarmNotificationModal}\n              saveHandler={emailhandler}\n              data={editData}\n            />\n          }\n          isOpen={isAlarmNotificationModalOpen}\n          onClose={closeAlarmNotificationModal}\n        />\n      )}\n      {/* <GenericModal\n        title={isAddMode ? 'Select User' : 'Edit NotificationAlram'}\n        content={\n          <NotificationAlarm closeModal={closeModal} saveHandler={saveHandler} data={editData} />\n          //   isAddMode ? (\n          //     <Gateway closeModal={closeModal} saveHandler={saveHandler} />\n          //   ) : (\n          //     <Gateway closeModal={closeModal} saveHandler={saveHandler} data={editData} />\n          //   )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      /> */}\n      <div>\n        <CIcon\n          className=\"pb-2\"\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          icon={cilList}\n          size=\"xxl\"\n        />\n        <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n          Alarm Notification\n        </h3>\n      </div>\n      <div>\n        <CAccordion\n          className={` ${\n            darkMode ? \"table_container_dark\" : \"table_container_light\"\n          }`}\n          alwaysOpen\n          activeItemKey={2}\n        >\n          <CAccordionItem\n            className={` ${\n              darkMode ? \"table_container_dark\" : \"table_container_light\"\n            }`}\n            itemKey={1}\n          >\n            <CAccordionHeader\n              className={` ${\n                darkMode\n                  ? \"table_container_dark\"\n                  : \"table_container_light heading-dark\"\n              }`}\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n            >\n              Notification Setup\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${\n                darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n            >\n              <left className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                {/* This is the first item's accordion body. It is hidden by default, until the collapse */}\n                plugin adds the appropriate classes that we use to style each\n                element. These classes are very useful for the necessory\n                implementation of the work and also the esuresance of task\n                control the overall appearance, as well as the showing and\n                hiding via CSS transitions. You can modify any of this with{\" \"}\n                Alaram Setup custom CSS or\n                overriding our default\n                {/* variables. It's also worth noting that just about any HTML can go within the */}\n                 User setup, though the transition\n                does limit overflow.\n              </left>\n            </CAccordionBody>\n          </CAccordionItem>\n          <br />\n          <CAccordionItem\n            className={` ${\n              darkMode ? \"table_container_dark\" : \"table_container_light\"\n            }`}\n            alwaysOpen\n            itemKey={2}\n          >\n            <CAccordionHeader\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n              className=\"pb-2\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            >\n              SMS Credits\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${\n                darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n              alwaysOpen\n            >\n              <p className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                * It is hidden by default, until the collapse plugin adds the\n                appropriate classes that we use to to be aware of something is\n                necessary\n              </p>\n              <br />\n              <CTable\n                className={` ${\n                  darkMode ? \"table_container_dark\" : \"table_container_light\"\n                }`}\n                alwaysOpen\n                bordered\n              >\n                <CTableBody>\n                  <CTableRow\n                    className={` ${\n                      darkMode\n                        ? \"table_container_dark\"\n                        : \"table_container_light\"\n                    }`}\n                    alwaysOpen\n                  >\n                    <CTableDataCell\n                      style={{ width: \"800px\" }}\n                      className={`pb-2 ${\n                        darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                      }`}\n                      alwaysOpen\n                      id={`${darkMode ? \"heading-dark\" : \"heading-light\"}`}\n                    >\n                      Organization Credit\n                    </CTableDataCell>\n                    <CTableDataCell\n                      className={`pb-2 ${\n                        darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                      }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      {credits ? credits : \"0\"}\n                    </CTableDataCell>\n                  </CTableRow>\n                  <CTableRow\n                    className={` ${\n                      darkMode\n                        ? \"table_container_dark\"\n                        : \"table_container_light\"\n                    }`}\n                  >\n                    <CTableDataCell\n                      className={`pb-2 ${\n                        darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                      }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      Facility Credit\n                    </CTableDataCell>\n                    <CTableDataCell\n                      className={`pb-2 ${\n                        darkMode\n                          ? \"table_container_dark\"\n                          : \"table_container_light\"\n                      }`}\n                      id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    >\n                      0\n                    </CTableDataCell>\n                  </CTableRow>\n                </CTableBody>\n              </CTable>\n            </CAccordionBody>\n          </CAccordionItem>\n          <br />\n\n          <CAccordionItem\n            className={` ${\n              darkMode ? \"table_container_dark\" : \"table_container_light\"\n            }`}\n            alwaysOpen\n            itemKey={3}\n          >\n            <CAccordionHeader\n              className=\"pb-2\"\n              id={`${darkMode ? \"heading-dark\" : \"\"}`}\n              style={{ fontSize: \"50px\", fontFamily: \"sans-serif\" }}\n            >\n              Alarms\n            </CAccordionHeader>\n            <CAccordionBody\n              className={` ${\n                darkMode ? \"table_container_dark\" : \"table_container_light\"\n              }`}\n              alwaysOpen\n            >\n              <CForm\n                className=\"row mt-2 g-3 needs-validation\"\n                noValidate\n                validated={validated}\n                onSubmit={saveHandler}\n                style={{ marginBottom: \"26px\" }}\n              >\n                {/* First Name */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationFirstName\"\n                  >\n                    Email Address\n                  </CFormLabel>\n                  <CInputGroup style={{ height: \"90px\" }}>\n                    <CInputGroupText>\n                      {/* <MdLocationPin /> */}\n                      <CIcon icon={cilBuilding} alt=\"Name\" />\n                    </CInputGroupText>\n                    <textarea\n                      className={`form-control ${\n                        darkMode ? \"input-dark\" : \"input-light\"\n                      }`}\n                      name=\"email\"\n                      value={Data.map((item) => item.email).join(\"\\n\")}\n                      onChange={handleInputChange}\n                      // onClick={() => {\n                      //   setIsAddMode(true)\n                      //   setEditData(null)\n                      //   setIsModalOpen(true)\n                      // }}\n                      readOnly\n                      onClick={openAlarmNotificationTable}\n                      placeholder=\"Enter your email...\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/* Plain Text email Address*/}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationLastName\"\n                  >\n                    Plain text email Address\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilEnvelopeOpen} alt=\"text to email\" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"text\"\n                      className={`input-light pt-0 ${\n                        darkMode ? \"input-dark\" : \"\"\n                      }`}\n                      name=\"textemailaddress\"\n                      value={formData.textemailaddress}\n                      onChange={handleInputChange}\n                      feedbackInvalid=\"Plain Text Email Address is required\"\n                      id=\"validationCustom02\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/*  Email */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationEmail\"\n                  >\n                    SMS Number\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilHeadphones} alt=\"sms number\" />\n                    </CInputGroupText>\n                    {/* <textarea\n                      type=\"number\"\n                      className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n                      name=\"smsnumber\"\n                      value={formData.smsnumber}\n                      onChange={handleEmailChange}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      feedbackInvalid=\" Sms number is required\"\n                      id=\"validationEmail\"\n                      required\n                    /> */}\n                    <textarea\n                      type=\"text\"\n                      className={`form-control ${\n                        darkMode ? \"input-dark\" : \"input-light\"\n                      }`}\n                      name=\"smsnumber\"\n                      value={phoneData\n                        .map((item) => item.phonenumber)\n                        .join(\"\\n\")}\n                      // value={formData.smsnumber}\n                      onChange={handleEmailChange}\n                      onClick={openSmsNumberTable}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      // feedbackInvalid=\" Sms number is required\"\n                      id=\"validationEmail\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n                {/*  Email */}\n                <CCol md={6}>\n                  <CFormLabel\n                    id={`${darkMode ? \"heading-dark\" : \"\"}`}\n                    htmlFor=\"validationEmail\"\n                  >\n                    Text to Speech Number\n                  </CFormLabel>\n                  <CInputGroup\n                    className=\"has-validation\"\n                    style={{ height: \"90px\" }}\n                  >\n                    <CInputGroupText>\n                      <CIcon icon={cilHeadphones} alt=\"text \" />\n                    </CInputGroupText>\n                    <CFormInput\n                      type=\"number\"\n                      className={`input-light pt-0 ${\n                        darkMode ? \"input-dark\" : \"\"\n                      }`}\n                      name=\"texttospeechnumber\"\n                      value={formData.texttospeechnumber}\n                      onChange={handleEmailChange}\n                      aria-describedby=\"inputGroupPrependFeedback\"\n                      feedbackInvalid=\" Text is required\"\n                      id=\"validationText\"\n                      required\n                    />\n                  </CInputGroup>\n                </CCol>\n\n                {/* Submit Button */}\n                <CCol xs={12}>\n                  <CButton\n                    color=\"primary\"\n                    className=\"float-end\"\n                    id={`${darkMode ? \"button-dark\" : \"\"}`}\n                    type=\"submit\"\n                  >\n                    {data ? \"Save \" : \"Add  Details\"}\n                  </CButton>\n                </CCol>\n              </CForm>\n            </CAccordionBody>\n          </CAccordionItem>\n        </CAccordion>\n      </div>\n    </>\n  );\n};\n\nexport default NotificationSetup;\n","import React from 'react'\nimport {\n  CButton,\n  CCol,\n  CContainer,\n  CFormInput,\n  CInputGroup,\n  CInputGroupText,\n  CRow,\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport { cilMagnifyingGlass } from '@coreui/icons'\n\nconst Page404 = () => {\n  return (\n    <div className=\"bg-light min-vh-100 d-flex flex-row align-items-center\">\n      <CContainer>\n        <CRow className=\"justify-content-center\">\n          <CCol md={6}>\n            <div className=\"clearfix\">\n              <h1 className=\"float-start display-3 me-4\">404</h1>\n              <h4 className=\"pt-3\">Oops! You{\"'\"}re lost.</h4>\n              <p className=\"text-medium-emphasis float-start\">\n                The page you are looking for was not found.\n              </p>\n            </div>\n            <CInputGroup className=\"input-prepend\">\n              <CInputGroupText>\n                <CIcon icon={cilMagnifyingGlass} />\n              </CInputGroupText>\n              <CFormInput type=\"text\" placeholder=\"What are you looking for?\" />\n              <CButton color=\"info\">Search</CButton>\n            </CInputGroup>\n          </CCol>\n        </CRow>\n      </CContainer>\n    </div>\n  )\n}\n\nexport default Page404\n","// /* eslint-disable prettier/prettier */\nimport { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"react-query\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useAllDevicesData } from \"src/hooks/useDevices\";\nimport {\n  addDeviceSensor,\n  EditDeviceSensor,\n  getSensorConfigurationData,\n} from \"src/hooks/useDevicesSensors\";\nimport AddDeviceSensor from \"src/views/forms/add-device-sensors/add-device-sensor\";\nimport AddSensorConfigration from \"src/views/forms/add-sensor-configration/add-sensor-configration\";\nimport {\n  getAllDevicesSensorsData,\n  getAllSensorsDataofDep,\n  getAllSensorsDataofFac,\n  deleteDeviceSensor,\n  getAllSensorsDataofOrg,\n} from \"src/hooks/useDevicesSensors\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { getAllDevicesById, getAllDevicesData } from \"src/hooks/useDevices\";\nimport { TRUE } from \"sass\";\nimport {\n  _department,\n  _facility,\n  _organization,\n  _device,\n  _view,\n  _create,\n  hasPermissionToActionAccess,\n} from \"src/constants/permissionContant\";\nconst columns = [\n  { key: \"aws_sensorid\", label: \"Sensor ID\" },\n  { key: \"sensorname\", label: \"Sensor Name\" },\n  { key: \"devices.departments.departmentname\", label: \"Department Name\" },\n  { key: \"devices.devicename\", label: \"Device Name\" },\n];\nconst DevicesSensors = () => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const userPermissions = JSON.parse(localStorage.getItem(\"permissions\"));\n  const organizationPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _organization,\n    _view\n  );\n  const facilityPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _facility,\n    _view\n  );\n  const departmentPermission = hasPermissionToActionAccess(\n    userPermissions,\n    _department,\n    _view\n  );\n  const devicepermission = hasPermissionToActionAccess(\n    userPermissions,\n    _device,\n    _view\n  );\n  const { mutate: DeviceSensorAdd } = useMutation(addDeviceSensor);\n  const { mutate: GetAllDevices } = useMutation(getAllDevicesData);\n  function getAllDevices() {\n    // showLoader();\n    GetAllDevices(\"\", {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: DeviceSensorEdit } = useMutation(EditDeviceSensor);\n  const { mutate: GetSensorConfiguration } = useMutation(\n    getSensorConfigurationData\n  );\n  // const { data: allDevices } = useAllDevicesData();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [deviceId, setDeviceId] = useState();\n  const [isModalSensorOpen, setisModalSensorOpen] = useState(false);\n  const [AddsensorConfiguration, setIsAddsensorConfiguration] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { setShowToast } = useGlobalInfo();\n  const deleteDeviceSensorById = useMutation(deleteDeviceSensor);\n  const [sensorForm, setSensorForm] = useState(false);\n  const [configData, setConfigData] = useState(\"\");\n  const [sensorData, setSensorData] = useState(\"\");\n  const [Deldevdsensor, setDeldevdsensor] = useState(true);\n  const [tableData, setTableData] = useState([]);\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  const openAddSensorConfigurationModal = () => {\n    setIsAddsensorConfiguration(true);\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n  function handleDeviceChange(e) {\n    setDeviceId(e.target.value);\n    deviceData(e.target.value, {\n      onSuccess: (data) => {},\n      onError: () => {},\n    });\n  }\n  const [DeviceData, setDevicesData] = useState([]);\n  const { mutate: getDevicesByID } = useMutation(getAllDevicesById);\n  function devicesDataFetch(selectedId) {\n    // showLoader();\n    getDevicesByID(selectedId, {\n      onSuccess: (data) => {\n        hideLoader();\n        setDevicesData(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getDevicesSensorsByOrg } = useMutation(\n    getAllSensorsDataofOrg\n  );\n  function getAllDataOfOrgSensors(selectedId) {\n    getDevicesSensorsByOrg(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: getDevicesSensorsByFac } = useMutation(\n    getAllSensorsDataofFac\n  );\n  function getAllDataOfFacSensors(selectedId) {\n    getDevicesSensorsByFac(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: getDevicesSensorsByDep } = useMutation(\n    getAllSensorsDataofDep\n  );\n  function getAllDataOfDepSensors(selectedId) {\n    getDevicesSensorsByDep(selectedId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const { mutate: deviceData } = useMutation(getAllDevicesSensorsData);\n  function getAllDataOfDeviceSensors(myDeviceId) {\n    deviceData(myDeviceId, {\n      onSuccess: (data) => {\n        setTableData(data);\n      },\n      onError: () => {},\n    });\n  }\n  const orgId = localStorage.getItem(\"OrganizationId\");\n  const facId = localStorage.getItem(\"facilityId\");\n  const depId = localStorage.getItem(\"departmentId\");\n  useEffect(() => {\n    if (organizationPermission) {\n      if (orgId && facId && depId) {\n        getAllDataOfDepSensors(depId);\n      } else if (orgId && facId) {\n        getAllDataOfFacSensors(facId);\n      } else if (orgId) {\n        getAllDataOfOrgSensors(orgId);\n      }\n    } else if (facilityPermission) {\n      if (facId) {\n        getAllDataOfFacSensors(facId);\n      } else if (facId && depId) {\n        getAllDataOfDepSensors(depId);\n      }\n    } else if (departmentPermission) {\n      if (facId && depId) {\n        getAllDataOfDepSensors(depId);\n      }\n    } else {\n    }\n    //debugger;\n\n    if (organizationPermission || facilityPermission || departmentPermission) {\n      devicesDataFetch(localStorage.getItem(\"departmentId\"));\n    } else if (devicepermission) {\n      getAllDevices();\n    }\n  }, [orgId, facId, depId]);\n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        DeviceSensorAdd(handler, {\n          onSuccess: (res) => {\n            localStorage.setItem(\"sensorId\", res.id);\n            localStorage.setItem(\"deviceid\", res.deviceId);\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Device Sensor Created Successfully\",\n            }));\n          },\n          onError: (error) => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.title,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        DeviceSensorEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Device Edited Successfully\",\n              }));\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error?.response?.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n\n  /**\n   * Deletes a Device sensor by its ID.\n   * @param {number} deviceSensorId - The ID of the Device sensor to be deleted.\n   */\n  const deleteDeviceSensors = (deviceSensorId) => {\n    showLoader();\n    deleteDeviceSensorById.mutate(deviceSensorId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Device Sensor deleted Successfully\",\n        }));\n        hideLoader();\n        // getAllDataOfDeviceSensors(deviceId);\n      },\n      onError: (error) => {\n        //debugger;\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error?.response?.data,\n        }));\n        hideLoader();\n        // getAllDataOfDeviceSensors(deviceId);\n      },\n    });\n    hideLoader();\n  };\n\n  const viewConfig = (item) => {\n    localStorage.setItem(\"sensorId\", item.sensorid);\n    //debugger;\n    setSensorData(item);\n    // configurationView(id)\n    GetSensorConfiguration(item.sensorid, {\n      onSuccess: (res) => {\n        //debugger;\n        hideLoader();\n        setConfigData(res.data);\n        setSensorForm(true);\n      },\n      onError: (error) => {\n        hideLoader();\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error?.response?.data?.title,\n          color: \"#FF0000\",\n        }));\n      },\n    });\n  };\n  function handleDeviceChange(e) {\n    // debugger\n    const selectedDeviceId = e.target.value;\n\n    if (selectedDeviceId !== \"Select Device\") {\n      setDeviceId(selectedDeviceId);\n      getAllDataOfDeviceSensors(selectedDeviceId);\n    } else {\n      // You might want to add additional logic based on your requirements.\n    }\n  }\n\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <>\n      {sensorForm ? (\n        <AddSensorConfigration\n          closeModal={closeModal}\n          saveHandler={saveHandler}\n          data={configData}\n          sensorData={sensorData}\n        />\n      ) : (\n        <>\n          <GenericModal\n            title={isAddMode ? \"Add Equipment sensor\" : \"Edit Equipment sensor\"}\n            content={\n              isAddMode ? (\n                <AddDeviceSensor\n                  closeModal={closeModal}\n                  saveHandler={saveHandler}\n                  openAddSensorConfigurationModal={\n                    openAddSensorConfigurationModal\n                  }\n                  AddsensorConfiguration={AddsensorConfiguration}\n                  setisModalSensorOpen={setisModalSensorOpen}\n                />\n              ) : (\n                <AddDeviceSensor\n                  closeModal={closeModal}\n                  saveHandler={saveHandler}\n                  data={editData}\n                />\n              )\n            }\n            isOpen={isModalOpen}\n            onClose={closeModal}\n          />\n          <CCard\n            className={`table_container_light p-4 ${\n              darkMode ? \"table_container_dark\" : \"\"\n            }`}\n          >\n            <CRow>\n              <CCol md={6}>\n                <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n                  Equipment Sensors\n                </h3>\n              </CCol>\n              <CCol md={3} className=\"float-end\">\n                <select\n                  size=\"sm\"\n                  className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n                  aria-label=\"Department\"\n                  onChange={handleDeviceChange}\n                  value={deviceId}\n                >\n                  <option>Select Equipment</option>\n                  {DeviceData?.data?.map((item) => {\n                    return (\n                      <option key={item.deviceid} value={item.deviceid}>\n                        {item.devicename}\n                      </option>\n                    );\n                  })}\n                </select>\n              </CCol>\n              <CCol md={3}>\n                <CButton\n                  color=\"primary\"\n                  className=\"float-end\"\n                  onClick={() => {\n                    setIsAddMode(true);\n                    setEditData(null);\n                    setIsModalOpen(true);\n                  }}\n                >\n                  Add Equipment Sensor\n                </CButton>\n              </CCol>\n            </CRow>\n            <GenericTable\n              columns={columns}\n              data={tableData?.data}\n              OnDeleteItem={deleteDeviceSensors}\n              openEditModal={openEditModal}\n              viewConfig={viewConfig}\n              Deldevdsensor={Deldevdsensor}\n            />\n          </CCard>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default DevicesSensors;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  CButton,\n  CCol,\n  CForm,\n  CFormSelect,\n  CFormInput,\n  CFormLabel,\n  CInputGroup,\n  CInputGroupText,\n} from \"@coreui/react\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport useDataStore from \"src/store/state\";\nimport { useMutation } from \"react-query\";\nimport { getAllSensors } from \"src/hooks/useOrganizationDevices\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { cilBuilding } from \"@coreui/icons\";\nimport CIcon from \"@coreui/icons-react\";\n\nconst AddOrganizationSensor = ({ closeModal, saveHandler, data }) => {\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const [validated, setValidated] = useState(false);\n  const dataOrganization = useDataStore((state) => state.data);\n  const [orgId, setOrgId] = useState();\n  const [formData, setFormData] = useState({\n    // sensors: [],\n    customerid: orgId,\n    aws_sensorid: \"\",\n  });\n  useEffect(() => {\n    // //debugger\n    if (data) {\n      setFormData({\n        aws_sensorid: data.aws_sensorid,\n        id: Number(data.sensorid),\n        customerid: Number(data.customerid),\n      });\n    }\n  }, [data]);\n  const handleInputChange = (e) => {\n    const { name, value, type, checked } = e.target;\n    setFormData({\n      ...formData,\n      [name]: type === \"checkbox\" ? checked : value,\n    });\n  };\n  // const handleInputChange = (e) => {\n  //   const { name, value, type, checked } = e.target\n  //   if (name === 'typeSensorId') {\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensors: [value],\n  //     }))\n  //   } else if (name === 'sensorId') {\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensors: [...prevData.sensors, value],\n  //     }))\n  //     setFormData((prevData) => ({\n  //       ...prevData,\n  //       sensorId: [value],\n  //     }))\n  //   } else {\n  //     setFormData({\n  //       ...formData,\n  //       [name]: type === 'checkbox' ? checked : value,\n  //     })\n  //   }\n  // }\n  const handleOrgChange = (e) => {\n    const selectedOrgId = parseInt(e.target.value, 10) || 0; // Parse as an integer or default to 0\n    setFormData({\n      ...formData,\n      customerid: selectedOrgId,\n    });\n    setOrgId(selectedOrgId);\n  };\n  const handleSubmit = (event) => {\n    const form = event.currentTarget;\n    event.preventDefault();\n    if (form.checkValidity() === false) {\n      event.stopPropagation();\n    }\n\n    setValidated(true);\n\n    // Handle form submission here\n    if (form.checkValidity() === true) {\n      showLoader();\n      // //debugger\n      saveHandler(formData);\n      event.preventDefault();\n      closeModal();\n    }\n  };\n  const { mutate: getAllSensorsData, data: sensorData } =\n    useMutation(getAllSensors);\n  useEffect(() => {\n    getAllSensorsData(\"\", {\n      onSuccess: (data) => {},\n      onError: (error) => {\n        console.log(error);\n      },\n    });\n  }, []);\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <CForm\n      className=\"row mt-2 g-3 needs-validation\"\n      noValidate\n      validated={validated}\n      onSubmit={handleSubmit}\n    >\n      {/* Type Sensor Id */}\n      {/* <CCol md={12}>\n        <CFormLabel id={`${darkMode ? 'heading-dark' : ''}`} htmlFor=\"validationTypeSensorId\">\n          Type Sensor Id *\n        </CFormLabel>\n        <CInputGroup>\n          <CInputGroupText>\n            {' '}\n            <CIcon icon={cilBuilding} alt=\"typeSensorid\" />\n          </CInputGroupText>\n          <CFormInput\n            type=\"text\"\n            className={`input-light pt-0 ${darkMode ? 'input-dark' : ''}`}\n            name=\"aws_sensorid\"\n            value={formData.aws_sensorid}\n            onChange={handleInputChange}\n            feedbackInvalid=\"Type Sensor Id is required\"\n            id=\"validationTypeSensorId\"\n            disabled={data ? true : false}\n          />\n        </CInputGroup>\n      </CCol> */}\n      {/* Sensor Id*/}\n      {!data ? (\n        <CCol md={12}>\n          {/* Form select*/}\n          <CFormLabel\n            id={`${darkMode ? \"heading-dark\" : \"\"}`}\n            htmlFor=\"validationSensorId\"\n          >\n            Sensor Id*\n          </CFormLabel>\n          <CFormSelect\n            aria-describedby=\"validationCustom04Feedback\"\n            feedbackInvalid=\"Please select a valid sensor id\"\n            name=\"aws_sensorid\"\n            className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n            value={formData.aws_sensorid}\n            id=\"validationSensorId\"\n            onChange={handleInputChange}\n            // required\n          >\n            <option>Select Sensors</option>\n            {sensorData?.data?.map((item, index) => {\n              return (\n                <option value={item} key={index}>\n                  {item}\n                </option>\n              );\n            })}\n          </CFormSelect>\n        </CCol>\n      ) : null}\n      {/* Organization */}\n      <CCol md={12}>\n        {/* Form select*/}\n        <CFormLabel\n          id={`${darkMode ? \"heading-dark\" : \"\"}`}\n          htmlFor=\"validationOrganization\"\n        >\n          Organization*\n        </CFormLabel>\n        <CFormSelect\n          aria-describedby=\"validationCustom04Feedback\"\n          className={` form-select ${darkMode ? \"select-dark\" : \"\"}`}\n          name=\"organization\"\n          value={formData.customerid}\n          feedbackInvalid=\"Please select a valid Organization\"\n          id=\"validationOrganization\"\n          onChange={handleOrgChange}\n          required\n        >\n          <option>Select Organization</option>\n          {dataOrganization[0]?.map((item) => {\n            return (\n              <option key={item.customerid} value={item.customerid}>\n                {item.customername}\n              </option>\n            );\n          })}\n        </CFormSelect>\n      </CCol>\n\n      {/* Submit Button */}\n      <CCol xs={12}>\n        <CButton color=\"primary\" type=\"submit\">\n          {data ? \"Edit Organization Sensor\" : \"Add Organization Sensor\"}\n        </CButton>\n      </CCol>\n    </CForm>\n  );\n};\nAddOrganizationSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    typeSensorId: PropTypes.string,\n    sensorId: PropTypes.string,\n    organization: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        organizationName: PropTypes.string,\n      }),\n    ]),\n  }),\n};\nAddOrganizationSensor.propTypes = {\n  closeModal: PropTypes.func.isRequired,\n  saveHandler: PropTypes.func.isRequired,\n  data: PropTypes.shape({\n    aws_sensorid: PropTypes.string,\n    customerid: PropTypes.string,\n    sensorid: PropTypes.string,\n  }),\n};\nexport default AddOrganizationSensor;\n","import { CButton, CCard, CCol, CRow } from \"@coreui/react\";\nimport React, { useEffect, useState } from \"react\";\nimport GlobalLoader from \"src/components/global-loader/GlobalLoader\";\nimport { GenericModal } from \"src/components/modal/GenericModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\nimport { useLoader } from \"src/global-context/LoaderContext\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  // useAllOrgDevicesData,\n  EditOrganizationSensor,\n  addOrganizationSensor,\n  deleteOrganizationSensor,\n  getAllOrgDevicesData,\n  getAllAssignedSensorsofOrg,\n} from \"src/hooks/useOrganizationDevices\";\nimport { getAllSensorsDataofOrg } from \"src/hooks/useDevicesSensors\";\nimport AddOrganizationSensor from \"src/views/forms/add-organization-sensor/add-organization-sensor\";\nimport GenericTable from \"src/views/table/GenericTable\";\nimport { useMutation } from \"react-query\";\nconst columns = [\n  { key: \"aws_sensorid\", label: \"AWS Sensor ID\" },\n  { key: \"customers.customername\", label: \"Assigned Organization\" },\n];\n\nconst OrganizationSensor = () => {\n  const navigate = useNavigate();\n  const [tableData, setTabledata] = useState([]);\n  // const {\n  //   data,\n  //   isSuccess,\n  //   isError,\n  //   refetch: refetchOrganizationSensors,\n  // } = useAllOrgDevicesData();\n  const { mutate: getAllSensors } = useMutation(getAllOrgDevicesData);\n  function AllSensorsData() {\n    //debugger\n    getAllSensors(\"\", {\n      onSuccess: (data) => {\n        //debugger\n        setTabledata(data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: getAllOrgSensorsData } = useMutation(\n    getAllAssignedSensorsofOrg\n  );\n  function orgSensors(selectedId) {\n    //debugger\n    getAllOrgSensorsData(selectedId, {\n      onSuccess: (data) => {\n        //debugger\n        setTabledata(data.data);\n      },\n      onError: (error) => {\n        hideLoader();\n      },\n    });\n  }\n  const { mutate: OrganizationSensorAdd } = useMutation(addOrganizationSensor);\n  const { mutate: OrganizationSensorEdit } = useMutation(\n    EditOrganizationSensor\n  );\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [editData, setEditData] = useState();\n  const [isAddMode, setIsAddMode] = useState(false);\n  const { dispatch } = useLoader();\n  const showLoader = () => dispatch({ type: \"SHOW_LOADER\" });\n  const hideLoader = () => dispatch({ type: \"HIDE_LOADER\" });\n  const { setShowToast } = useGlobalInfo();\n  const deleteOrganizationSensorById = useMutation(deleteOrganizationSensor);\n  const [delOrgsSensorId, setDelOrgSensorId] = useState(true);\n  const orgId = localStorage.getItem(\"OrganizationId\");\n\n  const openModal = () => {\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n  };\n\n  /**\n   * Deletes an organization sensor by its ID.\n   * @param {number} organizationSensorId - The ID of the organization sensor to be deleted.\n   */\n  const deleteOrganizationSensors = (organizationSensorId) => {\n    showLoader();\n    deleteOrganizationSensorById.mutate(organizationSensorId, {\n      onSuccess: () => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Success\",\n          content: \"Organization Sensor deleted Successfully\",\n        }));\n        hideLoader();\n        // refetchOrganizationSensors();\n      },\n      onError: (error) => {\n        setShowToast(() => ({\n          show: true,\n          title: \"Error\",\n          content: error.response.data,\n        }));\n        hideLoader();\n      },\n    });\n    hideLoader();\n  };\n  const openEditModal = (data) => {\n    setIsAddMode(false);\n    setEditData(data);\n    setIsModalOpen(true);\n  };\n\n  // Fetch additional sensor data when orgId is present\n  // const { mutate: getAllSensorsData, data: sensorData } = useMutation(getAllSensorsDataofOrg);\n\n  // useEffect(() => {\n  //   if (orgId && orgId !== \"Select Organization\") {\n  //     getAllSensorsData(orgId, {\n  //       onSuccess: (data) => {\n  //         // Handle the sensor data as needed\n  //         //debugger;\n  //       },\n  //       onError: (error) => {\n  //         // Handle error if needed\n  //       },\n  //     });\n  //   }\n  // }, [orgId]);\n  // useEffect(() => {\n  //   showLoader();\n  //   if (isSuccess && !isError) {\n  //     hideLoader();\n  //   } else {\n  //     hideLoader();\n  //   }\n  // }, [isSuccess, isError, showLoader, hideLoader]);\n  useEffect(() => {\n      const organizationId = localStorage.getItem(\"OrganizationId\");\n  \n    if (organizationId && organizationId !== undefined && organizationId !== \"Select Organization\") {\n      orgSensors(organizationId);\n    } else {\n      AllSensorsData();\n    }\n  }, [localStorage.getItem(\"OrganizationId\")]);\n  \n\n  function saveHandler(handler) {\n    showLoader();\n    setTimeout(() => {\n      if (isAddMode) {\n        OrganizationSensorAdd(handler, {\n          onSuccess: () => {\n            hideLoader();\n            setShowToast(() => ({\n              show: true,\n              title: \"Success\",\n              content: \"Organization Sensor Created Successfully\",\n            }));\n          },\n          onError: (error) => {\n            debugger\n            if (error.code === \"ERR_BAD_REQUEST\") {\n              localStorage.removeItem(\"token\");\n              localStorage.removeItem(\"OrganizationId\");\n              localStorage.removeItem(\"facilityId\");\n              localStorage.removeItem(\"departmentId\");\n              navigate(\"/login\");\n            }\n            hideLoader();\n            debugger\n            setShowToast(() => ({\n              show: true,\n              title: \"Error\",\n              content: error?.response?.data?.message,\n              color: \"#FF0000\",\n            }));\n          },\n        });\n      } else {\n        OrganizationSensorEdit(\n          { handler, editData },\n          {\n            onSuccess: () => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Success\",\n                content: \"Organization Sensor Edited Successfully\",\n              }));\n              // organizationData('', {\n              //   onSuccess: (data) => {\n              //     addData(data)\n              //   },\n              //   onError: (error) => {\n              //     setShowToast(() => ({\n              //       show: true,\n              //       title: 'Error',\n              //       content: error.response.data,\n              //     }))\n              //   },\n              // })\n            },\n            onError: (error) => {\n              hideLoader();\n              setShowToast(() => ({\n                show: true,\n                title: \"Error\",\n                content: error.response.data,\n                color: \"#FF0000\",\n              }));\n            },\n          }\n        );\n      }\n    }, 0);\n  }\n  const { darkMode, setDarkMode } = useGlobalInfo();\n  return (\n    <>\n      <GenericModal\n        title={\n          isAddMode ? \"Add Organization sensor\" : \"Edit Organization sensor\"\n        }\n        content={\n          isAddMode ? (\n            <AddOrganizationSensor\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n            />\n          ) : (\n            <AddOrganizationSensor\n              closeModal={closeModal}\n              saveHandler={saveHandler}\n              data={editData}\n            />\n          )\n        }\n        isOpen={isModalOpen}\n        onClose={closeModal}\n      />\n      <CCard\n        className={`table_container_light p-4 ${\n          darkMode ? \"table_container_dark\" : \"\"\n        }`}\n      >\n        <CRow>\n          <CCol>\n            <h3 className=\"pb-2\" id={`${darkMode ? \"heading-dark\" : \"\"}`}>\n              Organization Sensors\n            </h3>\n          </CCol>\n          <CCol>\n            <CButton\n              color=\"primary\"\n              id={`${darkMode ? \"button-dark\" : \"\"}`}\n              className=\"float-end\"\n              onClick={() => {\n                setIsAddMode(true);\n                setEditData(null);\n                setIsModalOpen(true);\n              }}\n            >\n              Add Organization Sensor\n            </CButton>\n          </CCol>\n        </CRow>\n        {tableData ? (\n          <GenericTable\n            columns={columns}\n            data={tableData}\n            OnDeleteItem={deleteOrganizationSensors}\n            openEditModal={openEditModal}\n            delOrgsSensorId={delOrgsSensorId}\n          />\n        ) : (\n          <GlobalLoader />\n        )}\n      </CCard>\n    </>\n  );\n};\n\nexport default OrganizationSensor;\n","/* eslint-disable react/prop-types */\nimport { CButton, CCol, CModal, CModalBody, CModalHeader, CModalTitle } from '@coreui/react'\nimport React from 'react'\nimport { useGlobalInfo } from 'src/global-context/GlobalContext'\nexport const DeleteModal = ({ title, content, onClose, isOpen, OnDeleteClick, id }) => {\n  const { darkMode, setDarkMode } = useGlobalInfo()\n  return (\n    <CModal id=\"delete_modal\" visible={isOpen} onClose={onClose}>\n      <CModalHeader closeButton className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n        <CModalTitle id={`${darkMode ? 'heading-dark' : ''}`}>{title}</CModalTitle>\n      </CModalHeader>\n      <CModalBody className={`modal-light pt-0 ${darkMode ? 'modal-dark' : ''}`}>\n        {content}\n        <h4 className=\"ms-3 pt-2\" id={`${darkMode ? 'heading-dark' : ''}`}>\n          Are you sure you want to delete?{' '}\n        </h4>\n\n        <CCol xs={11} className={`modal-light ${darkMode ? 'modal-dark' : ''}`}>\n          <CButton\n            color=\"danger\"\n            className=\"float-end ms-2\"\n            onClick={() => {\n              OnDeleteClick(id)\n              onClose()\n            }}\n          >\n            Delete\n          </CButton>\n          <CButton\n            color=\"primary\"\n            className=\"float-end\"\n            onClick={() => {\n              onClose()\n            }}\n          >\n            Cancel\n          </CButton>\n        </CCol>\n      </CModalBody>\n    </CModal>\n  )\n}\n","/* eslint-disable react/prop-types */\n// GenericTable.js\nimport React, { useEffect, useState } from \"react\";\nimport {\n  CDropdownMenu,\n  CTable,\n  CTableBody,\n  CTableHead,\n  CTableHeaderCell,\n  CTableRow,\n} from \"@coreui/react\";\nimport { CDropdown, CDropdownItem, CDropdownToggle } from \"@coreui/react\";\nimport \"./GenericTable.css\";\nimport CIcon from \"@coreui/icons-react\";\nimport {\n  cilPencil,\n  cilSettings,\n  cilTrash,\n  cilEye,\n  cilSearch,\n} from \"@coreui/icons\";\nimport { DeleteModal } from \"src/components/modal/DeleteModal\";\nimport { useGlobalInfo } from \"src/global-context/GlobalContext\";\n\nconst GenericTable = ({\n  columns = [],\n  data = [],\n  openEditModal,\n  OnDeleteItem,\n  viewConfig,\n  deldevId,\n  deldepId,\n  delfacId,\n  delorgId,\n  deldevsSensorId,\n  delfacstaffId,\n  delUserId,\n  deldevstaffId,\n  deldepstaffId,\n  delgatewayId,\n  Deldevdsensor,\n  delOrgsSensorId,\n  selectedRole,\n  openAssignModal,\n}) => {\n  const renderCell = (item, key) => {\n    const keys = key.split(\".\");\n    return keys.reduce((acc, currentKey) => acc?.[currentKey], item);\n  };\n  const [DeleteId, setDeleteId] = useState(\"\");\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const openDeleteModal = () => {\n    setIsDeleteModalOpen(true);\n  };\n  const closeDeleteModal = () => {\n    setIsDeleteModalOpen(false);\n  };\n  const { darkMode, setDarkMode } = useGlobalInfo();\n\n  return (\n    <div className=\"table-responsive-x\">\n      <DeleteModal\n        title=\"Delete\"\n        content={\"\"}\n        OnDeleteClick={OnDeleteItem}\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        id={DeleteId}\n      />\n      <CTable hover className=\"custom-table\">\n        <CTableHead>\n          <CTableRow>\n            {columns.map((column) => (\n              <CTableHeaderCell\n                className={`table-data-light ${\n                  darkMode ? \"table-data-dark\" : \"\"\n                }`}\n                key={column.key}\n              >\n                {column.label}\n              </CTableHeaderCell>\n            ))}\n            {viewConfig ? (\n              <CTableHeaderCell\n                key=\"viewConfig\"\n                className={`table-data-light ${\n                  darkMode ? \"table-data-dark\" : \"\"\n                }`}\n              >\n                View Config\n              </CTableHeaderCell>\n            ) : null}\n            <CTableHeaderCell\n              className={`table-data-light ${\n                darkMode ? \"table-data-dark\" : \"\"\n              }`}\n              key=\"actions\"\n            >\n              Actions\n            </CTableHeaderCell>\n          </CTableRow>\n        </CTableHead>\n        <CTableBody>\n          {data?.length > 0 &&\n            data?.map((item, index) => (\n              <CTableRow key={index}>\n                {columns.map((column) => (\n                  <td\n                    key={column.key}\n                    className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}\n                  >\n                    {column.key.includes(\".\")\n                      ? renderCell(item, column.key)\n                      : item[column.key]}\n                  </td>\n                ))}\n                {viewConfig ? (\n                  <td\n                    key=\"viewConfig\"\n                    className={`table-data-light ${\n                      darkMode ? \"table-data-dark\" : \"\"\n                    }`}\n                  >\n                    <CIcon\n                      style={{\n                        cursor: \"pointer\",\n                        width: \"25px\",\n                        height: \"22px\",\n                      }}\n                      color=\"secondary\"\n                      icon={cilSearch}\n                      onClick={() => viewConfig(item)}\n                    />\n                  </td>\n                ) : null}\n                <td\n                  key=\"actions\"\n                  className={`table-data-light ${\n                    darkMode ? \"table-data-dark\" : \"\"\n                  }`}\n                >\n                  <CDropdown>\n                    <CDropdownToggle color=\"secondary\">\n                      <CIcon icon={cilSettings} />\n                    </CDropdownToggle>\n                    <CDropdownMenu\n                      className={` pt-0 ${darkMode ? \"dropdown-dark\" : \"\"}`}\n                    >\n                      {selectedRole ? (\n                        <CDropdownItem onClick={() => openAssignModal(item)}>\n                          <CIcon icon={cilPencil} className=\"me-2\" />\n                          {selectedRole === \"Assigned\" ? \"UnAssign\" : \"Assign\"}\n                        </CDropdownItem>\n                      ) : null}\n\n                      <CDropdownItem onClick={() => openEditModal(item)}>\n                        <CIcon icon={cilPencil} className=\"me-2\" />\n                        Edit\n                      </CDropdownItem>\n                      <CDropdownItem\n                        onClick={() => {\n                          if (delorgId) {\n                            setDeleteId(item.customerid);\n                          } else if (delfacId) {\n                            setDeleteId(item.facilityid);\n                          } else if (deldepId) {\n                            setDeleteId(item.departmentid);\n                          } else if (deldevId) {\n                            setDeleteId(item.deviceid);\n                          } else if (deldevsSensorId) {\n                            setDeleteId(item.sensorid);\n                          } else if (\n                            delfacstaffId ||\n                            deldepstaffId ||\n                            deldevstaffId ||\n                            delUserId\n                          ) {\n                            setDeleteId(item);\n                          } else if (delgatewayId) {\n                            setDeleteId(item.gatewayid);\n                          } else if (Deldevdsensor) {\n                            setDeleteId(item.sensorid);\n                          } else if (delOrgsSensorId) {\n                            setDeleteId(item.sensorid);\n                          }\n                          openDeleteModal();\n                        }}\n                      >\n                        <CIcon icon={cilTrash} className=\"me-2\" />\n                        Delete\n                      </CDropdownItem>\n                    </CDropdownMenu>\n                  </CDropdown>\n                </td>\n              </CTableRow>\n            ))}\n          {data?.length === 0 && (\n            <CTableRow key=\"noData\">\n              <td colSpan={columns.length + 1} className=\"text-center\">\n                <b>No data found</b>\n              </td>\n            </CTableRow>\n          )}\n        </CTableBody>\n      </CTable>\n    </div>\n  );\n};\n\nexport default GenericTable;\n"],"names":["_jsx","className","style","height","children","SpinnerInfinity","size","thickness","speed","color","secondaryColor","props","permissions","localStorage","getItem","hasPermissionToActionAccess","pageAccess","pageAction","component","Navigate","to","replace","UserManagement","React","Users","AlramThreshold","path","exact","name","element","Page404","AddSensorConfigration","AppContent","isLoading","useLoader","_useGlobalInfo","useGlobalInfo","darkMode","setDarkMode","_Fragment","GlobalLoader","CContainer","id","concat","maxWidth","lg","Suspense","fallback","CSpinner","_jsxs","Routes","routes","map","route","idx","Route","CustomRoute","Dashboard","constant","Organization","Department","Facilities","Devices","FacilitiesStaff","DevicesStaff","DepartmentStaff","OrganizationSensor","DevicesSensors","Gateway","NotificationSetup","GraphPage","_ref","ModalOpen","uploadedImageUrl","userPermissions","JSON","parse","organizationPermission","_organization","_view","facilityPermission","_facility","_department","_device","organizationLogoUrl","navigate","useNavigate","CDropdown","variant","CDropdownToggle","placement","caret","CAvatar","src","CDropdownMenu","CDropdownItem","onClick","CIcon","icon","cilSettings","fontSize","removeItem","cilLockLocked","closeModal","saveHandler","data","dispatch","_useState","useMutation","getAllRolesData","mutate","useState","_useState2","_slicedToArray","_useState3","_useState4","validated","_useState5","organizationName","file","_useState6","formData","setFormData","useEffect","firstname","lastname","email","address","phonenumber","roleid","CForm","noValidate","onSubmit","event","currentTarget","preventDefault","type","CCol","md","CFormLabel","htmlFor","CInputGroup","CInputGroupText","CFormInput","onChange","e","target","files","_objectSpread","feedbackInvalid","required","xs","CButton","_organizationData$dat","location","useLocation","addData","useDataStore","state","setDepartmentId","showLoader","hideLoader","dispatched","useDispatch","organizationData","setOrganizationData","facility","getAllFacilitiesData","getAllDep","getAllDepartmentsData","departmentPermission","devicePermission","mail","role","_useGlobalInfo2","facilityData","setFacilityData","departmentsData","setDepartmentsData","setDevicesData","devicesData","sidebarShow","useSelector","getOrganization","getOrganizationData","getFacilities","getFacilitiesData","facilitiesDataFetch","selectedId","onSuccess","onError","error","getDevices","getAllDevicesById","getDevicesByOrg","getAllDevicesByOrgId","getDevicesByFac","getAllDevicesByFacId","getDepartments","getDepartmentsData","departmentsDataFetch","getDepartmentsByOrg","getAllDepByOrgId","setUploadedImageUrl","logoUrl","uploadLogo","LogoUpload","LogoPost","uploadLogoPost","logo","console","log","LogoPostUpdate","LogoUploadPatch","code","undefined","_useGlobalInfo3","isModalOpen","setIsModalOpen","CHeader","position","GenericModal","title","content","Settings","handler","openModal","isOpen","onClose","fluid","CHeaderToggler","cilMenu","CHeaderBrand","href","Sitelogo","alt","width","backgroundColor","CHeaderNav","includes","pathname","CNavItem","value","setItem","departmentsDataByOrg","devicesDataFetchOrg","item","customerid","customername","devicesDataFetchFac","facilityid","devicesDataFetch","departmentid","departmentname","display","AppHeaderDropdown","AppSidebarNav","items","navLink","badge","CBadge","text","navItem","index","rest","_objectWithoutProperties","_excluded","Component","_createElement","NavLink","key","navGroup","_item$items","_excluded2","String","toggler","visible","startsWith","_nav","cilBarChart","customClassName","CNavGroup","cilPeople","cilLibraryBuilding","cilBuilding","cilDevices","cilAudio","cilAudioSpectrum","cilCast","_sensor","cilListFilter","setUserPermissions","filteredNav","setFilteredNav","storedPermissions","memoizedFilteredNav","useMemo","hasPermissionToAction","apply","_toConsumableArray","newItems","filter","subItem","Boolean","AppSidebar","unfoldable","sidebarUnfoldable","generalPermissions","FilteredNav","stringify","CSidebar","onVisibleChange","CSidebarBrand","CSidebarNav","SimpleBar","DocsExample","_href","CNav","CNavLink","active","cilMediaPlay","cilCode","CTabContent","CTabPane","CModal","CModalHeader","closeButton","CModalTitle","CModalBody","BASE_URL","permissionList","pageData","setAuthenticationToken","token","setAuthToken","axiosInstance","axios","create","baseURL","timeout","headers","defaults","common","loginPost","_asyncToGenerator","_regeneratorRuntime","mark","_callee","payload","_yield$axiosInstance$","wrap","_context","prev","next","post","password","sent","abrupt","stop","_x","arguments","_ref2","_callee2","_yield$axiosInstance$2","_context2","get","addOrganization","_ref3","_callee3","_yield$axiosInstance$3","_context3","_x2","_ref4","_callee4","_yield$axiosInstance$4","_context4","_ref5","_callee5","_yield$axiosInstance$5","_context5","_x3","EditOrganization","_ref6","_callee6","_yield$axiosInstance$6","_context6","patch","editData","_x4","_ref7","_callee7","_yield$axiosInstance$7","_context7","_x5","_ref8","_callee8","_yield$axiosInstance$8","_context8","_x6","deleteOrganization","_ref9","_callee9","_yield$axiosInstance$9","_context9","delete","_x7","resetpassword","_ref10","_callee10","_yield$axiosInstance$10","_context10","_x8","SetNewPassword","_ref11","_callee11","_yield$axiosInstance$11","_context11","_x9","_ref12","_callee12","_yield$axiosInstance$12","_context12","FormData","append","t0","_x10","_ref13","_callee13","_yield$axiosInstance$13","_context13","_x11","deleteDepartment","addDepartment","EditDepartment","getAllDevicesData","useAllDevicesData","useQuery","deleteDevice","addDevice","EditDevice","deviceid","getAllDevicesSensorsData","getAssignedOrg","getAllSensorsDataofOrg","getAllSensorsDataofFac","getAllSensorsDataofDep","deleteDeviceSensor","addDeviceSensor","EditDeviceSensor","sensorid","addSensorConfiguration","getSensorConfigurationData","EditSensorConfigurationData","deleteFacility","addFacility","facility_type","Number","contactphonenumber","contactname","timezone","currency","street","city","postcode","latitude","longitude","isfacilityadmin","EditFacility","getAllOrgDevicesData","getAllSensors","getAllAssignedSensorsofOrg","deleteOrganizationSensor","addOrganizationSensor","EditOrganizationSensor","getAllUnassignedUsersData","getAllassignedUsersData","getAllUnassignedUsersDataByOrg","getAllassignedUsersDataByOrg","addUser","EditUser","userid","deleteUsers","assignFacilityUser","assignDepartmentUser","assignDeviceUser","UnassignFacilityUser","params","UnassignDepartmentUser","UnassignDeviceUser","_ref14","_callee14","_yield$axiosInstance$14","_context14","set","newItem","sensorId","sensorsData","loading","_populateChart","updatedOptions","chart","xaxis","categories","updatedSeries","sensorName","currentDate","Date","toISOString","split","dataForCurrentDate","reading","date","reading_timestamp","getHours","getMinutes","parseFloat","measure","populateChart","Skeleton","paragraph","rows","ReactApexChart","options","series","_location$state","_objectDestructuringEmpty","sensorGraphData","startDate","setStartDate","endDate","setEndDate","navi","CustomInput","placeholder","setSensorsData","_useState7","_useState8","setLoading","_useState9","_useState10","isSensorId","flexDirection","padding","base","w","CRow","gap","fontWeight","DatePicker","selected","dateFormat","placeholderText","customInput","BlueGraph","Gauge","memo","minValue","maxValue","currentValue","readingTime","awsId","devicename","percentage","Math","min","max","alignItems","marginRight","GaugeChart","nrOfLevels","colors","arcWidth","percent","needleColor","animate","animDelay","animateDuration","marginTop","isNaN","currentTime","prevTime","standardizedReadingDateString","slice","prevTimeValid","getTime","currentTimeValid","timeDifference","seconds","floor","minutes","hours","days","timeAgo","unit","getTimeDifference","displayName","getAllSensorData","FindDashboard","ReportData","CheckPointReportData","SensorGraphData","awsSensorId","setAlarms","_sensorsToMap","setoffline","setOk","setwarnings","showoffline","showAlarms","showok","showwarnings","SensorsData","SensorGraph","setWidgetsData","sensorData","setSensorData","loadingDonut","setLoadingDonut","getAllSensorsData","handleCardClick","formattedDate","stateData","getSensorGraphData","sensorTypeId","fetchData","orgId","intervalId","setInterval","clearInterval","sse","EventSource","onmessage","updatedSensorData","prevWidgetsData","updatedWidgetsData","widget","aws_sensorid","property","readingDateTime","batteryValue","close","newWarnings","newOffline","newOk","warningSensors","offlineSensors","okSensors","forEach","push","sensorsToMap","Array","_","sm","CCard","CCardBody","border","borderRadius","cursor","CCardHeader","Battery","marginLeft","deviceName","day","uniqueDates","Set","sensor","uniqueIntervals","flatMap","readings","interval","measuresMap","Map","aws_id","sensorValue","measures","intervalMeasures","uniqueDate","colSpan","length","values","flat","setDay","setData","sensors","setSensors","intervals","setIntervals","reportData","checkpointReport","checkpointReportDataFetch","_data$data","_data$data2","_data$data3","checkPoints","sensorIds","_useState11","_useState12","selectedSensors","setSelectedSensors","Select","isMulti","_sensors$find","label","find","selectedOptions","selectedSensorTypeIds","styles","container","provided","borderColor","borderBottomColor","boxShadow","selectedDay","Object","entries","intervalValue","ReportTable","count","customStyle","visibility","departmentId","dashboardFind","organizationCount","setOrganiztionCount","facilityCount","setFacilityCount","departmentCount","setDepartmentCount","deviceCount","setDeviceCount","unAssignedSensorCount","setUnAssignedSensorCount","assignedSensorCount","setAssignedSensorCount","orgID","facID","depID","DashboardData","idType","_defineProperty","setTimeout","res","_res$data$counts","_res$data$counts2","_res$data$counts3","_res$data$counts4","_res$data$counts5","_res$data$counts6","counts","OrganizationCount","FacilityCount","DepartmentCount","DeviceCount","UnAssignedSensorCount","AssignedSensorCount","_useState13","_useState14","warnings","_useState15","_useState16","offline","_useState17","_useState18","ok","_useState19","_useState20","Alarms","_useState21","_useState22","setShowwarnings","_useState23","_useState24","setShowoffline","_useState25","_useState26","setShowOk","_useState27","_useState28","filterValue","filterType","marginBottom","cilWarning","CCardText","cilAlarm","cilCheckAlt","cilSortAscending","Donut","TableCard","justifyContent","flexWrap","CounterComp","_sensorData$data","_deviceData$data","deviceData","setValidated","organizationId","deviceId","setDeviceId","sensorname","_useMutation","getDevicesByID","getDevicesByOrgID","getDevicesByFacID","facilityId","devicesDataByFac","devicesDataByOrg","handleInputChange","_e$target","checked","form","organizationContact","checkValidity","stopPropagation","CFormSelect","disabled","selectedDeviceId","parseInt","AddSensorConfiguration","editSensorConfiguration","tempOneChecked","setTempOneChecked","tempTwoChecked","setTempTwoChecked","co2Checked","setCo2Checked","humidityChecked","setHumidityChecked","setShowToast","minvalue","maxvalue","description","hidden","is_active","tempOne","settempOne","tempTwo","settempTwo","co2","setco2","humidity","sethumidity","propertyMap","temp","temp2","defaultProperties","is_hidden","keys","date_created","date_updated","is_deleted","updated_by","propertyName","handleTempOneChange","parsedValue","test","prevState","handleTempTwoChange","_e$target2","handleCo2Change","_e$target3","handleHumidityChange","_e$target4","show","_error$response","_error$response$data","response","_error$response2","_error$response2$data","deviceSensor","updatedFormData","setTrueIsActive","CFormCheck","CFormTextarea","reverse","getAllDepartmentStaffData","addDepartmentStaff","EditDepartmentStaff","deleteDepartmentStaff","getAllDepartmentUserData","getAllDepartmentUserbyOrgID","getAllDepartmentUserbyDepID","getAllDepartmentStaffbyOrgID","getAllDepartmentStaffbyFacID","getAllDepartmentStaffbyDepID","is_admin","users","cilPaperPlane","inputEmail","isValid","cilLocationPin","cilPhone","columns","departmentStaffAdd","departmentStaffEdit","DepartmentStaffData","setdepartmentStaffData","departmentStaff","departmentUser","deleteDepartmentStaffById","setEditData","isAddMode","setIsAddMode","deldepstaffId","setSelectedRole","getAllDepartmentStaff","departmentSatffbyOrgID","departmentStaffDataFetch","departmentSatffbyFacID","departmentStaffDataByOrg","departmentSatffbydepID","departmentStaffDataByDep","departmentUserbyOrgID","departmentUserbyFacID","departmentUserbyDepID","AddDepartmentStaff","defaultValue","selectedValue","departmentUserDataFetch","departmentUserDataByDep","GenericTable","openEditModal","OnDeleteItem","_allDevices$data","allDevices","getAllDeviceStaffData","addDeviceStaff","EditDeviceStaff","deleteDeviceStaff","getAllDeviceUserData","getAllDeviceUserbyOrgID","getAllDeviceStaffbyOrgID","getAllDeviceStaffbyDepID","getAllDeviceStaffbyFacID","DeviceStaffData","setdeviceStaffData","deviceStaff","deviceStaffAdd","deviceStaffEdit","deleteDeviceStaffById","deldevstaffId","getAllDeviceStaff","deviceSatffbyOrgID","deviceStaffDataFetch","deviceSatffbyDepID","deviceStaffDataByOrg","deviceSatffbyFacID","deviceStaffDataByFac","AddDeviceStaff","getAllFacilitiesStaffData","getAllFacilitiesStaffbyOrgID","getAllFacilitiesStaffbyFacID","addFacilityStaff","EditFacilityStaff","deleteFacilityStaff","getAllFacilitiesUserData","getAllFacilitiesUserbyOrgID","getAllFacilitiesUserbyFacID","facilityStaffAdd","facilityStaffEdit","facilityStaffData","setFacilityStaffData","facilityStaff","facilityUser","deleteFacilityStaffById","delfacstaffId","facilityStaffbyOrgID","facilityUserbyOrgID","facilityStaffbyFacID","facilityUserbyFacID","facilitiesStaffDataFetch","facilitiesStaffDataBYfacId","getAllFacilitiesStaff","AddFacilityStaff","facilitiesUserDataFetch","_dataOrganization$","_facilityData$data","dataOrganization","charAt","toUpperCase","cilEnvelopeClosed","cil4k","departmentAdd","departmentEdit","deleteDepartmentById","deldepId","getAllDepartments","AddDepartmentForm","_departmentsData$data","manufacturer","delaytime","cilSignalCellular0","deviceAdd","deviceEdit","deleteDeviceById","deldevId","getAllDevices","AddDeviceForm","_UserData$data","UserData","setUsersData","postcodeValue","cil3d","facilityAdd","facilityEdit","deleteFacilityById","delfacId","getAllFacilities","AddFacilityFrom","gateway_id","gateway_note","carrier","cilNotes","getAllGatewayData","getAllGateways","addGateWay","EditGateWay","gatewayid","deleteGateway","gatewayAdd","gatewayEdit","GatewayData","AllGatewayData","gatewayData","setgatewaydata","deleteGatewayById","delgatewayId","getAllGatewaysByOrg","GatewayForm","contactperson","phone","interval1","interval2","interval3","interval4","cilClock","cilPaperclip","organizationAdd","organizationedit","delorgId","deleteOrganizationById","AddOrganizationForm","getAllNotificationDataByEmail","getAllNotificationDataBySms","getAllSelectedUsers","orgid","addNotificationUsers","getAllOrganizationCredits","tableDataArray","setDataTableArray","AllData","checkedItems","setCheckedItems","isAllNoneChecked","setIsAllNoneChecked","initialCheckedItems","rowData","is_email","CTable","CTableHead","CTableRow","CTableHeaderCell","scope","updatedCheckedItems","from","i","CTableBody","CTableDataCell","isChecked","splice","indexOf","handleCheckboxChange","checkedItemsData","selectedUsers","OrganizationCredits","AddUsers","SelectedUsersDataFetch","setPhonedata","credits","setCredits","isSmsNumberModalOpen","setIsSmsNumberModalOpen","isAlarmNotificationModalOpen","setIsAlarmNotificationModalOpen","showState","setShowState","closeSmsNumberModal","closeAlarmNotificationModal","textemailaddress","smsnumber","texttospeechnumber","handleEmailChange","Data","phoneData","combinedArray","SmsNumber","NotificationAlarm","cilList","CAccordion","alwaysOpen","activeItemKey","CAccordionItem","itemKey","CAccordionHeader","fontFamily","CAccordionBody","bordered","join","readOnly","cilEnvelopeOpen","cilHeadphones","cilMagnifyingGlass","_DeviceData$data","devicepermission","DeviceSensorAdd","GetAllDevices","DeviceSensorEdit","GetSensorConfiguration","setisModalSensorOpen","AddsensorConfiguration","setIsAddsensorConfiguration","deleteDeviceSensorById","sensorForm","setSensorForm","configData","setConfigData","Deldevdsensor","tableData","setTableData","DeviceData","getDevicesSensorsByOrg","getDevicesSensorsByFac","getAllDataOfFacSensors","getDevicesSensorsByDep","getAllDataOfDepSensors","facId","depId","AddDeviceSensor","openAddSensorConfigurationModal","deviceSensorId","_error$response3","viewConfig","_error$response4","_error$response4$data","setOrgId","selectedOrgId","setTabledata","getAllOrgSensorsData","OrganizationSensorAdd","OrganizationSensorEdit","deleteOrganizationSensorById","delOrgsSensorId","message","AddOrganizationSensor","organizationSensorId","DeleteModal","OnDeleteClick","_ref$columns","_ref$data","deldevsSensorId","delUserId","selectedRole","openAssignModal","renderCell","reduce","acc","currentKey","DeleteId","setDeleteId","isDeleteModalOpen","setIsDeleteModalOpen","hover","column","cilSearch","cilPencil","cilTrash"],"sourceRoot":""}